<!doctype html><html lang="en-US"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="profile" href="https://gmpg.org/xfn/11"> <script>(() => {
        let theme = localStorage.getItem("theme");
        document.querySelector("html").dataset.theme = theme ? theme : "light";
    })();</script> <meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1'><link media="print" href="../wp-content/cache/autoptimize/css/autoptimize_b5360d8fe28af112b0854d10ad4c9c05.css" rel="stylesheet"><style id="aoatfcss" media="all">html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}img{border-style:none}strong{font-weight:bolder}code{font-family:monospace,monospace;font-size:1em}small{font-size:80%}button,input,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button{text-transform:none}[type=button],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}textarea{overflow:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.site-header{border-bottom:1px solid var(--header-border-color)}.logo{display:flex;justify-content:center;align-items:center;background:var(--logo-url) no-repeat center center;height:var(--logo-height);width:var(--logo-width)}.header-wrapper{position:relative;box-sizing:border-box;padding:0;margin:0}.site-branding{flex-shrink:0;flex-grow:0;padding:0 .5rem}.site-branding a{display:block;padding:.5rem}.site-navigation{display:flex;align-items:center;justify-content:center}.site-navigation a{text-transform:uppercase;letter-spacing:.05em;font-size:.8rem;font-weight:500;color:var(--menu-color);padding:.5rem}.site-navigation a:visited{color:var(--menu-color)}.menu-toggle{display:block;background:var(--hamburger-icon) no-repeat center center;height:50px;width:50px;outline:0;border:none}.site-menu{position:absolute;top:100%;right:0;left:0;z-index:-1;visibility:hidden;opacity:0;transform:translateY(-100%);padding:0;margin:0}.site-menu li{list-style:none;border-bottom:solid 1px var(--border-color);padding:.5rem 0}.site-menu li:first-child{border-top:solid 1px var(--border-color)}.site-menu a{display:block}.sub-menu{display:none}.menu-item-has-children a{display:flex;justify-content:space-between;align-items:center}.menu-item-has-children>a:after{content:"";-webkit-mask:var(--down-icon);mask:var(--down-icon);mask-size:cover;-webkit-mask-size:cover;display:inline-block;height:1rem;width:1rem;background-color:var(--text-color);margin-left:5px}.menu-item-has-children .sub-menu li{border:none}.menu-item-has-children .sub-menu a{font-size:.85rem;margin-left:1rem;text-transform:none}svg{fill:currentColor}.switch-theme{padding:.25rem 1rem;border-radius:1rem;width:20px;height:20px}.switch-theme svg{margin-right:.25rem}html .light-mode-icon{display:none}html .dark-mode-icon{display:inline}@media (min-width:768px){.menu-item-has-children .sub-menu a{margin-left:0;font-size:.8rem}.menu-toggle{display:none}.site-branding a{padding:0}.site-menu{opacity:1;visibility:visible;position:relative;top:0;left:0;z-index:1;transform:translateY(0);display:flex;justify-content:flex-end;align-items:center}.site-navigation a{padding:1.25rem .75rem}.site-menu li{padding:0}.sub-menu a{padding:.65rem}.menu-item-has-children{position:relative}.site-menu .sub-menu{display:none;background-color:var(--submenu-bg-color);border:solid 1px var(--border-color);border-radius:.25rem;min-width:200px}.site-menu>.menu-item-has-children>a:after{content:"";-webkit-mask:var(--down-icon);mask:var(--down-icon);mask-size:cover;-webkit-mask-size:cover;display:inline-block;height:1rem;width:1rem;background-color:var(--text-color)}.site-menu>.menu-item{border-bottom:solid 1px transparent}.site-menu>.current-menu-item{border-bottom:solid 1px var(--current-color)}.site-menu li:first-child,.site-menu li:last-child{border-top:none}}.entry-content .wp-block-group>div{background-color:var(--body-bg-color);border:solid 1px var(--section-border-color);border-radius:15px;box-shadow:0 3px 0 rgba(84,94,111,.2);padding:20px;margin:0;margin-bottom:30px}.entry-content .wp-block-group>div ul{margin:0}.entry-content .wp-block-group>div h2{padding-left:0;margin:0;margin-bottom:10px}.fancy-list{counter-reset:my-counter}.fancy-list a,.fancy-list a:visited{color:var(--link-color)}.fancy-list dt{position:relative;font-size:24px;padding:4px 0 10px}.fancy-list dt:before{content:counter(my-counter);counter-increment:my-counter;position:absolute;left:-.75rem;top:-2.5rem;color:var(--fancy-list-color);font-size:6rem;font-weight:300}.fancy-list dd{margin:0 0 50px}.fancy-list dd,.fancy-list dt{padding-left:65px}.search-form{margin:1rem 0}::-webkit-scrollbar{width:.5rem;height:.5rem}::-webkit-scrollbar-track{background:#b8c0c8}::-webkit-scrollbar-thumb{background:#708090;border-radius:10px}.alignright{float:right;margin:.5em 0 .5em 1em}:root{--font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;--font-family-code:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;--primary-color:#00369a;--body-bg-color:#fff;--text-color:#000;--header-bg-color:#fff;--header-border-color:#e7ebed;--heading-color:#262626;--link-color:#00369a;--link-color-hover:#00369a;--title-color:#ec5525;--code-badge-color:#fff;--footer-bg-color:#fafafa;--footer-color:#525252;--footer-link-color:#00369a;--footer-link-color-hover:#00369a;--ads-label-color:#666;--down-icon:url('data:image/svg+xml;utf8,');--hamburger-icon:url('data:image/svg+xml;utf8,');--x-icon:url('data:image/svg+xml;utf8,');--current-color:#ec5525;--menu-color:#323330;--border-color:#f4f4f4;--hover-background-color:#f4f4f4;--menu-background-color:#fff;--submenu-bg-color:#fff;--toggle-color:#f4f4f4;--button-bg-color:#0d6efd;--button-color:#fff;--button-bg-color-hover:#0b5ed7;--button-color-hover:#fff;--button-border-color:#0a58ca;--section-border-color:#ddd;--inline-code-bg-color:#f5f5f5;--inline-code-color:#da1039;--input-bg-color:#fff;--input-color:#262626;--input-border-color:#e3e3e3;--input-border-focus-color:#e3e3e3;--image-filter:grayscale(0%);--svg-color:#323330;--themeable-image-filter:none;--page-nav-bg-color:#fff;--mark-bg-color:#fff6ea;--feature-image-filter:none;--fancy-list-color:rgba(0, 0, 0, 0.15);--output-bg-color:#f9fafb;--output-border-color:#e7ebed}.wp-block-image{margin-bottom:1em}.wp-block-image img{max-width:100%}.wp-block-image:not(.is-style-rounded) img{border-radius:inherit}.wp-block-image .alignright{display:table}.wp-block-image .alignright{float:right;margin:.5em 0 .5em 1em}.feature-page{display:flex;align-items:flex-start;padding:0;margin:0 0 1rem}.feature-page>.feature-image{width:150px;height:150px;margin:0 1rem 0 0;border-radius:50%;background-color:var(--feature-image-bg-color, "#2DA1DB");display:flex;justify-content:center;align-items:center}.feature-page>.feature-body{flex:1}.feature-page h3{margin:0 0 .5rem}html{background:var(--body-bg-color);color:var(--text-color);font-size:1rem}body{font-family:var(--font-family);font-size:1rem;line-height:1.8}img{height:auto;max-width:100%}figure{margin:1em 0}h1,h2,h3{font-weight:400;color:var(--heading-color);padding:0}h1{font-size:1.875rem;margin-bottom:1.7rem}h2{font-size:1.5rem;margin-bottom:1rem}h3{font-size:1.3125rem;margin-bottom:.875rem}p code{font-family:var(--font-family-code);font-size:.875rem;font-weight:400;background-color:var(--inline-code-bg-color);color:var(--inline-code-color);padding:.25em .5em .25em;border-radius:3px}.wp-block-code code{white-space:pre!important}.screen-reader-text{border:0;clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:fixed!important;width:1px;word-wrap:normal!important;outline-style:dashed;outline-width:.125rem;outline-color:var(--text-color)}a{color:var(--link-color);text-decoration:none}a:visited{color:var(--link-color)}ul{padding:0}.header-wrapper{display:flex;justify-content:space-between;align-items:center}article{padding:0 .5rem}aside{padding:1rem .5rem}.entry-title{color:var(--title-color);font-weight:400}.widget-title{font-weight:700;font-size:.8rem;letter-spacing:1px;text-transform:uppercase;padding:0 0 1rem;margin:0}.widget_search{margin-bottom:1.5rem}.widget .menu{margin:0 0 1.5rem}.breadcrumbs{font-size:.9rem;padding:0 .5rem}.ad{text-align:left;margin:.5rem 0}.ad-300{width:300px;height:280px;overflow:hidden}.ad:before{content:"Advertisements";color:var(--ads-label-color);font-size:10px;display:block;text-transform:uppercase;text-align:center}.ad-336{width:336px;height:320px;overflow:hidden}code.hljs{padding:1rem}.search-form{overflow:hidden;width:100%}.search-form input[type=search]{border:1px solid var(--input-border-color);border-radius:3px;font-size:1rem;padding:16px;width:100%;outline-offset:-2px;outline:0;background-color:var(--input-bg-color);color:var(--input-color)}.search-form input[type=submit]{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;padding:0;position:absolute;width:1px}.entry-content ul{padding-left:1rem}.entry-content li{margin:0 0 .5rem 1rem}.widget ul{margin:0;padding:0}.widget li{list-style-type:none;text-align:left;word-wrap:break-word;font-size:1rem;padding:.25rem 0}.widget li:first-child{padding-top:0}.widget li a{display:inline-block;padding:0 0 .25rem}.entry-content .wp-block-group ul{padding-left:0;list-style:none}.entry-content .wp-block-group ul>li:before{content:"";border-color:transparent #ccc;border-style:solid;border-width:.3em 0 .3em .35em;display:block;height:0;width:0;left:-.75rem;top:1.25rem;position:relative;background:0 0;margin:0}.wp-block-image .alignright{float:right;margin:.5em 0 .5em 1em}@media (min-width:768px){body{font-size:1rem}}@media (min-width:1140px){body{font-size:1rem}.site{margin:0 auto;display:flex;flex-direction:column;overflow:hidden}.site-inner{display:flex;justify-content:space-between}.site-main{width:730px}aside{width:300px;padding:1rem .5rem}.wrap{width:1050px;margin:0 auto}.site-header{background:var(--header-bg-color);width:100%}.header-wrapper{display:flex;justify-content:space-between;align-items:center}}.hljs{display:block;overflow-x:auto;padding:.5em;background:#333;color:#fff}.hljs-title{color:#ffa}.hljs-keyword{color:#fcc28c}.hljs-comment{color:#888}.hljs-meta{color:#fc9b9b}.wth-title{display:inline-block;margin-right:1rem}.wth-btn{display:inline-block;border:none;outline:0;padding:10px 25px;border-radius:3px;font-size:.9rem}.wth-form-wrapper{margin-bottom:4rem}.wth-btn-submit{background:var(--button-bg-color);color:var(--button-color);border:solid 1px var(--button-border-color);margin-top:10px}.wth-btn-cancel{background-color:#fff;border:solid 1px var(--button-bg-color);color:var(--button-bg-color);margin-top:10px}.wth-message{background-color:var(--input-bg-color);border:1px solid var(--input-border-color);min-height:150px;width:96%;padding:2%;display:block;border-radius:5px;outline:0;color:var(--text-color)}.wth-form{display:block;text-align:left}.wth-form.hidden{display:none}</style><link rel="stylesheet" media="print" href="../wp-content/cache/autoptimize/css/autoptimize_88ef1eb79f7a6f21393f90d4f70b8c2c.css" onload="this.onload=null;this.media='all';"><noscript id="aonoscrcss"><link media="all" href="../wp-content/cache/autoptimize/css/autoptimize_88ef1eb79f7a6f21393f90d4f70b8c2c.css" rel="stylesheet"></noscript><title>PostgreSQL Window Functions: The Ultimate Guide</title><meta name="description" content="In this tutorial, you will learn how to use the PostgreSQL window functions to perform the calculation across the set of rows related to the current row."><link rel="canonical" href="index.htm"><meta name="twitter:label1" content="Est. reading time"><meta name="twitter:data1" content="10 minutes"> <script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"WebSite","@id":"https://www.postgresqltutorial.com/#website","url":"https://www.postgresqltutorial.com/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://www.postgresqltutorial.com/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://www.postgresqltutorial.com/postgresql-window-function/#primaryimage","url":"https://www.postgresqltutorial.com/wp-content/uploads/2020/03/window-functions.png","contentUrl":"https://www.postgresqltutorial.com/wp-content/uploads/2020/03/window-functions.png","width":150,"height":150},{"@type":"WebPage","@id":"https://www.postgresqltutorial.com/postgresql-window-function/#webpage","url":"https://www.postgresqltutorial.com/postgresql-window-function/","name":"PostgreSQL Window Functions: The Ultimate Guide","isPartOf":{"@id":"https://www.postgresqltutorial.com/#website"},"primaryImageOfPage":{"@id":"https://www.postgresqltutorial.com/postgresql-window-function/#primaryimage"},"datePublished":"2016-06-20T05:02:39+00:00","dateModified":"2021-04-27T01:56:11+00:00","description":"In this tutorial, you will learn how to use the PostgreSQL window functions to perform the calculation across the set of rows related to the current row.","breadcrumb":{"@id":"https://www.postgresqltutorial.com/postgresql-window-function/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://www.postgresqltutorial.com/postgresql-window-function/"]}]},{"@type":"BreadcrumbList","@id":"https://www.postgresqltutorial.com/postgresql-window-function/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://www.postgresqltutorial.com/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Window Functions"}]}]}</script> <style id='global-styles-inline-css' type='text/css'>body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--duotone--dark-grayscale: url('#wp-duotone-dark-grayscale');--wp--preset--duotone--grayscale: url('#wp-duotone-grayscale');--wp--preset--duotone--purple-yellow: url('#wp-duotone-purple-yellow');--wp--preset--duotone--blue-red: url('#wp-duotone-blue-red');--wp--preset--duotone--midnight: url('#wp-duotone-midnight');--wp--preset--duotone--magenta-yellow: url('#wp-duotone-magenta-yellow');--wp--preset--duotone--purple-green: url('#wp-duotone-purple-green');--wp--preset--duotone--blue-orange: url('#wp-duotone-blue-orange');--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}</style><link rel="https://api.w.org/" href="../wp-json/index.htm"><link rel="alternate" type="application/json" href="../wp-json/wp/v2/pages/1737"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="../xmlrpc.php?rsd"><link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.postgresqltutorial.com/wp-includes/wlwmanifest.xml"><meta name="generator" content="WordPress 5.9.3"><link rel='shortlink' href='index.htm?p=1737'><link rel="alternate" type="application/json+oembed" href="../wp-json/oembed/1.0/embed-14?url=https%3A%2F%2Fwww.postgresqltutorial.com%2Fpostgresql-window-function%2F"><link rel="alternate" type="text/xml+oembed" href="../wp-json/oembed/1.0/embed-15?url=https%3A%2F%2Fwww.postgresqltutorial.com%2Fpostgresql-window-function%2F&#038;format=xml"><style>html{--logo-url:url("../wp-content/uploads/2021/04/postgresql-tutorial.svg");--logo-width:178px;--logo-height:53px;--icon-copy-url:url("../wp-content/themes/evolution/img/copy-light.svg");--icon-check-url:url("../wp-content/themes/evolution/img/check-light.svg");--feature-image-bg-color:#fff}html[data-theme="dark"]{--logo-url:url("../wp-content/uploads/2021/04/postgresql-tutorial-dark.svg");--logo-width:178px;--logo-height:53px}html[data-theme="dark"]{--body-bg-color:#171717;--text-color:#e3e3e3;--primary-color:#4db2ff;--header-bg-color:#171717;--header-border-color:#454545;--heading-color:#e3e3e3;--link-color:#4db2ff;--link-color-hover:#0091ff;--title-color:#e3e3e3;--list-item-color:#e3e3e3;--badge-bg-color:#e3e3e3;--badge-color:#323330;--code-badge-color:#fff;--footer-bg-color:#2e2e2e;--footer-color:#e3e3e3;--footer-link-color:#e3e3e3;--footer-link-color-hover:#c7c7c7;--ads-label-color:#e3e3e3;--down-icon:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewbox="0 0 16 16"><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"></path></svg>');--hamburger-icon:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="white"><path d="M24 6h-24v-4h24v4zm0 4h-24v4h24v-4zm0 8h-24v4h24v-4z"></path></svg>');--x-icon:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" fill="white" viewbox="0 0 16 16"><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"></path></svg>');--current-color:#e3e3e3;--menu-color:#e3e3e3;--border-color:#454545;--hover-background-color:#242424;--menu-background-color:#171717;--submenu-bg-color:#2e2e2e;--toggle-color:#242424;--button-bg-color:#282828;--button-color:#e3e3e3;--button-bg-color-hover:#323330;--button-color-hover:#e3e3e3;--button-border-color:#282828;--section-border-color:#454545;--inline-code-bg-color:#454545;--inline-code-color:#e3e3e3;--input-bg-color:#2e2e2e;--input-color:#e3e3e3;--input-border-color:#e3e3e3;--input-border-focus-color:#4db2ff;--image-filter:grayscale(50%);--themeable-image-filter:invert(1) sepia(0) saturate(1) hue-rotate(0deg);--svg-color:#f4f4f4;--page-nav-bg-color:inherit;--mark-bg-color:#454545;--feature-image-bg-color:#282828;--feature-image-filter:grayscale(50%);--fancy-list-color:#e3e3e3;--output-bg-color:#2e2e2e;--output-border-color:#2e2e2e}</style><style media="print">.site-main:before{content:url("../wp-content/uploads/2021/04/postgresql-tutorial.svg");display:block;margin-right:auto;margin-left:auto;text-align:center;max-width:200px}</style><meta name="google-site-verification" content="iYUQysFD5d1My-CX6m-0HCheV1qG3zVnth1bn4WWjn0">  <script async="" src="../tag/js/gpt.js"></script>  <script async="" type="text/javascript" src="../ads/ob/tage/ob.js"></script>  <script async="" src="../gtag/js?id=G-YNNX6ZSRHK"></script> <script>window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-YNNX6ZSRHK');</script><link rel="icon" href="../wp-content/uploads/2017/03/favicon.png" sizes="32x32"><link rel="icon" href="../wp-content/uploads/2017/03/favicon.png" sizes="192x192"><link rel="apple-touch-icon" href="../wp-content/uploads/2017/03/favicon.png"><meta name="msapplication-TileImage" content="https://www.postgresqltutorial.com/wp-content/uploads/2017/03/favicon.png"></head><body class="page-template-default page page-id-1737 page-parent"> <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-dark-grayscale"><fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></fecolormatrix><fecomponenttransfer color-interpolation-filters="sRGB"><fefuncr type="table" tablevalues="0 0.49803921568627"></fefuncr><fefuncg type="table" tablevalues="0 0.49803921568627"></fefuncg><fefuncb type="table" tablevalues="0 0.49803921568627"></fefuncb><fefunca type="table" tablevalues="1 1"></fefunca></fecomponenttransfer><fecomposite in2="SourceGraphic" operator="in"></fecomposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-grayscale"><fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></fecolormatrix><fecomponenttransfer color-interpolation-filters="sRGB"><fefuncr type="table" tablevalues="0 1"></fefuncr><fefuncg type="table" tablevalues="0 1"></fefuncg><fefuncb type="table" tablevalues="0 1"></fefuncb><fefunca type="table" tablevalues="1 1"></fefunca></fecomponenttransfer><fecomposite in2="SourceGraphic" operator="in"></fecomposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-purple-yellow"><fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></fecolormatrix><fecomponenttransfer color-interpolation-filters="sRGB"><fefuncr type="table" tablevalues="0.54901960784314 0.98823529411765"></fefuncr><fefuncg type="table" tablevalues="0 1"></fefuncg><fefuncb type="table" tablevalues="0.71764705882353 0.25490196078431"></fefuncb><fefunca type="table" tablevalues="1 1"></fefunca></fecomponenttransfer><fecomposite in2="SourceGraphic" operator="in"></fecomposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-blue-red"><fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></fecolormatrix><fecomponenttransfer color-interpolation-filters="sRGB"><fefuncr type="table" tablevalues="0 1"></fefuncr><fefuncg type="table" tablevalues="0 0.27843137254902"></fefuncg><fefuncb type="table" tablevalues="0.5921568627451 0.27843137254902"></fefuncb><fefunca type="table" tablevalues="1 1"></fefunca></fecomponenttransfer><fecomposite in2="SourceGraphic" operator="in"></fecomposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-midnight"><fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></fecolormatrix><fecomponenttransfer color-interpolation-filters="sRGB"><fefuncr type="table" tablevalues="0 0"></fefuncr><fefuncg type="table" tablevalues="0 0.64705882352941"></fefuncg><fefuncb type="table" tablevalues="0 1"></fefuncb><fefunca type="table" tablevalues="1 1"></fefunca></fecomponenttransfer><fecomposite in2="SourceGraphic" operator="in"></fecomposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-magenta-yellow"><fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></fecolormatrix><fecomponenttransfer color-interpolation-filters="sRGB"><fefuncr type="table" tablevalues="0.78039215686275 1"></fefuncr><fefuncg type="table" tablevalues="0 0.94901960784314"></fefuncg><fefuncb type="table" tablevalues="0.35294117647059 0.47058823529412"></fefuncb><fefunca type="table" tablevalues="1 1"></fefunca></fecomponenttransfer><fecomposite in2="SourceGraphic" operator="in"></fecomposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-purple-green"><fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></fecolormatrix><fecomponenttransfer color-interpolation-filters="sRGB"><fefuncr type="table" tablevalues="0.65098039215686 0.40392156862745"></fefuncr><fefuncg type="table" tablevalues="0 1"></fefuncg><fefuncb type="table" tablevalues="0.44705882352941 0.4"></fefuncb><fefunca type="table" tablevalues="1 1"></fefunca></fecomponenttransfer><fecomposite in2="SourceGraphic" operator="in"></fecomposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-blue-orange"><fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></fecolormatrix><fecomponenttransfer color-interpolation-filters="sRGB"><fefuncr type="table" tablevalues="0.098039215686275 1"></fefuncr><fefuncg type="table" tablevalues="0 0.66274509803922"></fefuncg><fefuncb type="table" tablevalues="0.84705882352941 0.41960784313725"></fefuncb><fefunca type="table" tablevalues="1 1"></fefunca></fecomponenttransfer><fecomposite in2="SourceGraphic" operator="in"></fecomposite></filter></defs></svg><div id="page" class="site"> <a class="skip-link screen-reader-text" href="#primary">Skip to content</a><header id="masthead" class="site-header"><div class="wrap header-wrapper"><div class="site-branding"> <a href="../index.htm" rel="home" aria-current="page" class="logo" aria-label="Go to the homepage"> </a></div><nav id="site-navigation" class="site-navigation"><ul id="primary-menu" class="site-menu"><li id="menu-item-28" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-28"><a title="PostgreSQL Tutorial" href="../index.htm">Home</a></li><li id="menu-item-5122" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5122"><a title="Getting Started with PostgreSQL" href="../postgresql-getting-started/index.htm">Getting Started</a></li><li id="menu-item-4492" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-4492"><a title="Advanced PostgreSQL">Advanced</a><ul class="sub-menu"><li id="menu-item-4486" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4486"><a title="PostgreSQL Views" href="../postgresql-views/index.htm">Views</a></li><li id="menu-item-4487" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4487"><a title="PostgreSQL Indexes" href="../postgresql-indexes/index.htm">Indexes</a></li><li id="menu-item-4485" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4485"><a title="PostgreSQL Triggers" href="../postgresql-triggers/index.htm">Triggers</a></li></ul></li><li id="menu-item-5437" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-5437"><a href="../postgresql-plpgsql/index.htm">PL/pgSQL</a></li><li id="menu-item-5991" class="menu-item menu-item-type-custom menu-item-object-custom current-menu-ancestor current-menu-parent menu-item-has-children menu-item-5991"><a title="PostgreSQL Functions">Functions</a><ul class="sub-menu"><li id="menu-item-4497" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4497"><a title="PostgreSQL Aggregate Functions" href="../postgresql-aggregate-functions/index.htm">Aggregate Functions</a></li><li id="menu-item-4496" class="menu-item menu-item-type-post_type menu-item-object-page current-menu-item page_item page-item-1737 current_page_item menu-item-4496"><a title="PostgreSQL Window Functions" href="index.htm" aria-current="page">Window Functions</a></li><li id="menu-item-4500" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4500"><a title="PostgreSQL Date Functions" href="../postgresql-date-functions/index.htm">Date Functions</a></li><li id="menu-item-4499" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4499"><a title="PostgreSQL String Functions" href="../postgresql-string-functions/index.htm">String Functions</a></li><li id="menu-item-4498" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4498"><a title="PostgreSQL Math Functions" href="../postgresql-math-functions/index.htm">Math Functions</a></li></ul></li><li id="menu-item-5992" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-5992"><a title="API">API</a><ul class="sub-menu"><li id="menu-item-4493" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4493"><a href="../postgresql-php/index.htm">PostgreSQL PHP</a></li><li id="menu-item-4494" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4494"><a href="../postgresql-python/index.htm">PostgreSQL Python</a></li><li id="menu-item-4495" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4495"><a href="../postgresql-jdbc/index.htm">PostgreSQL JDBC</a></li></ul></li><li id="menu-item-4501" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4501"><a title="PostgreSQL Administration" href="../postgresql-administration/index.htm">Administration</a></li></ul> <a aria-label="Change Theme" class="switch-theme"> <svg class="dark-mode-icon" role="img" width="1rem" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 512 512"><title>Dark Mode</title> <path fill="currentColor" d="M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z"> </path> </svg> <svg class="light-mode-icon" role="img" width="1rem" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 512 512"><title>Light Mode</title> <path fill="currentColor" d="M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z"> </path> </svg> </a> <button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" aria-label="Primary Menu"></button></nav></div></header><div class="site-inner wrap"><main id="primary" class="site-main"><p class="breadcrumbs"><span><span><a href="../index.htm">Home</a> » <span class="breadcrumb_last" aria-current="page">PostgreSQL Window Functions</span></span></span></p><article id="post-1737" class="post-1737 page type-page status-publish has-post-thumbnail hentry"><header class="entry-header"><h1 class="entry-title">PostgreSQL Window Functions</h1></header><div class="entry-content"><div class="whitelist"><div class="ad ad-336"><div class="increaserev bidmcm336x280"></div></div></div><p><strong>Summary</strong>: in this tutorial, you will learn how to use the PostgreSQL window functions to perform the calculation across a set of rows related to the current row.</p><h2>Setting up sample tables</h2><p>First, <a href="../postgresql-tutorial/postgresql-create-table/index.htm">create two tables</a> named <code>products</code> and <code>product_groups</code> for the demonstration:</p><figure class="wp-block-image"><noscript><img width="540" height="173" src="../wp-content/uploads/2016/06/products_product_groups_tables.png" alt="" class="wp-image-2268" srcset="../wp-content/uploads/2016/06/products_product_groups_tables.png 540w, ../wp-content/uploads/2016/06/products_product_groups_tables-300x96.png 300w" sizes="(max-width: 540px) 100vw, 540px"></noscript><img width="540" height="173" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20540%20173%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2016/06/products_product_groups_tables.png" alt="" class="lazyload wp-image-2268" data-srcset="https://www.postgresqltutorial.com/wp-content/uploads/2016/06/products_product_groups_tables.png 540w, https://www.postgresqltutorial.com/wp-content/uploads/2016/06/products_product_groups_tables-300x96.png 300w" data-sizes="(max-width: 540px) 100vw, 540px"></figure><pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><style>.wp-block-code {
	border: 0;
	padding: 0;
}

.wp-block-code > div {
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}</style><div><code class="hljs language-sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product_groups (
	<span class="hljs-keyword">group_id</span> <span class="hljs-built_in">serial</span> PRIMARY <span class="hljs-keyword">KEY</span>,
	group_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>
);

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (
	product_id <span class="hljs-built_in">serial</span> PRIMARY <span class="hljs-keyword">KEY</span>,
	product_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
	price <span class="hljs-built_in">DECIMAL</span> (<span class="hljs-number">11</span>, <span class="hljs-number">2</span>),
	<span class="hljs-keyword">group_id</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
	<span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-keyword">group_id</span>) <span class="hljs-keyword">REFERENCES</span> product_groups (<span class="hljs-keyword">group_id</span>)
);</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><p>Second, <a href="../postgresql-tutorial/postgresql-insert/index.htm">insert</a> some rows into these tables:</p><pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> product_groups (group_name)
<span class="hljs-keyword">VALUES</span>
	(<span class="hljs-string">'Smartphone'</span>),
	(<span class="hljs-string">'Laptop'</span>),
	(<span class="hljs-string">'Tablet'</span>);

<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> products (product_name, <span class="hljs-keyword">group_id</span>,price)
<span class="hljs-keyword">VALUES</span>
	(<span class="hljs-string">'Microsoft Lumia'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">200</span>),
	(<span class="hljs-string">'HTC One'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">400</span>),
	(<span class="hljs-string">'Nexus'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">500</span>),
	(<span class="hljs-string">'iPhone'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">900</span>),
	(<span class="hljs-string">'HP Elite'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1200</span>),
	(<span class="hljs-string">'Lenovo Thinkpad'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">700</span>),
	(<span class="hljs-string">'Sony VAIO'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">700</span>),
	(<span class="hljs-string">'Dell Vostro'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">800</span>),
	(<span class="hljs-string">'iPad'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">700</span>),
	(<span class="hljs-string">'Kindle Fire'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">150</span>),
	(<span class="hljs-string">'Samsung Galaxy Tab'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">200</span>);</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="480" height="313" src="../wp-content/uploads/2019/05/products-table-sample-data.png" alt="" class="wp-image-4170"></noscript><img width="480" height="313" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20480%20313%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2019/05/products-table-sample-data.png" alt="" class="lazyload wp-image-4170"></figure><figure class="wp-block-image"><noscript><img width="272" height="109" src="../wp-content/uploads/2019/05/product_groups-table-data.png" alt="" class="wp-image-4199"></noscript><img width="272" height="109" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20272%20109%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2019/05/product_groups-table-data.png" alt="" class="lazyload wp-image-4199"></figure><h2>Introduction to PostgreSQL window functions</h2><p>The easiest way to understand the window functions is to start by reviewing the <a href="../postgresql-aggregate-functions/index.htm">aggregate functions</a>. An aggregate function aggregates data from a set of rows into a single row.</p><p>The following example uses the <code><a href="../postgresql-aggregate-functions/postgresql-avg-function/index.htm">AVG()</a></code> aggregate function to calculate the average price of all products in the <code>products</code>&nbsp;table.</p><pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	<span class="hljs-keyword">AVG</span> (price)
<span class="hljs-keyword">FROM</span>
	products;
</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="137" height="34" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-AVG-function.png" alt="PostgreSQL Window Function - AVG function" class="wp-image-3660"></noscript><img width="137" height="34" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20137%2034%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-AVG-function.png" alt="PostgreSQL Window Function - AVG function" class="lazyload wp-image-3660"></figure><p>To apply the aggregate function to subsets of rows, you use the <code><a href="../postgresql-tutorial/postgresql-group-by/index.htm">GROUP BY</a></code> clause. The following example returns the average price for every product group.</p><pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	group_name,
	<span class="hljs-keyword">AVG</span> (price)
<span class="hljs-keyword">FROM</span>
	products
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>)
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
	group_name;</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="224" height="67" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-AVG-function-with-GROUP-BY.png" alt="PostgreSQL Window Function - AVG function with GROUP BY" class="wp-image-3659"></noscript><img width="224" height="67" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20224%2067%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-AVG-function-with-GROUP-BY.png" alt="PostgreSQL Window Function - AVG function with GROUP BY" class="lazyload wp-image-3659"></figure><p>As you see clearly from the output, the <code><a href="../postgresql-aggregate-functions/postgresql-avg-function/index.htm">AVG()</a></code> function reduces the number of rows returned by the queries in both examples.</p><p>Similar to an aggregate function, a window function operates on a set of rows. However, it does not reduce the number of rows returned by the query.</p><p>The term <em>window</em> describes the set of rows on which the window function operates. A window function returns values from the rows in a window.</p><p>For instance, the following query returns the product name, the price, product group name, along with the average prices of each product group.</p><pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	product_name,
	price,
	group_name,
	<span class="hljs-keyword">AVG</span> (price) <span class="hljs-keyword">OVER</span> (
	   <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
	)
<span class="hljs-keyword">FROM</span>
	products
	<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> 
		product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>);</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="412" height="217" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-AVG-window-function.png" alt="" class="wp-image-3661"></noscript><img width="412" height="217" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20412%20217%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-AVG-window-function.png" alt="" class="lazyload wp-image-3661"></figure><p>In this query, the <code>AVG()</code> function works as a <em>window function</em> that operates on a set of rows specified by the <code>OVER</code> clause. Each set of rows is called a window.</p><p>The new syntax for this query is the <code>OVER</code> clause:</p><pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql">AVG(price) OVER (PARTITION BY group_name)</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><p>In this syntax, the <code>PARTITION BY</code> distributes the rows of the result set into groups and the <code>AVG()</code> function is applied to each group to return the average price for each.</p><p>Note that a window function always performs the calculation on the result set after the <code><a href="../postgresql-tutorial/postgresql-joins/index.htm">JOIN</a></code>, <code><a href="../postgresql-tutorial/postgresql-where/index.htm">WHERE</a></code>, <code><a href="../postgresql-tutorial/postgresql-group-by/index.htm">GROUP BY</a></code> and <code><a href="../postgresql-tutorial/postgresql-having/index.htm">HAVING</a></code> clause and before the final <code><a href="../postgresql-tutorial/postgresql-order-by/index.htm">ORDER BY</a></code> clause in the evaluation order.</p><h2>PostgreSQL Window Function Syntax</h2><p>PostgreSQL has a sophisticated <a href="https://www.postgresql.org/docs/current/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS">syntax for window function call</a>. The following illustrates the simplified version:</p><pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql">window_function(arg1, arg2,..) OVER (
   [PARTITION BY partition_expression]
   [ORDER BY sort_expression [ASC | DESC] [NULLS {FIRST | LAST }])  </code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><p>In this syntax:</p><h3><code>window_function(arg1,arg2,...)</code></h3><p>The <code>window_function</code> is the name of the window function. Some window functions do not accept any argument.</p><h3><code>PARTITION BY</code> clause</h3><p>The <code>PARTITION BY</code> clause divides rows into multiple groups or partitions to which the window function is applied. Like the example above, we used the product group to divide the products into groups (or partitions).</p><p>The <code>PARTITION BY</code> clause is optional. If you skip the <code>PARTITION BY</code> clause, the window function will treat the whole result set as a single partition.</p><h3><code>ORDER BY</code> clause</h3><p>The <code>ORDER BY</code> clause specifies the order of rows in each partition to which the window function is applied.</p><p>The <code>ORDER BY</code> clause uses the <code>NULLS FIRST</code> or <code>NULLS LAST</code> option to specify whether nullable values should be first or last in the result set. The default is <code>NULLS LAST</code> option.</p><h3>&nbsp;<code>frame_clause</code></h3><p>The <code>frame_clause</code> defines a subset of rows in the current partition to which the window function is applied. This subset of rows is called a frame.</p><p>If you use multiple window functions in a query:</p><pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
    wf1() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> c1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c2),
    wf2() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> c1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c2)
<span class="hljs-keyword">FROM</span> table_name;</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><p>you can use the <code>WINDOW</code> clause to shorten the query as shown in the following query:</p><pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> 
   wf1() <span class="hljs-keyword">OVER</span> w,
   wf2() <span class="hljs-keyword">OVER</span> w,
<span class="hljs-keyword">FROM</span> table_name
<span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> c1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c2);</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><p>It is also possible to use the <code>WINDOW</code> clause even though you call one window function in a query:</p><pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> wf1() <span class="hljs-keyword">OVER</span> w
<span class="hljs-keyword">FROM</span> table_name 
<span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> c1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c2);</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><h2>PostgreSQL window function List</h2><p>The following table lists all window functions provided by PostgreSQL. Note that some aggregate functions such as <code>AVG()</code>, <code>MIN()</code>, <code>MAX()</code>, <code>SUM()</code>, and <code>COUNT()</code> can be also used as window functions.</p><h2><input id="search" class="light-table-filter" type="text" placeholder="Type a window function name to search..." data-table="functions"></h2><figure class="wp-block-table responsive functions"><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="postgresql-cume_dist-function/index.htm">CUME_DIST</a></td><td>Return the relative rank of the current row.</td></tr><tr><td><a href="postgresql-dense_rank-function/index.htm">DENSE_RANK</a></td><td>Rank the current row within its partition without gaps.</td></tr><tr><td><a href="postgresql-first_value-function/index.htm">FIRST_VALUE</a></td><td>Return a value evaluated against the first row within its partition.</td></tr><tr><td><a href="postgresql-lag-function/index.htm">LAG</a></td><td>Return a value evaluated at the row that is at a specified physical offset row before the current row within the partition.</td></tr><tr><td><a href="postgresql-last_value-function/index.htm">LAST_VALUE</a></td><td>Return a value evaluated against the last row within its partition.</td></tr><tr><td><a href="postgresql-lead-function/index.htm">LEAD</a></td><td>Return a value evaluated at the row that is <tt class="REPLACEABLE c4">offset </tt>rows after the current row within the partition.</td></tr><tr><td><a href="postgresql-ntile-function/index.htm">NTILE</a></td><td>Divide rows in a partition as equally as possible and assign each row an integer starting from 1 to the argument value.</td></tr><tr><td><a href="postgresql-nth_value-function/index.htm">NTH_VALUE</a></td><td>Return a value evaluated against the nth row in an ordered partition.</td></tr><tr><td><a href="postgresql-percent_rank-function/index.htm">PERCENT_RANK</a></td><td>Return the relative rank of the current row (rank-1) / (total rows &#8211; 1)</td></tr><tr><td><a href="postgresql-rank-function/index.htm">RANK</a></td><td>Rank the current row within its partition with gaps.</td></tr><tr><td><a href="postgresql-row_number/index.htm">ROW_NUMBER</a></td><td>Number the current row within its partition starting from 1.</td></tr></tbody></table></figure><h2>The <code>ROW_NUMBER()</code>, <code>RANK()</code>, and <code>DENSE_RANK()</code> functions</h2><p>The <code><a href="postgresql-row_number/index.htm">ROW_NUMBER()</a></code>, <code><a href="postgresql-rank-function/index.htm">RANK()</a></code>, and <code><a href="postgresql-dense_rank-function/index.htm">DENSE_RANK()</a></code> functions assign an integer to each row based on its order in its result set.</p><p>The <code>ROW_NUMBER()</code> function assigns a sequential number to each row in each partition. See the following query:</p><pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	product_name,
	group_name,
	price,
	ROW_NUMBER () <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price
	)
<span class="hljs-keyword">FROM</span>
	products
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>);</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="376" height="214" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-ROW_NUMBER-function.png" alt="PostgreSQL Window Function - ROW_NUMBER function" class="wp-image-3658"></noscript><img width="376" height="214" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20376%20214%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-ROW_NUMBER-function.png" alt="PostgreSQL Window Function - ROW_NUMBER function" class="lazyload wp-image-3658"></figure><p>The <code><a href="postgresql-rank-function/index.htm">RANK()</a></code> function assigns ranking within an ordered partition. If rows have the same values, the&nbsp; <code>RANK()</code> function assigns the same rank, with the next ranking(s) skipped.</p><p>See the following query:</p><pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	product_name,
	group_name,
  price,
	<span class="hljs-keyword">RANK</span> () <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price
	)
<span class="hljs-keyword">FROM</span>
	products
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>);</code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="344" height="217" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-RANK-function.png" alt="PostgreSQL Window Function - RANK function" class="wp-image-3657"></noscript><img width="344" height="217" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20344%20217%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-RANK-function.png" alt="PostgreSQL Window Function - RANK function" class="lazyload wp-image-3657"></figure><p>In the laptop product group, both <code>Dell Vostro</code> and <code>Sony VAIO</code> products have the same price, therefore, they receive the same rank 1. The next row in the group is <code>HP Elite</code>&nbsp;that receives the rank 3 because the rank 2 is skipped.</p><p>Similar to the <code>RANK()</code> function, the <code><a href="postgresql-dense_rank-function/index.htm">DENSE_RANK()</a></code> function assigns a rank to each row within an ordered partition, but the ranks have no gap. In other words, the same ranks are assigned to multiple rows and no ranks are skipped.</p><pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	product_name,
	group_name,
	price,
	<span class="hljs-keyword">DENSE_RANK</span> () <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price
	)
<span class="hljs-keyword">FROM</span>
	products
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>);</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="374" height="215" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-DENSE_RANK-function.png" alt="PostgreSQL Window Function - DENSE_RANK function" class="wp-image-3652"></noscript><img width="374" height="215" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20374%20215%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-DENSE_RANK-function.png" alt="PostgreSQL Window Function - DENSE_RANK function" class="lazyload wp-image-3652"></figure><p>Within the laptop product group, rank 1 is assigned twice to <code>Dell Vostro</code> and <code>Sony VAIO</code>. The next rank is 2 assigned to <code>HP Elite</code>.</p><h2>The <code>FIRST_VALUE</code> and <code>LAST_VALUE</code> functions</h2><p>The <code><a href="postgresql-first_value-function/index.htm">FIRST_VALUE()</a></code> function returns a value evaluated against the first row within its partition, whereas the <code><a href="postgresql-last_value-function/index.htm">LAST_VALUE()</a></code> function returns a value evaluated against the last row in its partition.</p><p>The following statement uses the <code>FIRST_VALUE()</code> to return the lowest price for every product group.</p><pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	product_name,
	group_name,
	price,
	<span class="hljs-keyword">FIRST_VALUE</span> (price) <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price
	) <span class="hljs-keyword">AS</span> lowest_price_per_group
<span class="hljs-keyword">FROM</span>
	products
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>);</code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="428" height="217" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-FIRST_VALUE-function.png" alt="PostgreSQL Window Function - FIRST_VALUE function" class="wp-image-3653"></noscript><img width="428" height="217" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20428%20217%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-FIRST_VALUE-function.png" alt="PostgreSQL Window Function - FIRST_VALUE function" class="lazyload wp-image-3653"></figure><p>The following statement uses the <code>LAST_VALUE()</code> function to return the highest price for every product group.</p><pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	product_name,
	group_name,
	price,
	<span class="hljs-keyword">LAST_VALUE</span> (price) <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price <span class="hljs-keyword">RANGE</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">PRECEDING</span>
		<span class="hljs-keyword">AND</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">FOLLOWING</span>
	) <span class="hljs-keyword">AS</span> highest_price_per_group
<span class="hljs-keyword">FROM</span>
	products
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>);</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="441" height="212" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-LAST_VALUE-function.png" alt="PostgreSQL Window Function - LAST_VALUE function" class="wp-image-3655"></noscript><img width="441" height="212" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20441%20212%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-LAST_VALUE-function.png" alt="PostgreSQL Window Function - LAST_VALUE function" class="lazyload wp-image-3655"></figure><p>Notice that we added the frame clause <code>RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</code> because by default the frame clause is <code>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>.</p><h2>The <code>LAG</code> and <code>LEAD</code> functions</h2><p>The <code><a href="postgresql-lag-function/index.htm">LAG()</a></code> function has the&nbsp;ability to access data from the previous row, while the <code><a href="postgresql-lead-function/index.htm">LEAD()</a></code> function can access data from the next row.</p><p>Both <code><a href="postgresql-lag-function/index.htm">LAG()</a></code> and <code><a href="postgresql-lead-function/index.htm">LEAD()</a></code> functions have the same syntax as follows:</p><pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql">LAG  (expression [,offset] [,default]) over_clause;
LEAD (expression [,offset] [,default]) over_clause;</code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><p>In this syntax:</p><ul><li>&nbsp;<code>expression</code> &#8211; a column or expression to compute the returned&nbsp;value.</li><li>&nbsp;<code>offset</code> &#8211; the number of rows preceding ( <code>LAG</code>)/ following ( <code>LEAD</code>) the current row. It defaults to&nbsp;1.</li><li>&nbsp;<code>default</code> &#8211; the default returned value if the <code>offset</code> goes beyond the scope of the window. The <code>default</code> is <code>NULL</code> if you skip it.</li></ul><p>The following statement uses the <code>LAG()</code> function to return the prices from the previous row and calculates the difference between the price of the current row&nbsp;and the previous row.</p><pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	product_name,
	group_name,
	price,
	LAG (price, <span class="hljs-number">1</span>) <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price
	) <span class="hljs-keyword">AS</span> prev_price,
	price - LAG (price, <span class="hljs-number">1</span>) <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price
	) <span class="hljs-keyword">AS</span> cur_prev_diff
<span class="hljs-keyword">FROM</span>
	products
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>);</code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="469" height="215" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-LAG-function.png" alt="PostgreSQL Window Function - LAG function" class="wp-image-3654"></noscript><img width="469" height="215" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20469%20215%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-LAG-function.png" alt="PostgreSQL Window Function - LAG function" class="lazyload wp-image-3654"></figure><p>The following statement uses the <code>LEAD()</code> function to return the prices from the next row and calculates the difference between the price of the current row&nbsp;and the next row.</p><pre class="wp-block-code" aria-describedby="shcb-language-18" data-shcb-language-name="SQL (Structured Query Language)" data-shcb-language-slug="sql"><div><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span>
	product_name,
	group_name,
	price,
	<span class="hljs-keyword">LEAD</span> (price, <span class="hljs-number">1</span>) <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price
	) <span class="hljs-keyword">AS</span> next_price,
	price - <span class="hljs-keyword">LEAD</span> (price, <span class="hljs-number">1</span>) <span class="hljs-keyword">OVER</span> (
		<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> group_name
		<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
			price
	) <span class="hljs-keyword">AS</span> cur_next_diff
<span class="hljs-keyword">FROM</span>
	products
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> product_groups <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">group_id</span>);</code></div><small class="shcb-language" id="shcb-language-18"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">SQL (Structured Query Language)</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">sql</span><span class="shcb-language__paren">)</span></small></pre><figure class="wp-block-image"><noscript><img width="465" height="217" src="../wp-content/uploads/2018/12/PostgreSQL-Window-Function-LEAD-function.png" alt="PostgreSQL Window Function - LEAD function" class="wp-image-3656"></noscript><img width="465" height="217" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20465%20217%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/uploads/2018/12/PostgreSQL-Window-Function-LEAD-function.png" alt="PostgreSQL Window Function - LEAD function" class="lazyload wp-image-3656"></figure><p>In this tutorial, we have introduced you to the PostgreSQL window functions and shown you some examples of using them to query data.</p><div class="ad ad-336"><div id="Ad.Plus-336x280-2"><script>window.googletag = window.googletag || {cmd: []}; googletag.cmd.push(function() {
    googletag.defineSlot('/21849154601,22306944310/Ad.Plus-336x280', [[336, 280], [200, 200], [320, 100], [240, 133], [300, 100], [120, 240], [180, 150], [320, 250], [250, 250], [300, 250], [300, 75]], 'Ad.Plus-336x280-2').addService(googletag.pubads())
    .setTargeting('site', ['postgresqltutorial.com']);
    googletag.enableServices(); googletag.display('Ad.Plus-336x280-2'); });</script></div></div></div></article><div class="page-nav"><div class="prev-page"> <a class="prev-page-anchor" href="../postgresql-math-functions/postgresql-trunc/index.htm" title="PostgreSQL TRUNC Function"><div class="page-nav-arrow"> <noscript><img src="../wp-content/themes/evolution/img/left.svg" height="32" width="32" class="icon-prev-page" alt="PostgreSQL TRUNC Function"></noscript><img src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2032%2032%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/themes/evolution/img/left.svg" height="32" width="32" class="lazyload icon-prev-page" alt="PostgreSQL TRUNC Function"></div><div class="page-nav-main page-nav-first"><div class="page-nav-title">Previously</div><div class="page-title">PostgreSQL TRUNC Function</div></div> </a></div><div class="next-page"><link rel="prerender" href="postgresql-cume_dist-function/index.htm"> <a href="postgresql-cume_dist-function/index.htm" title="PostgreSQL CUME_DIST Function" class="next-page-anchor"><div class="page-nav-main page-nav-second"><div class="page-nav-title">Up Next</div><div class="page-title">PostgreSQL CUME_DIST Function</div></div><div class="page-nav-arrow"> <noscript><img src="../wp-content/themes/evolution/img/right.svg" height="32" width="32" class="icon-next-page" alt="PostgreSQL CUME_DIST Function"></noscript><img src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2032%2032%22%3E%3C/svg%3E' data-src="https://www.postgresqltutorial.com/wp-content/themes/evolution/img/right.svg" height="32" width="32" class="lazyload icon-next-page" alt="PostgreSQL CUME_DIST Function"></div> </a></div></div></main><aside id="secondary" class="widget-area"><section id="textblockswidget-57" class="widget widget_textblockswidget"><div class="text-block carbon-ads"><div id="carbon-block" style="margin-bottom:2rem"></div><p><script>try {
  fetch(new Request("https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js", { method: 'HEAD', mode: 'no-cors' })).then(function(response) {
    return true;
  }).catch(function(e) {
    var carbonScript = document.createElement("script");
    carbonScript.src = "//cdn.carbonads.com/carbon.js?serve=CE7D653M&placement=wwwpostgresqltutorialcom";
    carbonScript.id = "_carbonads_js";
    document.getElementById("carbon-block").appendChild(carbonScript);
  });
} catch (error) {
  console.log(error);
}</script></p></div></section><section id="search-23" class="widget widget_search"><form role="search" method="get" class="search-form" action="https://www.postgresqltutorial.com/"> <label> <span class="screen-reader-text">Search for:</span> <input type="search" class="search-field" placeholder="Search &hellip;" value="" name="s"> </label> <input type="submit" class="search-submit" value="Search"></form></section><section id="nav_menu-54" class="widget widget_nav_menu"><h2 class="widget-title">PostgreSQL Window Functions</h2><div class="menu-window-functions-container"><ul id="menu-window-functions" class="menu"><li id="menu-item-6025" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6025"><a title="PostgreSQL CUME_DIST Function" href="postgresql-cume_dist-function/index.htm">CUME_DIST</a></li><li id="menu-item-6026" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6026"><a href="postgresql-dense_rank-function/index.htm">DENSE_RANK</a></li><li id="menu-item-6027" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6027"><a href="postgresql-first_value-function/index.htm">FIRST_VALUE</a></li><li id="menu-item-6028" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6028"><a title="PostgreSQL LAG Function" href="postgresql-lag-function/index.htm">LAG</a></li><li id="menu-item-6029" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6029"><a title="PostgreSQL LAST_VALUE Function" href="postgresql-last_value-function/index.htm">LAST_VALUE</a></li><li id="menu-item-6030" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6030"><a title="PostgreSQL LEAD Function" href="postgresql-lead-function/index.htm">LEAD</a></li><li id="menu-item-6031" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6031"><a title="PostgreSQL NTILE Function" href="postgresql-ntile-function/index.htm">NTILE</a></li><li id="menu-item-6032" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6032"><a title="PostgreSQL NTH_VALUE Function" href="postgresql-nth_value-function/index.htm">NTH_VALUE</a></li><li id="menu-item-6023" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6023"><a title="PostgreSQL PERCENT_RANK Function" href="postgresql-percent_rank-function/index.htm">PERCENT_RANK</a></li><li id="menu-item-6034" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6034"><a title="PostgreSQL RANK Function" href="postgresql-rank-function/index.htm">RANK</a></li><li id="menu-item-6035" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6035"><a title="PostgreSQL ROW_NUMBER Function" href="postgresql-row_number/index.htm">ROW_NUMBER</a></li></ul></div></section><section id="textblockswidget-58" class="widget widget_textblockswidget"><div class="text-block sidebar-bottom"><div class="ad ad-300"><div class="increaserev bidmcm300x250"></div></div></div></section></aside></div><footer id="colophon" class="site-footer"><div class="wrap"><div class="site-footer-widgets"><div class="site-footer-sidebar widget"><h2 class="widget-title">About PostgreSQLTutorial.com</h2><div class="textwidget custom-html-widget">PostgreSQLTutorial.com provides you with useful PostgreSQL tutorials to help you up-to-date with the latest PostgreSQL features and technologies. All PostgreSQL tutorials are simple, easy-to-follow and practical.</div></div><div class="site-footer-sidebar widget"><h2 class="widget-title">Latest Tutorials</h2><ul><li><a href="../postgresql-plpgsql/postgresql-exception/index.htm" title="PostgreSQL Exception">PostgreSQL Exception</a></li><li><a href="../postgresql-plpgsql/pl-pgsql-continue/index.htm" title="PL/pgSQL Continue">PL/pgSQL Continue</a></li><li><a href="../postgresql-plpgsql/plpgsql-exit/index.htm" title="PL/pgSQL Exit Statement">PL/pgSQL Exit Statement</a></li><li><a href="../postgresql-python/postgresql-python-call-postgresql-functions/index.htm" title="PostgreSQL Python: Call PostgreSQL Functions">PostgreSQL Python: Call PostgreSQL Functions</a></li><li><a href="../postgresql-views/postgresql-drop-view/index.htm" title="PostgreSQL Drop View">PostgreSQL Drop View</a></li></ul></div><div class="site-footer-sidebar widget"><h2 class="widget-title">Site Info</h2><div class="menu-site-links-container"><ul id="menu-site-links" class="menu"><li id="menu-item-6078" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6078"><a title="Please Donate Now to PostgreSQL Tutorial" href="../donation/index.htm">Donation ❤️</a></li><li id="menu-item-538" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-538"><a title="PostgreSQL Tutorial Home" href="../index.htm">Home</a></li><li id="menu-item-4039" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4039"><a title="PostgreSQL Cheat Sheet" href="../postgresql-cheat-sheet/index.htm">PostgreSQL Cheat Sheet</a></li><li id="menu-item-4038" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4038"><a title="PostgreSQL Resources" href="../postgresql-resources/index.htm">Resources</a></li><li id="menu-item-27" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-27"><a title="About Us" href="../about-us/index.htm">About Us</a></li><li id="menu-item-26" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-26"><a title="Contact Us" href="../contact-us/index.htm">Contact Us</a></li><li id="menu-item-25" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-25"><a title="Privacy Policy" href="../privacy-policy/index.htm">Privacy Policy</a></li></ul></div></div></div><div class="site-info"><div class="textwidget custom-html-widget"><p>Copyright &copy; 2022 by <a href="../index.htm" title="PostgreSQL Tutorial">PostgreSQL Tutorial</a> Website. All Rights Reserved.</p></div></div></div></footer></div> <noscript><style>.lazyload{display:none;}</style></noscript><script data-noptimize="1">window.lazySizesConfig=window.lazySizesConfig||{};window.lazySizesConfig.loadMode=1;</script><script async="" data-noptimize="1" src='../wp-content/plugins/autoptimize/classes/external/js/lazysizes.min.js'></script> <script id='adblock-lib-js-extra'>var adsOptions = [{"selector":".whitelist","code":"<div class=\"donation\">\r\n<div class=\"donation-text\">If this PostgreSQL Tutorial saves you hours of work, please <span class=\"highlight\">whitelist it in your ad blocker <\/span> \ud83d\ude2d and <\/div>\r\n<div> <a target=\"_blank\"  class=\"donate-button\"\r\nhref=\"https:\/\/www.postgresqltutorial.com\/donation\/\">Donate Now<\/a><\/div>\r\n<div class=\"donation-text\">to help us \u2764\ufe0f pay for the web hosting fee and CDN to keep the website running.<\/div>\r\n<\/a>"}];</script> <script id='wth-frontend-js-extra'>var wth_js_lang = {"ajax_url":"https:\/\/www.postgresqltutorial.com\/wp-admin\/admin-ajax.php","nonce":"bb9c5d79d1","confirm":"Are you sure to delete item?","positive_feedback":null,"positive_feedback_option":"feedback_messege","positive_feedback_required":null,"negative_feedback":"true","negative_feedback_required":"true","wth_title_nothank":"What was wrong? Please help us improve","wth_title_yesthank":"Well Done! Please leave your positive feedback.","wth_thank_you":"Thank You for your feedback!","submit_text":"Submit","wth_ga_enable":"","wth_ga_category":"Was This Helpful?","wth_ga_positive":"Positive Reviews","wth_ga_negative":"Negative Reviews","wth_share_ask":"Awesome, share it:","wth_fb_share":"Share","wth_twitter_share":"Tweet"};</script> <script defer="" src="../wp-content/cache/autoptimize/js/autoptimize_67d6fcb8b1cc1de1d65738b3a9673acf.js"></script></body></html>