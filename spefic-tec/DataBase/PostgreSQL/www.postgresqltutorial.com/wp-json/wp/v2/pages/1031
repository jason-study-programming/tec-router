{"id":1031,"date":"2015-05-26T02:31:09","date_gmt":"2015-05-26T09:31:09","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1031"},"modified":"2021-03-13T18:20:28","modified_gmt":"2021-03-14T01:20:28","slug":"postgresql-materialized-views","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-views\/postgresql-materialized-views\/","title":{"rendered":"PostgreSQL Materialized Views"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: this tutorial introduces you to PostgreSQL materialized views that allow you to store the result of a query physically and update the data periodically.<\/p>\n\n\n\n<p>In <a href=\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/\">PostgreSQL view tutorial<\/a>, you have learned that views are virtual tables that represent data of the underlying tables. Simple views can be also updatable. <\/p>\n\n\n\n<p>PostgreSQL extends the view concept to the next level that allows views to store data physically. And these views are called materialized views. <\/p>\n\n\n\n<p>Materialized views cache the result of a complex and expensive query and allow you to refresh this result periodically.<\/p>\n\n\n\n<p>The materialized views are useful in many cases that require fast data access therefore they are often used in data warehouses and business intelligence applications.<\/p>\n\n\n\n<h2>Creating materialized views<\/h2>\n\n\n\n<p>To create a materialized view, you use the <code>CREATE MATERIALIZED VIEW<\/code> statement as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">MATERIALIZED<\/span> <span class=\"hljs-keyword\">VIEW<\/span> view_name\n<span class=\"hljs-keyword\">AS<\/span>\n<span class=\"hljs-keyword\">query<\/span>\n<span class=\"hljs-keyword\">WITH<\/span> [<span class=\"hljs-keyword\">NO<\/span>] <span class=\"hljs-keyword\">DATA<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, specify the <code>view_name<\/code> after the <code>CREATE MATERIALIZED VIEW<\/code> clause<\/li><li>Second, add the query that gets data from the underlying tables after the <code>AS<\/code> keyword.<\/li><li>Third, if you want to load data into the materialized view at the creation time, use the <code>WITH DATA<\/code> option; otherwise, you use  <code>WITH NO DATA<\/code>. In case you use <code>WITH NO DATA<\/code>, the view is flagged as unreadable. It means that you cannot query data from the view until you load data into it.<\/li><\/ul>\n\n\n\n<h2>Refreshing data for materialized views<\/h2>\n\n\n\n<p>To load data into a materialized view, you use the \u00a0<code>REFRESH MATERIALIZED VIEW<\/code> statement as shown below:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">REFRESH MATERIALIZED VIEW view_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you refresh data for a materialized view, PostgreSQL locks the entire table therefore you cannot query data against it. To avoid this, you can use the <code>CONCURRENTLY<\/code> option.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">REFRESH MATERIALIZED VIEW CONCURRENTLY view_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>With <code>CONCURRENTLY<\/code> option, PostgreSQL creates a temporary updated version of the materialized view, compares two versions, and performs <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">INSERT<\/a> and <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\">UPDATE<\/a> only the differences. <\/p>\n\n\n\n<p>You can query against a materialized view while it is being updated. One requirement for using <code>CONCURRENTLY<\/code> option is that the materialized view must have a <code>UNIQUE<\/code> index. <\/p>\n\n\n\n<p class=\"note\">Notice that <code>CONCURRENTLY<\/code> option is only available from PostgreSQL 9.4.<\/p>\n\n\n\n<h2>Removing materialized views<\/h2>\n\n\n\n<p>Removing a materialized view is pretty straightforward as we have done for tables or views. This is done using the following statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP<\/span> <span class=\"hljs-keyword\">MATERIALIZED<\/span> <span class=\"hljs-keyword\">VIEW<\/span> view_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>PostgreSQL materialized views example<\/h2>\n\n\n\n<p>The following statement creates a materialized view named <code>rental_by_category<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">CREATE MATERIALIZED VIEW rental_by_category\n<span class=\"hljs-keyword\">AS<\/span>\n SELECT c.name <span class=\"hljs-keyword\">AS<\/span> category,\n    sum(p.amount) <span class=\"hljs-keyword\">AS<\/span> total_sales\n   FROM (((((payment p\n     JOIN rental r ON ((p.rental_id = r.rental_id)))\n     JOIN inventory i ON ((r.inventory_id = i.inventory_id)))\n     JOIN film f ON ((i.film_id = f.film_id)))\n     JOIN film_category fc ON ((f.film_id = fc.film_id)))\n     JOIN category c ON ((fc.category_id = c.category_id)))\n  GROUP BY c.name\n  ORDER BY sum(p.amount) DESC\nWITH NO DATA;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because of the <code>WITH NO DATA<\/code> option, you cannot query data from the view. If you try to do so, you&#8217;ll get an error message as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t*\n<span class=\"hljs-keyword\">FROM<\/span>\n\trental_by_category;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">[Err] ERROR: materialized view \"rental_by_category\" has not been populated\nHINT: <span class=\"hljs-keyword\">Use<\/span> the <span class=\"hljs-keyword\">REFRESH<\/span> <span class=\"hljs-keyword\">MATERIALIZED<\/span> <span class=\"hljs-keyword\">VIEW<\/span> command.<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL is helpful to give you a hint to ask for loading data into the view. Let&#8217;s do it by executing the following statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">REFRESH MATERIALIZED VIEW rental_by_category;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, if you query data again, you will get the result as expected.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"200\" height=\"237\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-materialized-views-example.jpg\" alt=\"postgresql materialized views example\" class=\"wp-image-1038\"\/><\/figure>\n\n\n\n<p>From now on, you can refresh the data in the <code>rental_by_category<\/code> view using the <code>REFRESH MATERIALIZED VIEW<\/code> statement. <\/p>\n\n\n\n<p>However, to refresh it with <code>CONCURRENTLY<\/code> option, you need to create a <code>UNIQUE<\/code> index for the view first.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">UNIQUE<\/span> <span class=\"hljs-keyword\">INDEX<\/span> rental_category <span class=\"hljs-keyword\">ON<\/span> rental_by_category (<span class=\"hljs-keyword\">category<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Let&#8217;s refresh data concurrently for the <code>rental_by_category<\/code> view.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">REFRESH MATERIALIZED VIEW CONCURRENTLY rental_by_category;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned how to work with PostgreSQL materialized views, which come in handy for analytical applications that require quick data retrieval.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1031\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-views\/postgresql-materialized-views\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Materialized Views\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1031\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-views\/postgresql-materialized-views\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Materialized Views\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: this tutorial introduces you to PostgreSQL materialized views that allow you to store the result of a query physically and update the data periodically. In PostgreSQL view tutorial, you have learned that views are virtual tables that represent data of the underlying tables. Simple views can be also updatable. PostgreSQL extends the view concept [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1041,"menu_order":3,"comment_status":"open","ping_status":"open","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL Materialized Views<\/title>\n<meta name=\"description\" content=\"This tutorial introduces you to PostgreSQL materialized views that allow you to store result of a query physically and update the data periodically.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-materialized-views-example.jpg\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-materialized-views-example.jpg\",\"width\":200,\"height\":237,\"caption\":\"postgresql materialized views example\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/\",\"name\":\"PostgreSQL Materialized Views\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#primaryimage\"},\"datePublished\":\"2015-05-26T09:31:09+00:00\",\"dateModified\":\"2021-03-14T01:20:28+00:00\",\"description\":\"This tutorial introduces you to PostgreSQL materialized views that allow you to store result of a query physically and update the data periodically.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Views\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-views\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL Materialized Views\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL Materialized Views","description":"This tutorial introduces you to PostgreSQL materialized views that allow you to store result of a query physically and update the data periodically.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-materialized-views-example.jpg","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-materialized-views-example.jpg","width":200,"height":237,"caption":"postgresql materialized views example"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/","name":"PostgreSQL Materialized Views","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#primaryimage"},"datePublished":"2015-05-26T09:31:09+00:00","dateModified":"2021-03-14T01:20:28+00:00","description":"This tutorial introduces you to PostgreSQL materialized views that allow you to store result of a query physically and update the data periodically.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Views","item":"https:\/\/www.postgresqltutorial.com\/postgresql-views\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL Materialized Views"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1031"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1031"}],"version-history":[{"count":2,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1031\/revisions"}],"predecessor-version":[{"id":5970,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1031\/revisions\/5970"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1041"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1031"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}