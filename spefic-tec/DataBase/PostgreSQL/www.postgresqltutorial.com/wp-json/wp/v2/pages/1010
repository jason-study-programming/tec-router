{"id":1010,"date":"2015-05-25T01:03:09","date_gmt":"2015-05-25T08:03:09","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1010"},"modified":"2020-04-11T05:15:31","modified_gmt":"2020-04-11T12:15:31","slug":"managing-postgresql-views","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-views\/managing-postgresql-views\/","title":{"rendered":"Managing PostgreSQL Views"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about views and how to manage views in PostgreSQL.<\/p>\n\n\n\n<p>A view is a database object that is&nbsp;of a stored query. A view can be accessed as a virtual table in PostgreSQL. In other words, a PostgreSQL view is a logical table that represents data of one or more underlying tables through a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT statement<\/a>. Notice that a view does not store data physically except for a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-materialized-views\/\">materialized view<\/a>.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"564\" height=\"352\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-view.jpg\" alt=\"postgresql view\" class=\"wp-image-1746\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-view.jpg 564w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-view-300x187.jpg 300w\" sizes=\"(max-width: 564px) 100vw, 564px\" \/><\/figure><\/div>\n\n\n\n<p>A view can be very&nbsp;useful in some cases such as:<\/p>\n\n\n\n<ul><li>A view helps simplify the complexity of a query because&nbsp;you can query a view, which is based on&nbsp;a complex query, using a simple <code>SELECT<\/code> statement.<\/li><li>Like a table, you can <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-roles\/\">grant permission<\/a> to users through a view that contains specific data that the users are authorized to see.<\/li><li>A view provides a consistent layer even the columns of underlying table changes.<\/li><\/ul>\n\n\n\n<h2>Creating PostgreSQL Views<\/h2>\n\n\n\n<p>To create a view, we use &nbsp;<code>CREATE VIEW<\/code> statement. The simplest syntax of the <code>CREATE VIEW<\/code> statement is as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">VIEW<\/span> view_name <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-keyword\">query<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>First, you specify the name of the view after the <code>CREATE VIEW<\/code> clause, then you put a query after the <code>AS<\/code> keyword. A query can be a simple <code>SELECT<\/code> statement or a complex <code>SELECT<\/code> statement with joins.<\/p>\n\n\n\n<h3>PostgreSQL CREATE VIEW example<\/h3>\n\n\n\n<p>For example, in our <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">sample database<\/a>, we have four tables:<\/p>\n\n\n\n<ol><li>&nbsp;<code>customer<\/code> &#8211; stores all customer data<\/li><li>&nbsp;<code>address<\/code> &#8211; stores address of customers<\/li><li>&nbsp;<code>city<\/code> &#8211; stores city data<\/li><li>&nbsp;<code>country<\/code>&#8211; stores country data<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"622\" height=\"198\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-view-table.jpg\" alt=\"posgresql view - tables\" class=\"wp-image-1012\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-view-table.jpg 622w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-view-table-300x95.jpg 300w\" sizes=\"(max-width: 622px) 100vw, 622px\" \/><\/figure>\n\n\n\n<p>If you want to get a complete customers data, you normally construct a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-inner-join\/\">join statement<\/a> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"> <span class=\"hljs-keyword\">SELECT<\/span> cu.customer_id <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-keyword\">id<\/span>,\n    cu.first_name || <span class=\"hljs-string\">' '<\/span> || cu.last_name <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-keyword\">name<\/span>,\n    a.address,\n    a.postal_code <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-string\">\"zip code\"<\/span>,\n    a.phone,\n    city.city,\n    country.country,\n        <span class=\"hljs-keyword\">CASE<\/span>\n            <span class=\"hljs-keyword\">WHEN<\/span> cu.activebool <span class=\"hljs-keyword\">THEN<\/span> <span class=\"hljs-string\">'active'<\/span>\n            <span class=\"hljs-keyword\">ELSE<\/span> <span class=\"hljs-string\">''<\/span>\n        <span class=\"hljs-keyword\">END<\/span> <span class=\"hljs-keyword\">AS<\/span> notes,\n    cu.store_id <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-keyword\">sid<\/span>\n   <span class=\"hljs-keyword\">FROM<\/span> customer cu\n     <span class=\"hljs-keyword\">INNER<\/span> <span class=\"hljs-keyword\">JOIN<\/span> address a <span class=\"hljs-keyword\">USING<\/span> (address_id)\n     <span class=\"hljs-keyword\">INNER<\/span> <span class=\"hljs-keyword\">JOIN<\/span> city <span class=\"hljs-keyword\">USING<\/span> (city_id)\n     <span class=\"hljs-keyword\">INNER<\/span> <span class=\"hljs-keyword\">JOIN<\/span> country <span class=\"hljs-keyword\">USING<\/span> (country_id);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The result of the query is as shown in the screenshot below:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"894\" height=\"201\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-view-customers-data.jpg\" alt=\"posgresql view - customers data\" class=\"wp-image-1020\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-view-customers-data.jpg 894w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-view-customers-data-300x67.jpg 300w\" sizes=\"(max-width: 894px) 100vw, 894px\" \/><\/figure>\n\n\n\n<p>This query is quite complex. However, you can create a view named <code>customer_master<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">CREATE VIEW customer_master <span class=\"hljs-keyword\">AS<\/span>\n  SELECT cu.customer_id <span class=\"hljs-keyword\">AS<\/span> id,\n    cu.first_name || <span class=\"hljs-string\">' '<\/span> || cu.last_name <span class=\"hljs-keyword\">AS<\/span> name,\n    a.address,\n    a.postal_code <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-string\">\"zip code\"<\/span>,\n    a.phone,\n    city.city,\n    country.country,\n        <span class=\"hljs-keyword\">CASE<\/span>\n            WHEN cu.activebool THEN <span class=\"hljs-string\">'active'<\/span>\n            <span class=\"hljs-keyword\">ELSE<\/span> <span class=\"hljs-string\">''<\/span>\n        END <span class=\"hljs-keyword\">AS<\/span> notes,\n    cu.store_id <span class=\"hljs-keyword\">AS<\/span> sid\n   FROM customer cu\n     INNER JOIN address a USING (address_id)\n     INNER JOIN city USING (city_id)\n     INNER JOIN country USING (country_id);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>From now on, whenever you need to get a complete customer data, you just query it from the view by executing the following simple <code>SELECT<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t*\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer_master;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This query produces the same result as the complex one with joins above.<\/p>\n\n\n\n<h2>Changing PostgreSQL Views<\/h2>\n\n\n\n<p>To change the defining query of a view, you use the <code>CREATE VIEW<\/code> statement with <code>OR REPLACE<\/code> addition as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">OR<\/span> <span class=\"hljs-keyword\">REPLACE<\/span> view_name \n<span class=\"hljs-keyword\">AS<\/span> \n<span class=\"hljs-keyword\">query<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL does not support removing&nbsp;an existing column in the view, at least up to version 9.4. If you try to do it, you will get an error message: &#8220;[Err] ERROR:&nbsp; cannot drop columns from view&#8221;. The query must generate the same columns that were generated when the view was created. To be more specific, the new columns must have the same names, same <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-data-types\/\">data types<\/a>, and in the same order as they were created. However, PostgreSQL allows you to append additional columns at&nbsp;the end of the column list.<\/p>\n\n\n\n<p>For example, you can add an email to the <code>customer_master<\/code>&nbsp; view as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">CREATE VIEW customer_master <span class=\"hljs-keyword\">AS<\/span>\n  SELECT cu.customer_id <span class=\"hljs-keyword\">AS<\/span> id,\n    cu.first_name || <span class=\"hljs-string\">' '<\/span> || cu.last_name <span class=\"hljs-keyword\">AS<\/span> name,\n    a.address,\n    a.postal_code <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-string\">\"zip code\"<\/span>,\n    a.phone,\n    city.city,\n    country.country,\n        <span class=\"hljs-keyword\">CASE<\/span>\n            WHEN cu.activebool THEN <span class=\"hljs-string\">'active'<\/span>\n            <span class=\"hljs-keyword\">ELSE<\/span> <span class=\"hljs-string\">''<\/span>\n        END <span class=\"hljs-keyword\">AS<\/span> notes,\n    cu.store_id <span class=\"hljs-keyword\">AS<\/span> sid,\n    cu.email\n   FROM customer cu\n     INNER JOIN address a USING (address_id)\n     INNER JOIN city USING (city_id)\n     INNER JOIN country USING (country_id);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, if you select data from the <code>customer_master<\/code> view, you will see the <code>email<\/code> column at the end of the list.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t*\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer_master;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"962\" height=\"202\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-alter-view-customers-master.jpg\" alt=\"posgresql alter view - customers master\" class=\"wp-image-1021\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-alter-view-customers-master.jpg 962w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/posgresql-alter-view-customers-master-300x63.jpg 300w\" sizes=\"(max-width: 962px) 100vw, 962px\" \/><\/figure>\n\n\n\n<p>To change the definition of a view, you use the <code>ALTER VIEW<\/code> statement. For example, you can change the name of the view from <code>customer_master<\/code> to <code>customer_info<\/code> by using the following statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">ALTER<\/span> <span class=\"hljs-keyword\">VIEW<\/span> customer_master <span class=\"hljs-keyword\">RENAME<\/span> <span class=\"hljs-keyword\">TO<\/span> customer_info;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL allows you to set a&nbsp;default value for a column name, change the view&#8217;s schema, set or reset options of a view. For detailed information on the altering view&#8217;s definition, check it out the <a href=\"https:\/\/www.postgresql.org\/docs\/current\/static\/sql-alterview.html\" target=\"_blank\" rel=\"noopener noreferrer\">PostgreSQL ALTER VIEW statement<\/a>.<\/p>\n\n\n\n<h2>Removing PostgreSQL Views<\/h2>\n\n\n\n<p>To remove an existing view in PostgreSQL, you use <code>DROP VIEW<\/code> statement as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP<\/span> <span class=\"hljs-keyword\">VIEW<\/span> [ <span class=\"hljs-keyword\">IF<\/span> <span class=\"hljs-keyword\">EXISTS<\/span> ] view_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>You specify the name of the view that you want to remove after <code>DROP VIEW<\/code> clause. Removing a view that does not exist in the database will result in an error. To avoid this, you normally add <code>IF EXISTS<\/code> option to the statement to instruct&nbsp;PostgreSQL to&nbsp;remove the view if it exists, otherwise, do nothing.<\/p>\n\n\n\n<p>For example, to remove the <code>customer_info<\/code> view that you have created, you execute the following query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP<\/span> <span class=\"hljs-keyword\">VIEW<\/span> <span class=\"hljs-keyword\">IF<\/span> <span class=\"hljs-keyword\">EXISTS<\/span> customer_info;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The view <code>customer_info<\/code>is removed from the database.<\/p>\n\n\n\n<p>In this tutorial, we have shown you how to create, alter, and remove PostgreSQL views.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1010\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-views\/managing-postgresql-views\/\"\n\t\t\t\tdata-post-title=\"Managing PostgreSQL Views\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1010\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-views\/managing-postgresql-views\/\"\n\t\t\t\tdata-post-title=\"Managing PostgreSQL Views\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn about views and how to manage views in PostgreSQL. A view is a database object that is&nbsp;of a stored query. A view can be accessed as a virtual table in PostgreSQL. In other words, a PostgreSQL view is a logical table that represents data of one or more [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1041,"menu_order":0,"comment_status":"open","ping_status":"open","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Managing PostgreSQL Views<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to create, modify, and remove PosgreSQL Views.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-view.jpg\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-view.jpg\",\"width\":564,\"height\":352},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/\",\"name\":\"Managing PostgreSQL Views\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#primaryimage\"},\"datePublished\":\"2015-05-25T08:03:09+00:00\",\"dateModified\":\"2020-04-11T12:15:31+00:00\",\"description\":\"This tutorial shows you how to create, modify, and remove PosgreSQL Views.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Views\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-views\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Managing PostgreSQL Views\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Managing PostgreSQL Views","description":"This tutorial shows you how to create, modify, and remove PosgreSQL Views.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-view.jpg","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/05\/postgresql-view.jpg","width":564,"height":352},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/","name":"Managing PostgreSQL Views","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#primaryimage"},"datePublished":"2015-05-25T08:03:09+00:00","dateModified":"2020-04-11T12:15:31+00:00","description":"This tutorial shows you how to create, modify, and remove PosgreSQL Views.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/managing-postgresql-views\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Views","item":"https:\/\/www.postgresqltutorial.com\/postgresql-views\/"},{"@type":"ListItem","position":3,"name":"Managing PostgreSQL Views"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1010"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1010"}],"version-history":[{"count":0,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1010\/revisions"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1041"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1010"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}