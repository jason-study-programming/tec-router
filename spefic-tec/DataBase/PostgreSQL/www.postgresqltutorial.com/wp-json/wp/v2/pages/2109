{"id":2109,"date":"2016-06-16T02:29:02","date_gmt":"2016-06-16T09:29:02","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2109"},"modified":"2020-08-02T21:09:47","modified_gmt":"2020-08-03T04:09:47","slug":"blob","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/","title":{"rendered":"PostgreSQL Python: Handling BLOB Data"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to handle PostgreSQL BLOB data in Python.<\/p>\n\n\n\n<p>Standard SQL defines BLOB as the&nbsp;binary large object for storing binary data in the database. With the BLOB data type, you can store the content of a picture, a document, etc. into the table.<\/p>\n\n\n\n<p>PostgreSQL does not support BLOB but you can use the BYTEA data type for storing the binary data.<\/p>\n\n\n\n<p>Let&#8217;s take a look at the <code>part_drawings<\/code> table.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"492\" height=\"143\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_part_drawings_tables.png\" alt=\"parts_part_drawings_tables\" class=\"wp-image-2110\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_part_drawings_tables.png 492w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_part_drawings_tables-300x87.png 300w\" sizes=\"(max-width: 492px) 100vw, 492px\" \/><\/figure>\n\n\n\n<p>The <code>part_drawings<\/code> table stores the pictures of parts in the <code>drawing_data<\/code> column. We will show you how to insert binary data into this column and read it back.<\/p>\n\n\n\n<h2>Insert BLOB into a table<\/h2>\n\n\n\n<p>To insert BLOB data into a table, you use the following steps:<\/p>\n\n\n\n<ol><li>First, read data from a file.<\/li><li>Next, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/connect\/\">connect to the PostgreSQL database<\/a> by creating a new connection object from the <code>connect()<\/code> function.<\/li><li>Then, create a <code>cursor<\/code> object from the <code>connection<\/code> object.<\/li><li>After that, execute the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">INSERT<\/a> statement with the input values. For BLOB data, you use the <code>Binary<\/code> object of the psycopg module<\/li><li>Finally, commit the changes permanently to the PostgreSQL database by calling the <code>commit()<\/code> method of the <code>connection<\/code> object.<\/li><\/ol>\n\n\n\n<p>The following <code>write_blob()<\/code> function reads binary data from a file specified by the <code>path_to_file<\/code> parameter and inserts it into the <code>part_drawings<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\"><span class=\"hljs-comment\">#!\/usr\/bin\/python<\/span>\n<span class=\"hljs-keyword\">import<\/span> psycopg2\n<span class=\"hljs-keyword\">from<\/span> config <span class=\"hljs-keyword\">import<\/span> config\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">write_blob<\/span><span class=\"hljs-params\">(part_id, path_to_file, file_extension)<\/span>:<\/span>\n    <span class=\"hljs-string\">\"\"\" insert a BLOB into a table \"\"\"<\/span>\n    conn = <span class=\"hljs-literal\">None<\/span>\n    <span class=\"hljs-keyword\">try<\/span>:\n        <span class=\"hljs-comment\"># read data from a picture<\/span>\n        drawing = open(path_to_file, <span class=\"hljs-string\">'rb'<\/span>).read()\n        <span class=\"hljs-comment\"># read database configuration<\/span>\n        params = config()\n        <span class=\"hljs-comment\"># connect to the PostgresQL database<\/span>\n        conn = psycopg2.connect(**params)\n        <span class=\"hljs-comment\"># create a new cursor object<\/span>\n        cur = conn.cursor()\n        <span class=\"hljs-comment\"># execute the INSERT statement<\/span>\n        cur.execute(<span class=\"hljs-string\">\"INSERT INTO part_drawings(part_id,file_extension,drawing_data) \"<\/span> +\n                    <span class=\"hljs-string\">\"VALUES(%s,%s,%s)\"<\/span>,\n                    (part_id, file_extension, psycopg2.Binary(drawing)))\n        <span class=\"hljs-comment\"># commit the changes to the database<\/span>\n        conn.commit()\n        <span class=\"hljs-comment\"># close the communication with the PostgresQL database<\/span>\n        cur.close()\n    <span class=\"hljs-keyword\">except<\/span> (Exception, psycopg2.DatabaseError) <span class=\"hljs-keyword\">as<\/span> error:\n        print(error)\n    <span class=\"hljs-keyword\">finally<\/span>:\n        <span class=\"hljs-keyword\">if<\/span> conn <span class=\"hljs-keyword\">is<\/span> <span class=\"hljs-keyword\">not<\/span> <span class=\"hljs-literal\">None<\/span>:\n            conn.close()<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following snippet calls the <code>write_blob ()<\/code>function twice to insert two new parts with the corresponding binary data from the picture files into the <code>part_drawings<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\"><span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    write_blob(<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-string\">'images\/simtray.jpg'<\/span>, <span class=\"hljs-string\">'jpg'<\/span>)\n    write_blob(<span class=\"hljs-number\">2<\/span>, <span class=\"hljs-string\">'images\/speaker.jpg'<\/span>, <span class=\"hljs-string\">'jpg'<\/span>)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Read BLOB in the table<\/h2>\n\n\n\n<p>The steps of reading BLOB from a table are similar to the steps of querying data from a table. After fetching binary data from the table, we can save to a file, output it to the web browser, etc.<\/p>\n\n\n\n<p>The following <code>read_blob()<\/code> function selects BLOB data from the <code>part_drawings<\/code> table based on a specified part id and saves the BLOB data to a file.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">read_blob<\/span><span class=\"hljs-params\">(part_id, path_to_dir)<\/span>:<\/span>\n    <span class=\"hljs-string\">\"\"\" read BLOB data from a table \"\"\"<\/span>\n    conn = <span class=\"hljs-literal\">None<\/span>\n    <span class=\"hljs-keyword\">try<\/span>:\n        <span class=\"hljs-comment\"># read database configuration<\/span>\n        params = config()\n        <span class=\"hljs-comment\"># connect to the PostgresQL database<\/span>\n        conn = psycopg2.connect(**params)\n        <span class=\"hljs-comment\"># create a new cursor object<\/span>\n        cur = conn.cursor()\n        <span class=\"hljs-comment\"># execute the SELECT statement<\/span>\n        cur.execute(<span class=\"hljs-string\">\"\"\" SELECT part_name, file_extension, drawing_data\n                        FROM part_drawings\n                        INNER JOIN parts on parts.part_id = part_drawings.part_id\n                        WHERE parts.part_id = %s \"\"\"<\/span>,\n                    (part_id,))\n\n        blob = cur.fetchone()\n        open(path_to_dir + blob[<span class=\"hljs-number\">0<\/span>] + <span class=\"hljs-string\">'.'<\/span> + blob[<span class=\"hljs-number\">1<\/span>], <span class=\"hljs-string\">'wb'<\/span>).write(blob[<span class=\"hljs-number\">2<\/span>])\n        <span class=\"hljs-comment\"># close the communication with the PostgresQL database<\/span>\n        cur.close()\n    <span class=\"hljs-keyword\">except<\/span> (Exception, psycopg2.DatabaseError) <span class=\"hljs-keyword\">as<\/span> error:\n        print(error)\n    <span class=\"hljs-keyword\">finally<\/span>:\n        <span class=\"hljs-keyword\">if<\/span> conn <span class=\"hljs-keyword\">is<\/span> <span class=\"hljs-keyword\">not<\/span> <span class=\"hljs-literal\">None<\/span>:\n            conn.close()<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following snippet reads the binary data of the parts with id value 1 and 2, and save the binary data to the <code>images\/blob<\/code> folder.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to handle PostgreSQL BLOB data in Python using psycopg database adapter.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2109\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Python: Handling BLOB Data\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2109\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Python: Handling BLOB Data\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to handle PostgreSQL BLOB data in Python.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":2071,"menu_order":7,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL Python: Handling BLOB Data<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to handle BLOB data in PostgreSQL database using the psycopg database adapter.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_part_drawings_tables.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_part_drawings_tables.png\",\"width\":492,\"height\":143},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/\",\"name\":\"PostgreSQL Python: Handling BLOB Data\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#primaryimage\"},\"datePublished\":\"2016-06-16T09:29:02+00:00\",\"dateModified\":\"2020-08-03T04:09:47+00:00\",\"description\":\"In this tutorial, you will learn how to handle BLOB data in PostgreSQL database using the psycopg database adapter.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Python\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL Python: Handling BLOB Data\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL Python: Handling BLOB Data","description":"In this tutorial, you will learn how to handle BLOB data in PostgreSQL database using the psycopg database adapter.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_part_drawings_tables.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_part_drawings_tables.png","width":492,"height":143},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/","name":"PostgreSQL Python: Handling BLOB Data","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#primaryimage"},"datePublished":"2016-06-16T09:29:02+00:00","dateModified":"2020-08-03T04:09:47+00:00","description":"In this tutorial, you will learn how to handle BLOB data in PostgreSQL database using the psycopg database adapter.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/blob\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Python","item":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL Python: Handling BLOB Data"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2109"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2109"}],"version-history":[{"count":3,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2109\/revisions"}],"predecessor-version":[{"id":5825,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2109\/revisions\/5825"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2071"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2109"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}