{"id":2723,"date":"2017-03-15T23:13:47","date_gmt":"2017-03-16T06:13:47","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2723"},"modified":"2020-07-09T18:18:36","modified_gmt":"2020-07-10T01:18:36","slug":"postgresql-user-defined-data-types","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-user-defined-data-types\/","title":{"rendered":"A Look at PostgreSQL User-defined Data Types"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to create PostgreSQL user-defined data type using <code>CREATE DOMAIN<\/code> and <code>CREATE TYPE<\/code> statements.<\/p>\n\n\n\n<p>Besides built-in\u00a0<a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-data-types\/\">data types<\/a>, PostgreSQL allows you to create user-defined data types through the following statements:<\/p>\n\n\n\n<ul><li><code>CREATE DOMAIN<\/code>\u00a0creates a user-defined data type with constraints such as <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-not-null-constraint\/\">NOT NULL<\/a><\/code>, <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-check-constraint\/\">CHECK<\/a><\/code>, etc.<\/li><li><code>CREATE TYPE<\/code>\u00a0creates a composite type used in <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-stored-procedures\/\">stored procedures<\/a> as the data types of returned values.<\/li><\/ul>\n\n\n\n<h2>PostgreSQL CREATE DOMAIN statement<\/h2>\n\n\n\n<p>In PostgreSQL, a domain is a data type with optional constraints e.g., <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-not-null-constraint\/\">NOT NULL<\/a><\/code> and <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-check-constraint\/\">CHECK<\/a><\/code>. A domain has a unique name within the schema scope.<\/p>\n\n\n\n<p>Domains are useful for centralizing the management of fields with common constraints. For example, some tables may have the same column that do not accept NULL and spaces.<\/p>\n\n\n\n<p>The following statement <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-table\/\">create a table<\/a> named <code>mailing_list<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> mailing_list (\n    <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">SERIAL<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n    first_name <span class=\"hljs-built_in\">VARCHAR<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n    last_name <span class=\"hljs-built_in\">VARCHAR<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n    email <span class=\"hljs-built_in\">VARCHAR<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n    <span class=\"hljs-keyword\">CHECK<\/span> (\n        first_name !~ <span class=\"hljs-string\">'\\s'<\/span>\n        <span class=\"hljs-keyword\">AND<\/span> last_name !~ <span class=\"hljs-string\">'\\s'<\/span>\n    )\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this table, both <code>first_name<\/code> and <code>last_name<\/code> columns do not accept null and spaces. Instead of defining the <code>CHECK<\/code> constraint, you can create a <code>contact_name<\/code> domain and reuse it in multiple columns.<\/p>\n\n\n\n<p>The following statement uses the <code>CREATE DOMAIN<\/code> to create a new domain called <code>contact_name<\/code> with the <code>VARCHAR<\/code> datatype and do not accept NULL and spaces:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">DOMAIN<\/span> contact_name <span class=\"hljs-keyword\">AS<\/span> \n   <span class=\"hljs-built_in\">VARCHAR<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span> <span class=\"hljs-keyword\">CHECK<\/span> (<span class=\"hljs-keyword\">value<\/span> !~ <span class=\"hljs-string\">'\\s'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you use <code>contact_name<\/code> as the datatype of the <code>first_name<\/code> and <code>last_name<\/code> columns as a regular built-in type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> mailing_list (\n    <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">serial<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n    first_name contact_name,\n    last_name contact_name,\n    email <span class=\"hljs-built_in\">VARCHAR<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following statement inserts a new row into the <code>mailing_list<\/code> table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> mailing_list (first_name, last_name, email)\n<span class=\"hljs-keyword\">VALUES<\/span>(<span class=\"hljs-string\">'Jame V'<\/span>,<span class=\"hljs-string\">'Doe'<\/span>,<span class=\"hljs-string\">'jame.doe@example.com'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL issued the following error because the first name contains a space:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">ERROR:  value for domain contact_name violates <span class=\"hljs-keyword\">check<\/span> <span class=\"hljs-keyword\">constraint<\/span> <span class=\"hljs-string\">\"contact_name_check\"<\/span>\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following statement works because it does not violate any constraints of the <code>contact_name<\/code> type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">INSERT INTO mailing_list (first_name, last_name, email)\nVALUES(<span class=\"hljs-string\">'Jane'<\/span>,<span class=\"hljs-string\">'Doe'<\/span>,<span class=\"hljs-string\">'jane.doe@example.com'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To change or remove a domain, you use the <code>ALTER DOMAIN<\/code> or <code>DROP DOMAIN<\/code> respectively.<\/p>\n\n\n\n<p>To view all domains in the current database, you use the&nbsp;<code>\\dD<\/code> command as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">test=<span class=\"hljs-comment\">#\\dD<\/span>\n                                     List of domains\n Schema |     Name     |       Type        | Modifier |               <span class=\"hljs-keyword\">Check<\/span>\n<span class=\"hljs-comment\">--------+--------------+-------------------+----------+-----------------------------------<\/span>\n <span class=\"hljs-keyword\">public<\/span> | contact_name | <span class=\"hljs-built_in\">character<\/span> <span class=\"hljs-built_in\">varying<\/span> | <span class=\"hljs-keyword\">not<\/span> <span class=\"hljs-literal\">null<\/span> | <span class=\"hljs-keyword\">CHECK<\/span> (<span class=\"hljs-keyword\">VALUE<\/span>::<span class=\"hljs-built_in\">text<\/span> !~ <span class=\"hljs-string\">'\\s'<\/span>::<span class=\"hljs-built_in\">text<\/span>)\n(<span class=\"hljs-number\">1<\/span> <span class=\"hljs-keyword\">row<\/span>)\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Getting domain information<\/h3>\n\n\n\n<p>To get all domains in a specific schema, you use the following query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">SELECT typname \nFROM pg_catalog.pg_type \n  JOIN pg_catalog.pg_namespace \n  \tON pg_namespace.oid = pg_type.typnamespace \nWHERE \n\ttyptype = <span class=\"hljs-string\">'d'<\/span> and nspname = <span class=\"hljs-string\">'&lt;schema_name&gt;'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following statement returns domains in the <code>public<\/code> schema of the current database:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">SELECT typname \nFROM pg_catalog.pg_type \n  JOIN pg_catalog.pg_namespace \n  \tON pg_namespace.oid = pg_type.typnamespace \nWHERE \n\ttyptype = <span class=\"hljs-string\">'d'<\/span> and nspname = <span class=\"hljs-string\">'public'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"146\" height=\"64\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-User-defined-Type-Example.png\" alt=\"\" class=\"wp-image-4521\"\/><\/figure>\n\n\n\n<h2>PostgreSQL CREATE TYPE<\/h2>\n\n\n\n<p>The <code>CREATE TYPE<\/code> statement allows you to create a composite type, which can be used as the return type of a function.<\/p>\n\n\n\n<p>Suppose you want to have a function that returns several values: <code>film_id<\/code>, <code>title<\/code>, and <code>release_year<\/code>. The first step is to create a type e.g., <code>film_summary<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TYPE<\/span> film_summary <span class=\"hljs-keyword\">AS<\/span> (\n    film_id <span class=\"hljs-built_in\">INT<\/span>,\n    title <span class=\"hljs-built_in\">VARCHAR<\/span>,\n    release_year <span class=\"hljs-built_in\">SMALLINT<\/span>\n); \n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, use the <code>film_summary<\/code> data type as the return type of a function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">OR<\/span> <span class=\"hljs-keyword\">REPLACE<\/span> <span class=\"hljs-keyword\">FUNCTION<\/span> get_film_summary (f_id <span class=\"hljs-built_in\">INT<\/span>) \n    <span class=\"hljs-keyword\">RETURNS<\/span> film_summary <span class=\"hljs-keyword\">AS<\/span> \n$$ \n<span class=\"hljs-keyword\">SELECT<\/span>\n    film_id,\n    title,\n    release_year\n<span class=\"hljs-keyword\">FROM<\/span>\n    film\n<span class=\"hljs-keyword\">WHERE<\/span>\n    film_id = f_id ; \n$$ \nLANGUAGE SQL;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, call the <code>get_film_summary()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> * <span class=\"hljs-keyword\">FROM<\/span> get_film_summary (<span class=\"hljs-number\">40<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"289\" height=\"42\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/03\/postgresql-user-defined-type.png\" alt=\"PostgreSQL user-defined type example\" class=\"wp-image-2724\"\/><\/figure>\n\n\n\n<p>To change a user-defined type, you use the <code>ALTER TYPE<\/code> statement. To remove a user-defined type, you use the <code>DROP TYPE<\/code> statement.<\/p>\n\n\n\n<p>If you use the <code>psql<\/code> program, you can list all user-defined types in the current database using the  <code>\\dT<\/code> or <code>\\dT+<\/code> command:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">dvdrental=<span class=\"hljs-comment\"># \\dT<\/span>\n         List of data types\n Schema |     Name     | Description\n<span class=\"hljs-comment\">--------+--------------+-------------<\/span>\n public | contact_name |\n public | film_summary |\n public | mpaa_rating  |\n(3 rows)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned how to create PostgreSQL user-defined types using the <code>CREATE DOMAIN<\/code> and <code>CREATE TYPE<\/code> statements.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2723\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-user-defined-data-types\/\"\n\t\t\t\tdata-post-title=\"A Look at PostgreSQL User-defined Data Types\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2723\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-user-defined-data-types\/\"\n\t\t\t\tdata-post-title=\"A Look at PostgreSQL User-defined Data Types\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This tutorial shows you how to create PostgreSQL user-defined data type using CREATE DOMAIN and CREATE TYPE statements.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":79,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>A Look at PostgreSQL User-defined Data Types<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to create PostgreSQL user-defined data type using CREATE DOMAIN and CREATE TYPE statements.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-User-defined-Type-Example.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-User-defined-Type-Example.png\",\"width\":146,\"height\":64},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/\",\"name\":\"A Look at PostgreSQL User-defined Data Types\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#primaryimage\"},\"datePublished\":\"2017-03-16T06:13:47+00:00\",\"dateModified\":\"2020-07-10T01:18:36+00:00\",\"description\":\"This tutorial shows you how to create PostgreSQL user-defined data type using CREATE DOMAIN and CREATE TYPE statements.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"A Look at PostgreSQL User-defined Data Types\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"A Look at PostgreSQL User-defined Data Types","description":"This tutorial shows you how to create PostgreSQL user-defined data type using CREATE DOMAIN and CREATE TYPE statements.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-User-defined-Type-Example.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-User-defined-Type-Example.png","width":146,"height":64},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/","name":"A Look at PostgreSQL User-defined Data Types","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#primaryimage"},"datePublished":"2017-03-16T06:13:47+00:00","dateModified":"2020-07-10T01:18:36+00:00","description":"This tutorial shows you how to create PostgreSQL user-defined data type using CREATE DOMAIN and CREATE TYPE statements.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-user-defined-data-types\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"A Look at PostgreSQL User-defined Data Types"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2723"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2723"}],"version-history":[{"count":1,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2723\/revisions"}],"predecessor-version":[{"id":4522,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2723\/revisions\/4522"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2723"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}