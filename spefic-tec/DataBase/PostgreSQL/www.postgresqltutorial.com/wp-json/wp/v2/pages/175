{"id":175,"date":"2012-08-27T06:43:09","date_gmt":"2012-08-27T13:43:09","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=175"},"modified":"2020-07-11T01:14:11","modified_gmt":"2020-07-11T08:14:11","slug":"postgresql-where","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-where\/","title":{"rendered":"PostgreSQL WHERE"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use PostgreSQL <code>WHERE<\/code>&nbsp;clause to filter rows returned by a <code>SELECT<\/code> statement.<\/p>\n\n\n\n<p>The <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT<\/a><\/code> statement returns all rows from one or more columns in a table. To select rows that satisfy a specified condition, you use a <code>WHERE<\/code> clause.<\/p>\n\n\n\n<h2>PostgreSQL <code>WHERE<\/code> clause overview<\/h2>\n\n\n\n<p>The syntax of the PostgreSQL <code>WHERE<\/code> clause is as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> select_list\n<span class=\"hljs-keyword\">FROM<\/span> table_name\n<span class=\"hljs-keyword\">WHERE<\/span> condition\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> sort_expression<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>WHERE<\/code> clause appears right after the <code>FROM<\/code> clause of the <code>SELECT<\/code> statement.&nbsp; The <code>WHERE<\/code> clause uses the <code>condition<\/code> to filter the rows returned from the <code>SELECT<\/code> clause.<\/p>\n\n\n\n<p>The <code>condition<\/code> must evaluate to true, false, or unknown. It can be a boolean expression or a combination of boolean expressions using the <code>AND<\/code> and <code>OR<\/code> operators.<\/p>\n\n\n\n<p>The query returns only rows that satisfy the <code>condition<\/code> in the <code>WHERE<\/code> clause. In other words, only rows that cause the <code>condition<\/code> evaluates to true will be included in the result set.<\/p>\n\n\n\n<p>PostgreSQL evaluates the <code>WHERE<\/code> clause after the <code>FROM<\/code> clause and before the <code>SELECT<\/code> and <code>ORDER BY<\/code> clause:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"748\" height=\"87\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-WHERE.png\" alt=\"\" class=\"wp-image-4840\"\/><\/figure>\n\n\n\n<p>If you use column aliases in the <code>SELECT<\/code> clause, you cannot use them in the <code>WHERE<\/code> clause. <\/p>\n\n\n\n<p>Besides the <code>SELECT<\/code> statement, you can use the <code>WHERE<\/code> clause in the <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\">UPDATE<\/a><\/code> and <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-delete\/\">DELETE<\/a><\/code> statement to specify rows to be updated or deleted.<\/p>\n\n\n\n<p>To form the condition in the <code>WHERE<\/code> clause, you use comparison and logical operators:<\/p>\n\n\n\n<figure class=\"wp-block-table normal\"><table><thead><tr><th scope=\"col\">Operator<\/th><th scope=\"col\">Description<\/th><\/tr><\/thead><tbody><tr><td>=<\/td><td>Equal<\/td><\/tr><tr><td>&gt;<\/td><td>Greater than<\/td><\/tr><tr><td>&lt;<\/td><td>Less than<\/td><\/tr><tr><td>&gt;=<\/td><td>Greater than or equal<\/td><\/tr><tr><td>&lt;=<\/td><td>Less than or equal<\/td><\/tr><tr><td>&lt;&gt; or !=<\/td><td>Not equal<\/td><\/tr><tr><td>AND<\/td><td>Logical operator AND<\/td><\/tr><tr><td>OR<\/td><td>Logical operator OR<\/td><\/tr><tr><td><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-in\/\">IN<\/a><\/td><td>Return true if a value matches any value in a list<\/td><\/tr><tr><td><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-between\/\">BETWEEN<\/a><\/td><td>Return true if a value is between a range of values<\/td><\/tr><tr><td><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/\">LIKE<\/a><\/td><td>Return true if a value matches a pattern<\/td><\/tr><tr><td><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-is-null\/\">IS NULL<\/a><\/td><td>Return true if a value is NULL<\/td><\/tr><tr><td> NOT<\/td><td>Negate the result of other operators <\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>PostgreSQL WHERE clause examples<\/h2>\n\n\n\n<p>Let&#8217;s practice with some examples of using the <code>WHERE<\/code> clause. We will use the <code>customer<\/code>\u00a0table from the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">sample database<\/a> for demonstration.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"206\" height=\"256\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/customer.png\" alt=\"customer table\" class=\"wp-image-4011\"\/><\/figure>\n\n\n\n<h3>1)\u00a0 Using WHERE clause with the equal (<code>=<\/code>) operator example<\/h3>\n\n\n\n<p>The following statement uses the <code>WHERE<\/code> clause customers whose first names are <code>Jamie<\/code>: <\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tlast_name,\n\tfirst_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tfirst_name = <span class=\"hljs-string\">'Jamie'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"347\" height=\"84\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-WHERE-string-comparison.png\" alt=\"PostgreSQL WHERE string comparison\" class=\"wp-image-4275\"\/><\/figure>\n\n\n\n<h3>2) Using WHERE clause with the <code>AND<\/code> operator example<\/h3>\n\n\n\n<p>The following example finds customers whose first name and last name are <code>Jamie<\/code> and <code>rice<\/code> by using the <code>AND<\/code> logical operator to combine two Boolean expressions:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tlast_name,\n\tfirst_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tfirst_name = <span class=\"hljs-string\">'Jamie'<\/span> <span class=\"hljs-keyword\">AND<\/span> \n        last_name = <span class=\"hljs-string\">'Rice'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"344\" height=\"66\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-WHERE-with-AND-operator.png\" alt=\"PostgreSQL WHERE with AND operator\" class=\"wp-image-4276\"\/><\/figure>\n\n\n\n<h3>3) Using the WHERE clause with the <code>OR<\/code> operator example<\/h3>\n\n\n\n<p>This example finds the customers whose last name is <code>Rodriguez<\/code> or first name is <code>Adam<\/code> by using the <code>OR<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tlast_name = <span class=\"hljs-string\">'Rodriguez'<\/span> <span class=\"hljs-keyword\">OR<\/span> \n\tfirst_name = <span class=\"hljs-string\">'Adam'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"344\" height=\"85\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-WHERE-with-OR-operator.png\" alt=\"PostgreSQL WHERE with OR operator\" class=\"wp-image-4280\"\/><\/figure>\n\n\n\n<h3>4) Using WHERE clause with the <code>IN<\/code> operator example<\/h3>\n\n\n\n<p>If you want to match a string with any string in a list, you can use the <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-in\/\">IN<\/a><\/code> operator. <\/p>\n\n\n\n<p>For example, the following statement returns customers whose first name is <code>Ann<\/code>, or <code>Anne<\/code>, or <code>Annie<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span> \n\tfirst_name <span class=\"hljs-keyword\">IN<\/span> (<span class=\"hljs-string\">'Ann'<\/span>,<span class=\"hljs-string\">'Anne'<\/span>,<span class=\"hljs-string\">'Annie'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"346\" height=\"110\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-WHERE-with-IN-operator.png\" alt=\"PostgreSQL WHERE with IN operator\" class=\"wp-image-4277\"\/><\/figure>\n\n\n\n<h3>5) Using the WHERE clause with the <code>LIKE<\/code> operator example<\/h3>\n\n\n\n<p>To find a string that matches a specified pattern, you use the <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/\">LIKE<\/a><\/code> operator. The following example returns all customers whose first names start with the string <code>Ann<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span> \n\tfirst_name <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'Ann%'<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"343\" height=\"163\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-WHERE-with-LIKE-operator.png\" alt=\"PostgreSQL WHERE with LIKE operator\" class=\"wp-image-4278\"\/><\/figure>\n\n\n\n<p>The <code>%<\/code> is called a wildcard that matches any string. The <code>'Ann%'<\/code> pattern matches any string that starts with <code>'Ann'<\/code>.<\/p>\n\n\n\n<h3>6) Using the WHERE clause with the BETWEEN operator example<\/h3>\n\n\n\n<p>The following example finds customers whose first names start with the letter <code>A<\/code> and contains 3 to 5 characters by using the <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-between\/\">BETWEEN<\/a><\/code> operator. <\/p>\n\n\n\n<p>The <code>BETWEEN<\/code> operator returns true if a value is in a range of values.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n\t<span class=\"hljs-keyword\">LENGTH<\/span>(first_name) name_length\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span> \n\tfirst_name <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'A%'<\/span> <span class=\"hljs-keyword\">AND<\/span>\n\t<span class=\"hljs-keyword\">LENGTH<\/span>(first_name) <span class=\"hljs-keyword\">BETWEEN<\/span> <span class=\"hljs-number\">3<\/span> <span class=\"hljs-keyword\">AND<\/span> <span class=\"hljs-number\">5<\/span>\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span>\n\tname_length;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"298\" height=\"580\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-WHERE-with-BETWEEN-operator.png\" alt=\"PostgreSQL WHERE with BETWEEN operator\" class=\"wp-image-4279\"\/><\/figure>\n\n\n\n<p>In this example, we used the <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-length-function\/\">LENGTH()<\/a><\/code> function gets the number of characters of an input string.<\/p>\n\n\n\n<h3>7) Using the WHERE clause with the not equal operator (&lt;>) example<\/h3>\n\n\n\n<p>This example finds customers whose first names start with <code>Bra<\/code> and last names are not <code>Motley<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> \n\tfirst_name, \n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span> \n\tcustomer \n<span class=\"hljs-keyword\">WHERE<\/span> \n\tfirst_name <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'Bra%'<\/span> <span class=\"hljs-keyword\">AND<\/span> \n\tlast_name &lt;&gt; <span class=\"hljs-string\">'Motley'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"342\" height=\"109\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-WHERE-with-Not-Equal-operator.png\" alt=\"PostgreSQL WHERE with Not Equal operator\" class=\"wp-image-4283\"\/><\/figure>\n\n\n\n<p>Note that you can use the <code>!=<\/code> operator and <code>&lt;&gt;<\/code> operator interchangeably because they are equivalent.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to use PostgreSQL <code>WHERE<\/code> clause in the <code>SELECT<\/code> statement to filter rows based on a specified condition.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"175\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-where\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL WHERE\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"175\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-where\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL WHERE\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you\u2019ll learn how to use PostgreSQL WHERE clause to filter rows returned from the SELECT statement.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":5,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL WHERE: Filtering Rows of a Query<\/title>\n<meta name=\"description\" content=\"In this tutorial, you\u2019ll learn how to use PostgreSQL WHERE clause to filter rows returned from the SELECT statement.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-WHERE.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-WHERE.png\",\"width\":748,\"height\":87},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/\",\"name\":\"PostgreSQL WHERE: Filtering Rows of a Query\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#primaryimage\"},\"datePublished\":\"2012-08-27T13:43:09+00:00\",\"dateModified\":\"2020-07-11T08:14:11+00:00\",\"description\":\"In this tutorial, you\u2019ll learn how to use PostgreSQL WHERE clause to filter rows returned from the SELECT statement.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL WHERE\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL WHERE: Filtering Rows of a Query","description":"In this tutorial, you\u2019ll learn how to use PostgreSQL WHERE clause to filter rows returned from the SELECT statement.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-where\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-WHERE.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-WHERE.png","width":748,"height":87},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-where\/","name":"PostgreSQL WHERE: Filtering Rows of a Query","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#primaryimage"},"datePublished":"2012-08-27T13:43:09+00:00","dateModified":"2020-07-11T08:14:11+00:00","description":"In this tutorial, you\u2019ll learn how to use PostgreSQL WHERE clause to filter rows returned from the SELECT statement.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-where\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-where\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL WHERE"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/175"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=175"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/175\/revisions"}],"predecessor-version":[{"id":4843,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/175\/revisions\/4843"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=175"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}