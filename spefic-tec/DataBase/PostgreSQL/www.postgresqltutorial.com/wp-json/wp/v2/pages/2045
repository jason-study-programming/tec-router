{"id":2045,"date":"2016-06-13T04:53:11","date_gmt":"2016-06-13T11:53:11","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2045"},"modified":"2020-04-11T03:53:32","modified_gmt":"2020-04-11T10:53:32","slug":"call-stored-procedures","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/","title":{"rendered":"PostgreSQL PHP: Calling Stored Procedures"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to call stored procedures in PostgreSQL in PHP using PDO.<\/p>\n\n\n\n<h2>Calling a stored procedure that returns one value<\/h2>\n\n\n\n<p>Let\u2019s create a simple <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/\">stored procedure<\/a> named <code>add()<\/code> that returns the product of two integers using plpgsql.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">OR<\/span> <span class=\"hljs-keyword\">REPLACE<\/span> <span class=\"hljs-keyword\">FUNCTION<\/span> <span class=\"hljs-keyword\">add<\/span>(\n    a <span class=\"hljs-built_in\">INTEGER<\/span>,\n    b <span class=\"hljs-built_in\">INTEGER<\/span>)\n  <span class=\"hljs-keyword\">RETURNS<\/span> <span class=\"hljs-built_in\">integer<\/span> <span class=\"hljs-keyword\">AS<\/span> $$\n<span class=\"hljs-keyword\">BEGIN<\/span>\n<span class=\"hljs-keyword\">return<\/span> a + b;\n<span class=\"hljs-keyword\">END<\/span>; $$\n  LANGUAGE 'plpgsql';<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To call a stored procedure that returns one value, you use these steps:<\/p>\n\n\n\n<ol><li><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/\">Connect to the PostgreSQL database server<\/a> by creating a new instance of the PDO class.<\/li><li>Prepare the statement that calls the stored procedure for execution using the <code>prepare()<\/code> method of the PDO object. The <code>prepare()<\/code> method returns a <code>PDOStatement<\/code> object.<\/li><li>Optionally pass values to the statement using the <code>bindValue()<\/code> method.<\/li><li>Execute the statement using the <code>execute()<\/code> method of the <code>PDOStatement<\/code> object. You can pass the values to the statement when calling the <code>execute()<\/code> method as well.<\/li><li>Get the value using the <code>fetchColumn()<\/code> method that returns a single column of the next row in the result set.<\/li><\/ol>\n\n\n\n<p>The following <code>add()<\/code> method demonstrates how to call the <code>add()<\/code> stored procedure in PostgreSQL database.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">   <span class=\"hljs-comment\">\/**\n     * Call a simple stored procedure\n     * <span class=\"hljs-doctag\">@param<\/span> int $a\n     * <span class=\"hljs-doctag\">@param<\/span> int $b\n     * <span class=\"hljs-doctag\">@return<\/span> int\n     *\/<\/span>\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">($a, $b)<\/span> <\/span>{\n        $stmt = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;prepare(<span class=\"hljs-string\">'SELECT * FROM add(:a,:b)'<\/span>);\n        $stmt-&gt;setFetchMode(\\PDO::FETCH_ASSOC);\n        $stmt-&gt;execute([\n            <span class=\"hljs-string\">':a'<\/span> =&gt; $a,\n            <span class=\"hljs-string\">':b'<\/span> =&gt; $b\n        ]);\n        <span class=\"hljs-keyword\">return<\/span> $stmt-&gt;fetchColumn(<span class=\"hljs-number\">0<\/span>);\n    }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To test the <code>add()<\/code> method, you use the following code in the <code>index.php<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'vendor\/autoload.php'<\/span>;\n\n<span class=\"hljs-keyword\">use<\/span> <span class=\"hljs-title\">PostgreSQLTutorial<\/span>\\<span class=\"hljs-title\">Connection<\/span> <span class=\"hljs-title\">as<\/span> <span class=\"hljs-title\">Connection<\/span>;\n<span class=\"hljs-keyword\">use<\/span> <span class=\"hljs-title\">PostgreSQLTutorial<\/span>\\<span class=\"hljs-title\">StoreProc<\/span> <span class=\"hljs-title\">as<\/span> <span class=\"hljs-title\">StoreProc<\/span>;\n\n<span class=\"hljs-keyword\">try<\/span> {\n    <span class=\"hljs-comment\">\/\/ connect to the PostgreSQL database<\/span>\n    $pdo = Connection::get()-&gt;connect();\n    <span class=\"hljs-comment\">\/\/ <\/span>\n    $storeProc = <span class=\"hljs-keyword\">new<\/span> StoreProc($pdo);\n\n    $result = $storeProc-&gt;add(<span class=\"hljs-number\">20<\/span>, <span class=\"hljs-number\">30<\/span>);\n    <span class=\"hljs-keyword\">echo<\/span> $result;\n    \n} <span class=\"hljs-keyword\">catch<\/span> (\\PDOException $e) {\n    <span class=\"hljs-keyword\">echo<\/span> $e-&gt;getMessage();\n}<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Calling a stored procedure that returns a result set<\/h2>\n\n\n\n<p>We will use the <code>accounts<\/code>, <code>plans<\/code>, and <code>account_plans<\/code> tables for the sake of demonstration. The following <code>get_accounts()<\/code> stored procedure returns a result set that contains a complete data of accounts.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">OR<\/span> <span class=\"hljs-keyword\">REPLACE<\/span> <span class=\"hljs-keyword\">FUNCTION<\/span> get_accounts()\n  <span class=\"hljs-keyword\">RETURNS<\/span> <span class=\"hljs-keyword\">TABLE<\/span>(<span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">integer<\/span>, \n                first_name <span class=\"hljs-built_in\">character<\/span> <span class=\"hljs-built_in\">varying<\/span>, \n                last_name <span class=\"hljs-built_in\">character<\/span> <span class=\"hljs-built_in\">varying<\/span>, \n                plan <span class=\"hljs-built_in\">character<\/span> <span class=\"hljs-built_in\">varying<\/span>, \n                effective_date <span class=\"hljs-built_in\">date<\/span>) <span class=\"hljs-keyword\">AS<\/span>\n$$\n<span class=\"hljs-keyword\">BEGIN<\/span>\n <span class=\"hljs-keyword\">RETURN<\/span> <span class=\"hljs-keyword\">QUERY<\/span> \n\n <span class=\"hljs-keyword\">SELECT<\/span> a.id,a.first_name,a.last_name, p.plan, ap.effective_date\n <span class=\"hljs-keyword\">FROM<\/span> accounts a\n <span class=\"hljs-keyword\">INNER<\/span> <span class=\"hljs-keyword\">JOIN<\/span> account_plans ap <span class=\"hljs-keyword\">on<\/span> a.id = account_id\n <span class=\"hljs-keyword\">INNER<\/span> <span class=\"hljs-keyword\">JOIN<\/span> plans p <span class=\"hljs-keyword\">on<\/span> p.id = plan_id\n <span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> a.id, ap.effective_date;\n<span class=\"hljs-keyword\">END<\/span>; $$\n\nLANGUAGE plpgsql;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The steps of calling a stored procedure that returns a result set are the same as the steps of <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/query\/\">querying data<\/a>.<\/p>\n\n\n\n<p>The following <code>getAccounts()<\/code> method demonstrates how to call the <code>get_accounts()<\/code> stored procedure in PHP.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">   <span class=\"hljs-comment\">\/**\n     * Call a stored procedure that returns a result set\n     * <span class=\"hljs-doctag\">@return<\/span> array\n     *\/<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getAccounts<\/span><span class=\"hljs-params\">()<\/span> <\/span>{\n        $stmt = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;query(<span class=\"hljs-string\">'SELECT * FROM get_accounts()'<\/span>);\n        $accounts = [];\n        <span class=\"hljs-keyword\">while<\/span> ($row = $stmt-&gt;fetch()) {\n            $accounts[] = [\n                <span class=\"hljs-string\">'id'<\/span> =&gt; $row[<span class=\"hljs-string\">'id'<\/span>],\n                <span class=\"hljs-string\">'first_name'<\/span> =&gt; $row[<span class=\"hljs-string\">'first_name'<\/span>],\n                <span class=\"hljs-string\">'last_name'<\/span> =&gt; $row[<span class=\"hljs-string\">'last_name'<\/span>],\n                <span class=\"hljs-string\">'plan'<\/span> =&gt; $row[<span class=\"hljs-string\">'plan'<\/span>],\n                <span class=\"hljs-string\">'effective_date'<\/span> =&gt; $row[<span class=\"hljs-string\">'effective_date'<\/span>]\n            ];\n        }\n        <span class=\"hljs-keyword\">return<\/span> $accounts;\n    }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To test the <code>getAccounts()<\/code> method, you use the following code in the <code>account.php<\/code> file.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">&lt;?php\nrequire 'vendor\/autoload.php';\n\n<span class=\"hljs-keyword\">use<\/span> PostgreSQLTutorial\\<span class=\"hljs-keyword\">Connection<\/span> <span class=\"hljs-keyword\">as<\/span> <span class=\"hljs-keyword\">Connection<\/span>;\n<span class=\"hljs-keyword\">use<\/span> PostgreSQLTutorial\\StoreProc <span class=\"hljs-keyword\">as<\/span> StoreProc;\n\ntry {\n    \/\/ connect to the PostgreSQL database\n    $pdo = Connection::get()-&gt;connect();\n    \/\/ \n    $storeProc = new StoreProc($pdo);\n   \n    $accounts = $storeProc-&gt;getAccounts();\n    \n} catch (\\PDOException $e) {\n    echo $e-&gt;getMessage();\n}\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;PostgreSQL PHP: calling stored procedure demo&lt;\/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"https:\/\/cdn.rawgit.com\/twbs\/bootstrap\/v4-dev\/dist\/css\/bootstrap.css\"&gt;\n    &lt;\/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;Account List&lt;\/h1&gt;\n            &lt;table class=\"table table-bordered\"&gt;\n                &lt;thead&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;ID&lt;\/th&gt;\n                        &lt;th&gt;First Name&lt;\/th&gt;\n                        &lt;th&gt;Last Name&lt;\/th&gt;\n                        &lt;th&gt;Plan&lt;\/th&gt;\n                        &lt;th&gt;Effective Date&lt;\/th&gt;\n                    &lt;\/tr&gt;\n                &lt;\/thead&gt;\n                &lt;tbody&gt;\n                    &lt;?php foreach ($accounts as $account) : ?&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;&lt;?php echo htmlspecialchars($account['id']) ?&gt;&lt;\/td&gt;\n                            &lt;td&gt;&lt;?php echo htmlspecialchars($account['first_name']); ?&gt;&lt;\/td&gt;\n                            &lt;td&gt;&lt;?php echo htmlspecialchars($account['last_name']); ?&gt;&lt;\/td&gt;\n                            &lt;td&gt;&lt;?php echo htmlspecialchars($account['plan']); ?&gt;&lt;\/td&gt;\n                            &lt;td&gt;&lt;?php echo htmlspecialchars($account['effective_date']); ?&gt;&lt;\/td&gt;\n                        &lt;\/tr&gt;\n                    &lt;?php endforeach; ?&gt;\n                &lt;\/tbody&gt;\n            &lt;\/table&gt;\n        &lt;\/div&gt;\n    &lt;\/body&gt;\n&lt;\/html&gt;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"712\" height=\"251\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-store-procedure.png\" alt=\"D:\\ref\\projects\\postgresql\\php\\stored procedure\" class=\"wp-image-2053\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-store-procedure.png 712w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-store-procedure-300x106.png 300w\" sizes=\"(max-width: 712px) 100vw, 712px\" \/><\/figure>\n\n\n\n<p>In this tutorial, we have shown you how to call stored procedure from PostgreSQL using PHP PDO.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2045\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL PHP: Calling Stored Procedures\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2045\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL PHP: Calling Stored Procedures\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn how to call stored procedures in PostgreSQL in PHP using PDO. Calling a stored procedure that returns one value Let\u2019s create a simple stored procedure named add() that returns the product of two integers using plpgsql. To call a stored procedure that returns one value, you use these [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1980,"menu_order":6,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL PHP: Calling Stored Procedures<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-store-procedure.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-store-procedure.png\",\"width\":712,\"height\":251,\"caption\":\"D:\\\\ref\\\\projects\\\\postgresql\\\\php\\\\stored procedure\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/\",\"name\":\"PostgreSQL PHP: Calling Stored Procedures\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#primaryimage\"},\"datePublished\":\"2016-06-13T11:53:11+00:00\",\"dateModified\":\"2020-04-11T10:53:32+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PHP\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL PHP: Calling Stored Procedures\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL PHP: Calling Stored Procedures","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-store-procedure.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-store-procedure.png","width":712,"height":251,"caption":"D:\\ref\\projects\\postgresql\\php\\stored procedure"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/","name":"PostgreSQL PHP: Calling Stored Procedures","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#primaryimage"},"datePublished":"2016-06-13T11:53:11+00:00","dateModified":"2020-04-11T10:53:32+00:00","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/call-stored-procedures\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PHP","item":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL PHP: Calling Stored Procedures"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2045"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2045"}],"version-history":[{"count":0,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2045\/revisions"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1980"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2045"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}