{"id":1950,"date":"2016-03-13T06:34:11","date_gmt":"2016-03-13T13:34:11","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1950"},"modified":"2020-07-09T21:42:24","modified_gmt":"2020-07-10T04:42:24","slug":"transaction","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/","title":{"rendered":"The Beginner&#8217;s Guide To PostgreSQL JDBC Transaction"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JDBC PostgreSQL transaction using JDBC transaction API.<\/p>\n\n\n\n<p>In some cases, you do not want one SQL statement to take effect unless another one is completed. For example, when you want to insert a new actor, you also want to assign the film that actor participates.<\/p>\n\n\n\n<p>To make sure that both actions take effect nor neither actions occur, you use a transaction.<\/p>\n\n\n\n<p>By definition, a transaction is a set of statements executed as a single unit. In other words, either all statements executed successfully, or none of them executed.<\/p>\n\n\n\n<h2>Disable auto-commit mode<\/h2>\n\n\n\n<p>When you <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/connecting-to-postgresql-database\/\">establish a connection to the PostgreSQL database<\/a>, it is in auto-commit mode. It means that each SQL statement is treated as a transaction and is automatically committed.<\/p>\n\n\n\n<p>If you want to encapsulate one or more statements in a transaction, you must disable the auto-commit mode.&nbsp;To do this, you call the <code>setAutoCommit()<\/code> method of the <code>Connection<\/code> object as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Java\" data-shcb-language-slug=\"java\"><div><code class=\"hljs language-java\">conn.setAutoCommit(<span class=\"hljs-keyword\">false<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Java<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">java<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It is a best practice to disable the auto-commit mode only for the transaction mode. It allows you to avoid holding database locks for multiple statements.<\/p>\n\n\n\n<h2>Commit a transaction<\/h2>\n\n\n\n<p>To commit a transaction, you call the commit method of the Connection object as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Java\" data-shcb-language-slug=\"java\"><div><code class=\"hljs language-java\">conn.commit();<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Java<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">java<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you call the <code>commit()<\/code> method, all the previous statements are committed together as a single unit.<\/p>\n\n\n\n<h2>Rollback a transaction<\/h2>\n\n\n\n<p>In case the result of one statement is not what you expected, you can use the <code>rollback()<\/code> method of the <code>Connection<\/code> object to aborting the current transaction and restore values to the original values.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Java\" data-shcb-language-slug=\"java\"><div><code class=\"hljs language-java\">conn.rollback();<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Java<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">java<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>PostgreSQL JDBC transaction example<\/h2>\n\n\n\n<p>Let&#8217;s take an example of using JDBC API to perform a PostgreSQL transaction.<\/p>\n\n\n\n<p>We will insert a new actor into the <code>actor<\/code> table and assign the actor a film specified by a film id.<\/p>\n\n\n\n<p>First, create a class that represents an actor as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">package com.postgresqltutorial;\n\n<span class=\"hljs-comment\">\/**\n *\n * @author postgresqltutorial.com\n *\/<\/span>\npublic class Actor {\n\n    <span class=\"hljs-comment\">\/**\n     * actor's first name\n     *\/<\/span>\n    private String firstName;\n    <span class=\"hljs-comment\">\/**\n     * actor's last name\n     *\/<\/span>\n    private String lastName;\n\n    <span class=\"hljs-comment\">\/**\n     * initialize an actor with the first name and last name\n     *\n     * @param firstName\n     * @param lastName\n     *\/<\/span>\n    public Actor(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * initialize an actor\n     *\/<\/span>\n    public Actor() {\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * @return the firstName\n     *\/<\/span>\n    public String getFirstName() {\n        return firstName;\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * @param firstName the firstName to set\n     *\/<\/span>\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * @return the lastName\n     *\/<\/span>\n    public String getLastName() {\n        return lastName;\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * @param lastName the lastName to set\n     *\/<\/span>\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Then, create an App class for the demonstration.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Java\" data-shcb-language-slug=\"java\"><div><code class=\"hljs language-java\"><span class=\"hljs-comment\">\/**\n * need to fix the db ALTER TABLE film_actor ALTER COLUMN actor_id TYPE INT;\n * ALTER TABLE film_actor ALTER COLUMN film_id TYPE INT;\n *\/<\/span>\n<span class=\"hljs-keyword\">package<\/span> com.postgresqltutorial;\n\n<span class=\"hljs-keyword\">import<\/span> java.sql.Connection;\n<span class=\"hljs-keyword\">import<\/span> java.sql.PreparedStatement;\n<span class=\"hljs-keyword\">import<\/span> java.sql.SQLException;\n<span class=\"hljs-keyword\">import<\/span> java.sql.DriverManager;\n<span class=\"hljs-keyword\">import<\/span> java.sql.ResultSet;\n<span class=\"hljs-keyword\">import<\/span> java.sql.Statement;\n\n<span class=\"hljs-comment\">\/**\n *\n * <span class=\"hljs-doctag\">@author<\/span> postgresqltutorial.com\n *\/<\/span>\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span> <\/span>{\n\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">final<\/span> String url = <span class=\"hljs-string\">\"jdbc:postgresql:\/\/localhost\/dvdrental\"<\/span>;\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">final<\/span> String user = <span class=\"hljs-string\">\"postgres\"<\/span>;\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">final<\/span> String password = <span class=\"hljs-string\">\"postgres\"<\/span>;\n\n    <span class=\"hljs-comment\">\/**\n     * Connect to the PostgreSQL database\n     *\n     * <span class=\"hljs-doctag\">@return<\/span> a Connection object\n     * <span class=\"hljs-doctag\">@throws<\/span> java.sql.SQLException\n     *\/<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> Connection <span class=\"hljs-title\">connect<\/span><span class=\"hljs-params\">()<\/span> <span class=\"hljs-keyword\">throws<\/span> SQLException <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> DriverManager.getConnection(url, user, password);\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * Close a AutoCloseable object\n     *\n     * <span class=\"hljs-doctag\">@param<\/span> closable\n     *\/<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private<\/span> App <span class=\"hljs-title\">close<\/span><span class=\"hljs-params\">(AutoCloseable closeable)<\/span> <\/span>{\n        <span class=\"hljs-keyword\">try<\/span> {\n            <span class=\"hljs-keyword\">if<\/span> (closeable != <span class=\"hljs-keyword\">null<\/span>) {\n                closeable.close();\n            }\n        } <span class=\"hljs-keyword\">catch<\/span> (Exception e) {\n            System.out.println(e.getMessage());\n        }\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>;\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * insert an actor and assign him to a specific film\n     *\n     * <span class=\"hljs-doctag\">@param<\/span> actor\n     * <span class=\"hljs-doctag\">@param<\/span> filmId\n     *\/<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">addActorAndAssignFilm<\/span><span class=\"hljs-params\">(Actor actor, <span class=\"hljs-keyword\">int<\/span> filmId)<\/span> <\/span>{\n\n        Connection conn = <span class=\"hljs-keyword\">null<\/span>;\n        PreparedStatement pstmt = <span class=\"hljs-keyword\">null<\/span>;\n        PreparedStatement pstmt2 = <span class=\"hljs-keyword\">null<\/span>;\n        ResultSet rs = <span class=\"hljs-keyword\">null<\/span>;\n\n        <span class=\"hljs-comment\">\/\/ insert an actor into the actor table<\/span>\n        String SQLInsertActor = <span class=\"hljs-string\">\"INSERT INTO actor(first_name,last_name) \"<\/span>\n                + <span class=\"hljs-string\">\"VALUES(?,?)\"<\/span>;\n\n        <span class=\"hljs-comment\">\/\/ assign actor to a film<\/span>\n        String SQLAssignActor = <span class=\"hljs-string\">\"INSERT INTO film_actor(actor_id,film_id) \"<\/span>\n                + <span class=\"hljs-string\">\"VALUES(?,?)\"<\/span>;\n\n        <span class=\"hljs-keyword\">int<\/span> actorId = <span class=\"hljs-number\">0<\/span>;\n        <span class=\"hljs-keyword\">try<\/span> {\n            <span class=\"hljs-comment\">\/\/ connect to the database<\/span>\n            conn = connect();\n            conn.setAutoCommit(<span class=\"hljs-keyword\">false<\/span>);\n\n            <span class=\"hljs-comment\">\/\/ add actor<\/span>\n            pstmt = conn.prepareStatement(SQLInsertActor,\n                    Statement.RETURN_GENERATED_KEYS);\n\n            pstmt.setString(<span class=\"hljs-number\">1<\/span>, actor.getFirstName());\n            pstmt.setString(<span class=\"hljs-number\">2<\/span>, actor.getLastName());\n\n            <span class=\"hljs-keyword\">int<\/span> affectedRows = pstmt.executeUpdate();\n\n            <span class=\"hljs-keyword\">if<\/span> (affectedRows &gt; <span class=\"hljs-number\">0<\/span>) {\n                <span class=\"hljs-comment\">\/\/ get actor id<\/span>\n                rs = pstmt.getGeneratedKeys();\n\n                <span class=\"hljs-keyword\">if<\/span> (rs.next()) {\n                    actorId = rs.getInt(<span class=\"hljs-number\">1<\/span>);\n                    <span class=\"hljs-keyword\">if<\/span> (actorId &gt; <span class=\"hljs-number\">0<\/span>) {\n                        pstmt2 = conn.prepareStatement(SQLAssignActor);\n                        pstmt2.setInt(<span class=\"hljs-number\">1<\/span>, actorId);\n                        pstmt2.setInt(<span class=\"hljs-number\">2<\/span>, filmId);\n                        pstmt2.executeUpdate();\n                    }\n                }\n            } <span class=\"hljs-keyword\">else<\/span> {\n                <span class=\"hljs-comment\">\/\/ rollback the transaction if the insert failed<\/span>\n                conn.rollback();\n            }\n\n            <span class=\"hljs-comment\">\/\/ commit the transaction if everything is fine<\/span>\n            conn.commit();\n\n            System.out.println(\n                    String.format(<span class=\"hljs-string\">\"The actor was inserted with id %d and \"<\/span>\n                            + <span class=\"hljs-string\">\"assigned to the film %d\"<\/span>, actorId, filmId));\n\n        } <span class=\"hljs-keyword\">catch<\/span> (SQLException ex) {\n            System.out.println(ex.getMessage());\n            <span class=\"hljs-comment\">\/\/ roll back the transaction<\/span>\n            System.out.println(<span class=\"hljs-string\">\"Rolling back the transaction...\"<\/span>);\n            <span class=\"hljs-keyword\">try<\/span> {\n                <span class=\"hljs-keyword\">if<\/span> (conn != <span class=\"hljs-keyword\">null<\/span>) {\n                    conn.rollback();\n                }\n            } <span class=\"hljs-keyword\">catch<\/span> (SQLException e) {\n                System.out.println(e.getMessage());\n            }\n\n        } <span class=\"hljs-keyword\">finally<\/span> {\n            <span class=\"hljs-keyword\">this<\/span>.close(rs)\n                    .close(pstmt)\n                    .close(pstmt2)\n                    .close(conn);\n        }\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * <span class=\"hljs-doctag\">@param<\/span> args the command line arguments\n     *\/<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">static<\/span> <span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">(String[] args)<\/span> <\/span>{\n        App app = <span class=\"hljs-keyword\">new<\/span> App();\n        <span class=\"hljs-comment\">\/\/ OK transaction<\/span>\n         app.addActorAndAssignFilm(<span class=\"hljs-keyword\">new<\/span> Actor(<span class=\"hljs-string\">\"Bruce\"<\/span>, <span class=\"hljs-string\">\"Lee\"<\/span>), <span class=\"hljs-number\">1<\/span>);\n        \n        <span class=\"hljs-comment\">\/\/ Failed transaction<\/span>\n        <span class=\"hljs-comment\">\/\/ app.addActorAndAssignFilm(new Actor(\"Lily\", \"Lee\"), 9999);<\/span>\n    }\n}<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Java<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">java<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How the App class works.<\/p>\n\n\n\n<p>The <code>connect()<\/code> method establishes a connection to the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">dvdrental database<\/a> and returns a Connection object.<\/p>\n\n\n\n<p>The <code>close()<\/code> method closes a closable object such as Resultset, Statement, and Connection.<\/p>\n\n\n\n<p>The <code>addActorAndAssignFilm()<\/code> method inserts a new actor and assigns a film to the actor within a transaction.<\/p>\n\n\n\n<ol><li>First, insert a new actor into the actor table.<\/li><li>Next, get the id of the newly inserted actor<\/li><li>Then, assign the actor to a film by inserting a new row into the film_actor table.<\/li><li>After that, if both step 2 and 3 succeeded, commit the transaction. Otherwise, rollback the transaction<\/li><li>Finally, close the ResultSet, PreparedStatement, and Connection objects.<\/li><\/ol>\n\n\n\n<p>If we execute the program with the first scenario, we get the following result:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">run:\nThe actor was inserted <span class=\"hljs-keyword\">with<\/span> id <span class=\"hljs-number\">217<\/span> and assigned to the film <span class=\"hljs-number\">1<\/span>\nBUILD SUCCESSFUL (total time: <span class=\"hljs-number\">2<\/span> seconds)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>We can verify it by querying the <code>actor<\/code> table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tactor_id,\n\tfirst_name,\n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tactor\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span>\n\tactor_id <span class=\"hljs-keyword\">DESC<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"286\" height=\"41\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/03\/postgresql-jdbc-transaction-example.jpg\" alt=\"postgresql jdbc transaction example\" class=\"wp-image-1951\"\/><\/figure>\n\n\n\n<p>and also the <code>film_actor<\/code> table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tactor_id,\n\tfilm_id\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm_actor\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tactor_id = <span class=\"hljs-number\">217<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"156\" height=\"43\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/03\/postgresql-jdbc-transaction-film_actor-table.jpg\" alt=\"postgresql jdbc transaction film_actor table\" class=\"wp-image-1952\"\/><\/figure>\n\n\n\n<p>Now if we insert a new actor and assign her to a film that does not exist, it issues the following error messages:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">run:\nERROR: insert or update on table <span class=\"hljs-string\">\"film_actor\"<\/span> violates foreign key constraint <span class=\"hljs-string\">\"film_actor_film_id_fkey\"<\/span>\n  <span class=\"hljs-attr\">Detail<\/span>: Key (film_id)=(<span class=\"hljs-number\">9999<\/span>) is not present <span class=\"hljs-keyword\">in<\/span> table <span class=\"hljs-string\">\"film\"<\/span>.\nRolling back the transaction...\nBUILD SUCCESSFUL (total time: <span class=\"hljs-number\">0<\/span> seconds)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The transaction is rolled back and nothing is inserted into the <code>actor<\/code> and <code>film_actor<\/code> tables.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to perform a transaction to ensure the integrity of data in the PostgreSQL database using JDBC transaction API.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1950\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/\"\n\t\t\t\tdata-post-title=\"The Beginner&#8217;s Guide To PostgreSQL JDBC Transaction\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1950\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/\"\n\t\t\t\tdata-post-title=\"The Beginner&#8217;s Guide To PostgreSQL JDBC Transaction\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn about the JDBC PostgreSQL transaction using JDBC transaction API. In some cases, you do not want one SQL statement to take effect unless another one is completed. For example, when you want to insert a new actor, you also want to assign the film that actor participates. To [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1885,"menu_order":6,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Beginner&#039;s Guide To PostgreSQL JDBC Transaction<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about PostgreSQL JDBC transaction using JDBC transaction API.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/03\/postgresql-jdbc-transaction-example.jpg\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/03\/postgresql-jdbc-transaction-example.jpg\",\"width\":286,\"height\":41},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/\",\"name\":\"The Beginner's Guide To PostgreSQL JDBC Transaction\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#primaryimage\"},\"datePublished\":\"2016-03-13T13:34:11+00:00\",\"dateModified\":\"2020-07-10T04:42:24+00:00\",\"description\":\"In this tutorial, you will learn about PostgreSQL JDBC transaction using JDBC transaction API.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL JDBC\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"The Beginner&#8217;s Guide To PostgreSQL JDBC Transaction\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Beginner's Guide To PostgreSQL JDBC Transaction","description":"In this tutorial, you will learn about PostgreSQL JDBC transaction using JDBC transaction API.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/03\/postgresql-jdbc-transaction-example.jpg","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/03\/postgresql-jdbc-transaction-example.jpg","width":286,"height":41},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/","name":"The Beginner's Guide To PostgreSQL JDBC Transaction","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#primaryimage"},"datePublished":"2016-03-13T13:34:11+00:00","dateModified":"2020-07-10T04:42:24+00:00","description":"In this tutorial, you will learn about PostgreSQL JDBC transaction using JDBC transaction API.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/transaction\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL JDBC","item":"https:\/\/www.postgresqltutorial.com\/postgresql-jdbc\/"},{"@type":"ListItem","position":3,"name":"The Beginner&#8217;s Guide To PostgreSQL JDBC Transaction"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1950"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1950"}],"version-history":[{"count":1,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1950\/revisions"}],"predecessor-version":[{"id":4575,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1950\/revisions\/4575"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1885"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1950"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}