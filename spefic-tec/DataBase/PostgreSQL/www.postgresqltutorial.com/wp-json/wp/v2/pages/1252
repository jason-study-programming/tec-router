{"id":1252,"date":"2015-09-02T07:52:11","date_gmt":"2015-09-02T14:52:11","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1252"},"modified":"2020-04-11T03:53:41","modified_gmt":"2020-04-11T10:53:41","slug":"postgresql-coalesce","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-coalesce\/","title":{"rendered":"PostgreSQL COALESCE"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the PostgreSQL COALESCE function that returns the first non-null argument. You will learn how to apply this function in <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT statement <\/a>to handle null&nbsp;values effectively.<\/p>\n\n\n\n<h2>PostgreSQL COALESCE function syntax<\/h2>\n\n\n\n<p>The syntax of the <code>COALESCE<\/code> function is as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">COALESCE (argument_1, argument_2, \u2026);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>COALESCE<\/code> function accepts an unlimited number of arguments. It returns the first argument that is not null. If all arguments are null, the <code>COALESCE<\/code> function will return null.<\/p>\n\n\n\n<p>The <code>COALESCE<\/code> function evaluates arguments from left to right until it finds the first non-null argument. All the remaining arguments from the first non-null argument are not evaluated.<\/p>\n\n\n\n<p>The <code>COALESCE<\/code> function provides the same functionality&nbsp;as <code>NVL<\/code> or <code>IFNULL<\/code> function provided by SQL-standard. MySQL has <a href=\"http:\/\/www.mysqltutorial.org\/mysql-ifnull\/\" target=\"_blank\" rel=\"noopener noreferrer\">IFNULL function<\/a>, while Oracle provides <code>NVL<\/code> function.<\/p>\n\n\n\n<p>See the following examples:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t<span class=\"hljs-keyword\">COALESCE<\/span> (<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><a href=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-1.jpg\"><img loading=\"lazy\" width=\"92\" height=\"46\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-1.jpg\" alt=\"postgresql COALESCE example 1\" class=\"wp-image-1253\"\/><\/a><\/figure>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t<span class=\"hljs-keyword\">COALESCE<\/span> (<span class=\"hljs-literal\">NULL<\/span>, <span class=\"hljs-number\">2<\/span> , <span class=\"hljs-number\">1<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"91\" height=\"44\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-2.jpg\" alt=\"postgresql COALESCE example 2\" class=\"wp-image-1254\"\/><\/figure>\n\n\n\n<p>We often use the <code>COLAESCE<\/code> function to substitute a default value for null values&nbsp;when we querying the data. For example, we want to display the excerpt&nbsp;from a blog post, if the excerpt&nbsp;is not provided, we can use the first 150 characters of the of the content of the post. To achieve this, we can use the <code>COALESCE<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t<span class=\"hljs-keyword\">COALESCE<\/span> (excerpt, <span class=\"hljs-keyword\">LEFT<\/span>(<span class=\"hljs-keyword\">CONTENT<\/span>, <span class=\"hljs-number\">150<\/span>))\n<span class=\"hljs-keyword\">FROM<\/span>\n\tposts;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>PostgreSQL COALESCE example<\/h2>\n\n\n\n<p>Let&#8217;s take a look at an example of using <code>COALESCE<\/code> function.&nbsp;First, we create a table named items using <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-table\/\">CREATE TABLE statement<\/a> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> items (\n\t<span class=\"hljs-keyword\">ID<\/span> <span class=\"hljs-built_in\">serial<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n\tproduct <span class=\"hljs-built_in\">VARCHAR<\/span> (<span class=\"hljs-number\">100<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n\tprice <span class=\"hljs-built_in\">NUMERIC<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n\tdiscount <span class=\"hljs-built_in\">NUMERIC<\/span>\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>There are four fields in the <code>items<\/code> table:<\/p>\n\n\n\n<ul><li>id: the primary key that identifies the item in the items table.<\/li><li>product: the product name.<\/li><li>price: the price of the product.<\/li><li>discount: the discount of the product.<\/li><\/ul>\n\n\n\n<p>Second, we insert some records into the items table using <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">INSERT statement <\/a>as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> items (product, price, discount)\n<span class=\"hljs-keyword\">VALUES<\/span>\n\t(<span class=\"hljs-string\">'A'<\/span>, <span class=\"hljs-number\">1000<\/span> ,<span class=\"hljs-number\">10<\/span>),\n\t(<span class=\"hljs-string\">'B'<\/span>, <span class=\"hljs-number\">1500<\/span> ,<span class=\"hljs-number\">20<\/span>),\n\t(<span class=\"hljs-string\">'C'<\/span>, <span class=\"hljs-number\">800<\/span> ,<span class=\"hljs-number\">5<\/span>),\n\t(<span class=\"hljs-string\">'D'<\/span>, <span class=\"hljs-number\">500<\/span>, <span class=\"hljs-literal\">NULL<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, we query the net prices of the products using the following formula:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">net_price = price - discount;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tproduct,\n\t(price - discount) <span class=\"hljs-keyword\">AS<\/span> net_price\n<span class=\"hljs-keyword\">FROM<\/span>\n\titems;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><a href=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-3.jpg\"><img loading=\"lazy\" width=\"165\" height=\"103\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-3.jpg\" alt=\"postgresql COALESCE example 3\" class=\"wp-image-1256\"\/><\/a><\/figure>\n\n\n\n<p>If you look at the fourth row, you will notice that the net price of the product <code>D<\/code> is null which seems&nbsp;not correct. The issue is the discount of the product <code>D<\/code> is null, therefore when we take the null value to calculate the net price, PostgreSQL returns null.<\/p>\n\n\n\n<p>The get the right price, we need to assume that if the discount is null, it is zero. Then we can use the <code>COALESCE<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tproduct,\n\t(price - <span class=\"hljs-keyword\">COALESCE<\/span>(discount,<span class=\"hljs-number\">0<\/span>)) <span class=\"hljs-keyword\">AS<\/span> net_price\n<span class=\"hljs-keyword\">FROM<\/span>\n\titems;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><a href=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-substitute-null-values.jpg\"><img loading=\"lazy\" width=\"167\" height=\"101\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-substitute-null-values.jpg\" alt=\"postgresql COALESCE substitute null values\" class=\"wp-image-1257\"\/><\/a><\/figure>\n\n\n\n<p>Now the net price of product <code>D<\/code> is <code>500<\/code> because we use zero instead of null value when we calculated the net price.<\/p>\n\n\n\n<p>Besides using the <code>COALESCE<\/code> function, you can use the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-case\/\">CASE<\/a>&nbsp;expression&nbsp;to handle the null values in this case. See the following query that uses the <code>CASE<\/code>&nbsp;expression&nbsp;to achieve the same result above.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tproduct,\n\t(\n\t\tprice - <span class=\"hljs-keyword\">CASE<\/span>\n\t\t<span class=\"hljs-keyword\">WHEN<\/span> discount <span class=\"hljs-keyword\">IS<\/span> <span class=\"hljs-literal\">NULL<\/span> <span class=\"hljs-keyword\">THEN<\/span>\n\t\t\t<span class=\"hljs-number\">0<\/span>\n\t\t<span class=\"hljs-keyword\">ELSE<\/span>\n\t\t\tdiscount\n\t\t<span class=\"hljs-keyword\">END<\/span>\n\t) <span class=\"hljs-keyword\">AS<\/span> net_price\n<span class=\"hljs-keyword\">FROM<\/span>\n\titems;\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the query above we say if the discount is null then use zero (0) otherwise use discount value to in the expression that calculate the net price.<\/p>\n\n\n\n<p>In terms of performance, <code>COALESCE<\/code> function and CASE expression&nbsp;are the same. We prefer <code>COALESCE<\/code> function than <code>CASE<\/code>&nbsp;expression&nbsp;because <code>COALESCE<\/code> function makes the query shorter and easier to read.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to use the <code>COALESCE<\/code> function to substitute null values in the query.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1252\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-coalesce\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL COALESCE\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1252\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-coalesce\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL COALESCE\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn about the PostgreSQL COALESCE function that returns the first non-null argument. You will learn how to apply this function in SELECT statement to handle null&nbsp;values effectively. PostgreSQL COALESCE function syntax The syntax of the COALESCE function is as follows: The COALESCE function accepts an unlimited number of arguments. [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":84,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL COALESCE<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the PostgreSQL COALESCE function that returns the first non-null argument.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-1.jpg\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-1.jpg\",\"width\":92,\"height\":46,\"caption\":\"postgresql COALESCE example 1\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/\",\"name\":\"PostgreSQL COALESCE\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#primaryimage\"},\"datePublished\":\"2015-09-02T14:52:11+00:00\",\"dateModified\":\"2020-04-11T10:53:41+00:00\",\"description\":\"In this tutorial, you will learn about the PostgreSQL COALESCE function that returns the first non-null argument.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL COALESCE\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL COALESCE","description":"In this tutorial, you will learn about the PostgreSQL COALESCE function that returns the first non-null argument.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-1.jpg","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/postgresql-COALESCE-example-1.jpg","width":92,"height":46,"caption":"postgresql COALESCE example 1"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/","name":"PostgreSQL COALESCE","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#primaryimage"},"datePublished":"2015-09-02T14:52:11+00:00","dateModified":"2020-04-11T10:53:41+00:00","description":"In this tutorial, you will learn about the PostgreSQL COALESCE function that returns the first non-null argument.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-coalesce\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL COALESCE"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1252"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1252"}],"version-history":[{"count":1,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1252\/revisions"}],"predecessor-version":[{"id":4780,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1252\/revisions\/4780"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1252"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}