{"id":5454,"date":"2020-07-23T00:48:44","date_gmt":"2020-07-23T07:48:44","guid":{"rendered":"https:\/\/www.postgresqltutorial.com\/?page_id=5454"},"modified":"2020-07-25T01:59:24","modified_gmt":"2020-07-25T08:59:24","slug":"plpgsql-for-loop","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/","title":{"rendered":"PL\/pgSQL For Loop"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about PL\/pgSQL <code>for<\/code> loop statements to iterate over a range of integers or a result set of a query.<\/p>\n\n\n\n<h2>Using PL\/pgSQL for loop to iterate over a range of integers<\/h2>\n\n\n\n<p>The following illustrates the syntax of the <code>for<\/code>loop statement that loops through a range of integers:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\">[ <span class=\"hljs-symbol\">&lt;&lt;label&gt;&gt;<\/span> ]\n<span class=\"hljs-keyword\">for<\/span> loop_counter <span class=\"hljs-keyword\">in<\/span> [ <span class=\"hljs-keyword\">reverse<\/span> ] <span class=\"hljs-keyword\">from<\/span>.. <span class=\"hljs-keyword\">to<\/span> [ <span class=\"hljs-keyword\">by<\/span> step ] <span class=\"hljs-keyword\">loop<\/span>\n    statements\n<span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span> [ label ];<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<ul><li>First, the <code>for loop<\/code> creates an integer variable <code>loop_counter<\/code> which is accessible inside the loop only. By default, the <code>for loop<\/code> adds the <code>step<\/code> to the <code>loop_counter<\/code> after each iteration. However, when you use the <code>reverse<\/code> option, the <code>for loop<\/code> subtracts the <code>step<\/code> from <code>loop_counter<\/code>.<\/li><li>Second, the <code>from<\/code> and <code>to<\/code> are expressions that specify the lower and upper bound of the range. The for loop evaluates these expressions before entering the loop.<\/li><li>Third, the <code>step<\/code> that follows the <code>by<\/code> keyword specifies the iteration step. It defaults to 1. The <code>for loop<\/code> evaluates this <code>step<\/code> expression once only.<\/li><\/ul>\n\n\n\n<p>The following flowchart illustrates the <code>for loop<\/code> statement:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"255\" height=\"298\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-FOR-loop.png\" alt=\"PL\/pgSQL FOR loop\" class=\"wp-image-1393\"\/><\/figure><\/div>\n\n\n\n<p>The following example uses the <code>for<\/code> loop statement to iterate over five numbers from 1 to 5 and display each of them in each iteration:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span> $$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">begin<\/span>\n   <span class=\"hljs-keyword\">for<\/span> counter <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-number\">1.<\/span><span class=\"hljs-number\">.5<\/span> <span class=\"hljs-keyword\">loop<\/span>\n\t<span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'counter: %'<\/span>, counter;\n   <span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span>;\n<span class=\"hljs-keyword\">end<\/span>; $$<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">NOTICE:  Counter: 1\nNOTICE:  Counter: 2\nNOTICE:  Counter: 3\nNOTICE:  Counter: 4\nNOTICE:  Counter: 5<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example iterates over 5 numbers from 5 to 1 and shows each number in each iteration:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span> $$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">begin<\/span>\n   <span class=\"hljs-keyword\">for<\/span> counter <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-keyword\">reverse<\/span> <span class=\"hljs-number\">5.<\/span><span class=\"hljs-number\">.1<\/span> <span class=\"hljs-keyword\">loop<\/span>\n      <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'counter: %'<\/span>, counter;\n   <span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span>;\n<span class=\"hljs-keyword\">end<\/span>; $$<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">NOTICE:  Counter: 5\nNOTICE:  Counter: 4\nNOTICE:  Counter: 3\nNOTICE:  Counter: 2\nNOTICE:  Counter: 1<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example uses the <code>for loop<\/code> statement to iterate over six numbers from 1 to 6. It adds 2 to the counter after each iteration:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span> $$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">begin<\/span> \n  <span class=\"hljs-keyword\">for<\/span> counter <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-number\">1.<\/span><span class=\"hljs-number\">.6<\/span> <span class=\"hljs-keyword\">by<\/span> <span class=\"hljs-number\">2<\/span> <span class=\"hljs-keyword\">loop<\/span>\n    <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'counter: %'<\/span>, counter;\n  <span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span>;\n<span class=\"hljs-keyword\">end<\/span>; $$<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">NOTICE:  Counter 1\nNOTICE:  Counter 3\nNOTICE:  Counter 5<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Using PL\/pgSQL for loop to iterate over a result set<\/h2>\n\n\n\n<p>The following statement shows how to use the <code>for<\/code> loop statement to iterate over a result set of a query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\">[ <span class=\"hljs-symbol\">&lt;&lt;label&gt;&gt;<\/span> ]\n<span class=\"hljs-keyword\">for<\/span> target <span class=\"hljs-keyword\">in<\/span> query <span class=\"hljs-keyword\">loop<\/span>\n    statements\n<span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span> [ label ];<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following statement uses the <code>for<\/code> loop to display the titles of the top 10 longest films.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span>\n$$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">declare<\/span>\n    f <span class=\"hljs-type\">record<\/span>;\n<span class=\"hljs-keyword\">begin<\/span>\n    <span class=\"hljs-keyword\">for<\/span> f <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-keyword\">select<\/span> title, length \n\t       <span class=\"hljs-keyword\">from<\/span> film \n\t       <span class=\"hljs-keyword\">order<\/span> <span class=\"hljs-keyword\">by<\/span> length <span class=\"hljs-keyword\">desc<\/span>, title\n\t       <span class=\"hljs-keyword\">limit<\/span> <span class=\"hljs-number\">10<\/span> \n    <span class=\"hljs-keyword\">loop<\/span> \n\t<span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'%(% mins)'<\/span>, f.title, f.length;\n    <span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span>;\n<span class=\"hljs-keyword\">end<\/span>;\n$$<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">NOTICE:  Chicago North(185 mins)\nNOTICE:  Control Anthem(185 mins)\nNOTICE:  Darn Forrester(185 mins)\nNOTICE:  Gangs Pride(185 mins)\nNOTICE:  Home Pity(185 mins)\nNOTICE:  Muscle Bright(185 mins)\nNOTICE:  Pond Seattle(185 mins)\nNOTICE:  Soldiers Evolution(185 mins)\nNOTICE:  Sweet Brotherhood(185 mins)\nNOTICE:  Worst Banger(185 mins)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Using PL\/pgSQL for loop to iterate over the result set of a dynamic query<\/h2>\n\n\n\n<p>The following form of the <code>for<\/code> loop statement allows you to execute a dynamic query and iterate over its result set:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\">[ <span class=\"hljs-symbol\">&lt;&lt;label&gt;&gt;<\/span> ]\n<span class=\"hljs-keyword\">for<\/span> <span class=\"hljs-keyword\">row<\/span> <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-keyword\">execute<\/span> query_expression [ <span class=\"hljs-keyword\">using<\/span> query_param [, ... ] ] \n<span class=\"hljs-keyword\">loop<\/span>\n    statements\n<span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span> [ label ];<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<ul><li>The <code>query_expression<\/code> is an SQL statement.<\/li><li>The <code>using<\/code> clause is used to pass parameters to the query.<\/li><\/ul>\n\n\n\n<p>The following block shows how to use the <code>for<\/code> loop statement to loop through a dynamic query. It has two configuration variables:<\/p>\n\n\n\n<ul><li><code>sort_type<\/code>: 1 to sort the films by title, 2 to sort the films by release year.<\/li><li><code>rec_count<\/code>:  is the number of rows to query from the <code>film<\/code> table. We&#8217;ll use it in the <code>using<\/code> clause of the <code>for<\/code> loop.<\/li><\/ul>\n\n\n\n<p>This <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-block-structure\/\">anonymous block<\/a> composes the query based on the <code>sort_type<\/code> variable and uses the for loop to iterate over the row of the result set.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span> $$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">declare<\/span>\n    <span class=\"hljs-comment\">-- sort by 1: title, 2: release year<\/span>\n    sort_type <span class=\"hljs-type\">smallint<\/span> := <span class=\"hljs-number\">1<\/span>; \n\t<span class=\"hljs-comment\">-- return the number of films<\/span>\n\trec_count <span class=\"hljs-type\">int<\/span> := <span class=\"hljs-number\">10<\/span>;\n\t<span class=\"hljs-comment\">-- use to iterate over the film<\/span>\n\trec <span class=\"hljs-type\">record<\/span>;\n\t<span class=\"hljs-comment\">-- dynamic query<\/span>\n    query <span class=\"hljs-type\">text<\/span>;\n<span class=\"hljs-keyword\">begin<\/span>\n\t\t\n\tquery := <span class=\"hljs-string\">'select title, release_year from film '<\/span>;\n\t\n\t<span class=\"hljs-keyword\">if<\/span> sort_type = <span class=\"hljs-number\">1<\/span> <span class=\"hljs-keyword\">then<\/span>\n\t\tquery := query || <span class=\"hljs-string\">'order by title'<\/span>;\n\t<span class=\"hljs-keyword\">elsif<\/span> sort_type = <span class=\"hljs-number\">2<\/span> <span class=\"hljs-keyword\">then<\/span>\n\t  query := query || <span class=\"hljs-string\">'order by release_year'<\/span>;\n\t<span class=\"hljs-keyword\">else<\/span> \n\t   <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-string\">'invalid sort type %s'<\/span>, sort_type;\n\t<span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">if<\/span>;\n\n\tquery := query || <span class=\"hljs-string\">' limit $1'<\/span>;\n\n\t<span class=\"hljs-keyword\">for<\/span> rec <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-keyword\">execute<\/span> query <span class=\"hljs-keyword\">using<\/span> rec_count\n        <span class=\"hljs-keyword\">loop<\/span>\n\t     <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'% - %'<\/span>, rec.release_year, rec.title;\n\t<span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span>;\n<span class=\"hljs-keyword\">end<\/span>;\n$$<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">NOTICE:  2006 - Academy Dinosaur\nNOTICE:  2006 - Ace Goldfinger\nNOTICE:  2006 - Adaptation Holes\nNOTICE:  2006 - Affair Prejudice\nNOTICE:  2006 - African Egg\nNOTICE:  2006 - Agent Truman\nNOTICE:  2006 - Airplane Sierra\nNOTICE:  2006 - Airport Pollock\nNOTICE:  2006 - Alabama Devil\nNOTICE:  2006 - Aladdin Calendar<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you change the <code>sort_type<\/code> to 2, you&#8217;ll get the following output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">NOTICE:  2006 - Grosse Wonderful\nNOTICE:  2006 - Airport Pollock\nNOTICE:  2006 - Bright Encounters\nNOTICE:  2006 - Academy Dinosaur\nNOTICE:  2006 - Ace Goldfinger\nNOTICE:  2006 - Adaptation Holes\nNOTICE:  2006 - Affair Prejudice\nNOTICE:  2006 - African Egg\nNOTICE:  2006 - Agent Truman\nNOTICE:  2006 - Chamber Italian<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned various forms of the PL\/pgSQL for loop statements<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"5454\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL For Loop\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"5454\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL For Loop\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about PL\/pgSQL for loop statements to iterate over a range of integers and a result set of a query.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":788,"menu_order":14,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>An Essential Guide to PL\/pgSQL For Loop By Practical Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about PL\/pgSQL for loop statements to iterate over a range of integers and a result set of a query.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-FOR-loop.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-FOR-loop.png\",\"width\":255,\"height\":298,\"caption\":\"PL\/pgSQL FOR loop\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/\",\"name\":\"An Essential Guide to PL\/pgSQL For Loop By Practical Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#primaryimage\"},\"datePublished\":\"2020-07-23T07:48:44+00:00\",\"dateModified\":\"2020-07-25T08:59:24+00:00\",\"description\":\"In this tutorial, you will learn about PL\/pgSQL for loop statements to iterate over a range of integers and a result set of a query.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PL\/pgSQL\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PL\/pgSQL For Loop\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"An Essential Guide to PL\/pgSQL For Loop By Practical Examples","description":"In this tutorial, you will learn about PL\/pgSQL for loop statements to iterate over a range of integers and a result set of a query.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-FOR-loop.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-FOR-loop.png","width":255,"height":298,"caption":"PL\/pgSQL FOR loop"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/","name":"An Essential Guide to PL\/pgSQL For Loop By Practical Examples","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#primaryimage"},"datePublished":"2020-07-23T07:48:44+00:00","dateModified":"2020-07-25T08:59:24+00:00","description":"In this tutorial, you will learn about PL\/pgSQL for loop statements to iterate over a range of integers and a result set of a query.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-for-loop\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PL\/pgSQL","item":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/"},{"@type":"ListItem","position":3,"name":"PL\/pgSQL For Loop"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5454"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=5454"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5454\/revisions"}],"predecessor-version":[{"id":5537,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5454\/revisions\/5537"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/788"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=5454"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}