{"id":2371,"date":"2016-06-29T23:20:52","date_gmt":"2016-06-30T06:20:52","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2371"},"modified":"2020-07-13T18:12:02","modified_gmt":"2020-07-14T01:12:02","slug":"postgresql-upsert","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-upsert\/","title":{"rendered":"PostgreSQL Upsert Using INSERT ON CONFLICT statement"},"content":{"rendered":"\n<p><strong>Summary<\/strong>:\u00a0in this tutorial, you will learn how to use PostgreSQL upsert feature to insert or update data if the row that is being inserted already exists in the table.<\/p>\n\n\n\n<h2>Introduction to the PostgreSQL upsert<\/h2>\n\n\n\n<p>In relational databases, the term upsert is referred to as merge. The idea is that when you <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">insert a new row into the table<\/a>, PostgreSQL will <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\">update<\/a> the row if it already exists, otherwise, it will insert the new row. That is why we call the action is upsert (the combination of update or insert).<\/p>\n\n\n\n<p>To use the upsert feature in PostgreSQL, you use the <code>INSERT ON CONFLICT<\/code> statement as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> table_name(column_list) \n<span class=\"hljs-keyword\">VALUES<\/span>(value_list)\n<span class=\"hljs-keyword\">ON<\/span> CONFLICT target <span class=\"hljs-keyword\">action<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL added the <code>ON CONFLICT target action<\/code> clause to the <code>INSERT<\/code> statement to support the upsert feature.<\/p>\n\n\n\n<p>In this statement, the <code>target<\/code> can be one of the following:<\/p>\n\n\n\n<ul><li>\u00a0<code>(column_name)<\/code> &#8211; a column name.<\/li><li>\u00a0<code>ON CONSTRAINT constraint_name<\/code> &#8211; where the constraint name could be the name of the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-unique-constraint\/\">UNIQUE constraint<\/a>.<\/li><li>\u00a0<code>WHERE predicate<\/code> \u2013 a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/\">WHERE clause<\/a> with a predicate.<\/li><\/ul>\n\n\n\n<p>The <code>action<\/code> can be one of the following:<\/p>\n\n\n\n<ul><li>&nbsp;<code>DO NOTHING<\/code> \u2013 means do nothing if the row already exists in the table.<\/li><li>&nbsp;<code>DO UPDATE SET column_1 = value_1, .. WHERE condition<\/code> \u2013 update some fields in the table.<\/li><\/ul>\n\n\n\n<p class=\"note\">Notice that the <code>ON CONFLICT<\/code> clause is only available from PostgreSQL 9.5. If you are using an earlier version, you will need a workaround to have the upsert feature.<\/p>\n\n\n\n<p>If you are also working with MySQL, you will find that the upsert feature is similar to the <a href=\"http:\/\/www.mysqltutorial.org\/mysql-insert-or-update-on-duplicate-key-update\/\">insert on duplicate key update statement<\/a> in MySQL.<\/p>\n\n\n\n<h2>PostgreSQL upsert examples<\/h2>\n\n\n\n<p>The following statement <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-table\/\">creates a new table<\/a> called <code>customers<\/code> to demonstrate the PostgreSQL upsert feature.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP<\/span> <span class=\"hljs-keyword\">TABLE<\/span> <span class=\"hljs-keyword\">IF<\/span> <span class=\"hljs-keyword\">EXISTS<\/span> customers;\n\n<span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> customers (\n\tcustomer_id <span class=\"hljs-built_in\">serial<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n\t<span class=\"hljs-keyword\">name<\/span> <span class=\"hljs-built_in\">VARCHAR<\/span> <span class=\"hljs-keyword\">UNIQUE<\/span>,\n\temail <span class=\"hljs-built_in\">VARCHAR<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n\tactive <span class=\"hljs-built_in\">bool<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span> <span class=\"hljs-keyword\">DEFAULT<\/span> <span class=\"hljs-literal\">TRUE<\/span>\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>customers<\/code> table consists of four columns: <code>customer_id<\/code>, <code>name<\/code>, <code>email<\/code>, and <code>active<\/code>. The <code>name<\/code> column has a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-unique-constraint\/\">unique constraint<\/a> to guarantee the uniqueness of customer names.<\/p>\n\n\n\n<p>The following <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">INSERT<\/a> statement inserts some rows into the <code>customers<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> \n    customers (<span class=\"hljs-keyword\">name<\/span>, email)\n<span class=\"hljs-keyword\">VALUES<\/span> \n    (<span class=\"hljs-string\">'IBM'<\/span>, <span class=\"hljs-string\">'contact@ibm.com'<\/span>),\n    (<span class=\"hljs-string\">'Microsoft'<\/span>, <span class=\"hljs-string\">'contact@microsoft.com'<\/span>),\n    (<span class=\"hljs-string\">'Intel'<\/span>, <span class=\"hljs-string\">'contact@intel.com'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"492\" height=\"113\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Upsert-Sample-Table.png\" alt=\"\" class=\"wp-image-4956\"\/><\/figure>\n\n\n\n<p>Suppose Microsoft changes the contact email from <a href=\"mailto:contact@microsoft.com\">contact@microsoft.com<\/a> to <a href=\"mailto:hotline@microft.com\">hotline@microft.com<\/a>, we&nbsp;can update it using the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\">UPDATE<\/a> statement.&nbsp;However, to demonstrate the upsert feature, we use the following <code>INSERT ON CONFLICT<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> customers (<span class=\"hljs-keyword\">NAME<\/span>, email)\n<span class=\"hljs-keyword\">VALUES<\/span>(<span class=\"hljs-string\">'Microsoft'<\/span>,<span class=\"hljs-string\">'hotline@microsoft.com'<\/span>) \n<span class=\"hljs-keyword\">ON<\/span> CONFLICT <span class=\"hljs-keyword\">ON<\/span> <span class=\"hljs-keyword\">CONSTRAINT<\/span> customers_name_key \n<span class=\"hljs-keyword\">DO<\/span> <span class=\"hljs-keyword\">NOTHING<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The statement specified that if the customer name exists in the &nbsp;<code>customers<\/code>&nbsp;table, just ignore it (do nothing).<\/p>\n\n\n\n<p>The following statement is equivalent to the above statement but it uses the <code>name<\/code> column instead of the unique constraint name as the target of the <code>INSERT<\/code> statement.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> customers (<span class=\"hljs-keyword\">name<\/span>, email)\n<span class=\"hljs-keyword\">VALUES<\/span>(<span class=\"hljs-string\">'Microsoft'<\/span>,<span class=\"hljs-string\">'hotline@microsoft.com'<\/span>) \n<span class=\"hljs-keyword\">ON<\/span> CONFLICT (<span class=\"hljs-keyword\">name<\/span>) \n<span class=\"hljs-keyword\">DO<\/span> <span class=\"hljs-keyword\">NOTHING<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Suppose, you want to concatenate the new email with the old email when inserting a customer that already exists, in this case, you use the <code>UPDATE<\/code> clause as the action of the <code>INSERT<\/code> statement as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> customers (<span class=\"hljs-keyword\">name<\/span>, email)\n<span class=\"hljs-keyword\">VALUES<\/span>(<span class=\"hljs-string\">'Microsoft'<\/span>,<span class=\"hljs-string\">'hotline@microsoft.com'<\/span>) \n<span class=\"hljs-keyword\">ON<\/span> CONFLICT (<span class=\"hljs-keyword\">name<\/span>) \n<span class=\"hljs-keyword\">DO<\/span> \n   <span class=\"hljs-keyword\">UPDATE<\/span> <span class=\"hljs-keyword\">SET<\/span> email = EXCLUDED.email || <span class=\"hljs-string\">';'<\/span> || customers.email;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">INSERT 0 1<\/code><\/div><\/pre>\n\n\n<p>The following statement verifies the upsert:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"590\" height=\"118\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Upsert-example.png\" alt=\"\" class=\"wp-image-4958\"\/><\/figure>\n\n\n\n<p>In this tutorial, you have learned about the PostgreSQL upsert feature using the <code>INSERT ON CONFLICT<\/code> statement.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2371\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-upsert\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Upsert Using INSERT ON CONFLICT statement\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2371\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-upsert\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Upsert Using INSERT ON CONFLICT statement\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary:\u00a0in this tutorial, you will learn how to use PostgreSQL upsert feature to insert or update data if the row that is being inserted already exists in the table. Introduction to the PostgreSQL upsert In relational databases, the term upsert is referred to as merge. The idea is that when you insert a new row [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":41,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL Upsert Using INSERT ON CONFLICT statement<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use the PostgreSQL upsert feature to insert or update data if the row that is being inserted already exists in the table.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Upsert-Sample-Table.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Upsert-Sample-Table.png\",\"width\":492,\"height\":113},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/\",\"name\":\"PostgreSQL Upsert Using INSERT ON CONFLICT statement\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#primaryimage\"},\"datePublished\":\"2016-06-30T06:20:52+00:00\",\"dateModified\":\"2020-07-14T01:12:02+00:00\",\"description\":\"This tutorial shows you how to use the PostgreSQL upsert feature to insert or update data if the row that is being inserted already exists in the table.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL Upsert Using INSERT ON CONFLICT statement\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL Upsert Using INSERT ON CONFLICT statement","description":"This tutorial shows you how to use the PostgreSQL upsert feature to insert or update data if the row that is being inserted already exists in the table.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Upsert-Sample-Table.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Upsert-Sample-Table.png","width":492,"height":113},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/","name":"PostgreSQL Upsert Using INSERT ON CONFLICT statement","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#primaryimage"},"datePublished":"2016-06-30T06:20:52+00:00","dateModified":"2020-07-14T01:12:02+00:00","description":"This tutorial shows you how to use the PostgreSQL upsert feature to insert or update data if the row that is being inserted already exists in the table.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-upsert\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL Upsert Using INSERT ON CONFLICT statement"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2371"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2371"}],"version-history":[{"count":3,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2371\/revisions"}],"predecessor-version":[{"id":4959,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2371\/revisions\/4959"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2371"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}