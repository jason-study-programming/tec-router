{"id":5851,"date":"2020-08-04T23:27:48","date_gmt":"2020-08-05T06:27:48","guid":{"rendered":"https:\/\/www.postgresqltutorial.com\/?page_id=5851"},"modified":"2020-08-04T23:34:38","modified_gmt":"2020-08-05T06:34:38","slug":"plpgsql-exit","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/","title":{"rendered":"PL\/pgSQL Exit Statement"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the exit statement and how to use it to terminate a loop or a block.<\/p>\n\n\n\n<h2>Introduction to the PL\/pgSQL Exit statement<\/h2>\n\n\n\n<p>The <code>exit<\/code> statement allows you to terminate a loop including an unconditional <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-loop-statements\/\">loop<\/a>, a <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-while-loop\/\">while loop<\/a>, and a <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-for-loop\/\">for loop<\/a>.<\/p>\n\n\n\n<p>The following shows the syntax of the <code>exit<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><div><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">exit<\/span> <span class=\"hljs-selector-attr\">[label]<\/span> <span class=\"hljs-selector-attr\">[when boolean_expression]<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>label<\/code> is the loop label of the current loop where the <code>exit<\/code> is in or the loop label of the outer loop. Depending on the label, the <code>exit<\/code> statement will terminate the corresponding loop. If you don&#8217;t use the label, the <code>exit<\/code> statement will terminate the current loop.<\/p>\n\n\n\n<p>The <code>when boolean_expression<\/code> clause is used to specify a condition that terminates a loop. The <code>exit<\/code> statement will terminate the loop if the <code>boolean_expression<\/code> evaluates to <code>true<\/code>. <\/p>\n\n\n\n<p>The following statements are equivalent:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-keyword\">exit<\/span> when counter &gt; <span class=\"hljs-number\">10<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-keyword\">if<\/span> counter &gt; <span class=\"hljs-number\">10<\/span> then\n   <span class=\"hljs-keyword\">exit<\/span>;\nend <span class=\"hljs-keyword\">if<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>exit when<\/code> is definitely cleaner and shorter.<\/p>\n\n\n\n<p>In addition to terminating a loop, you can use the <code>exit<\/code> statement to terminate a block specified by the <code>begin...end<\/code> keywords. In this case, the control is passed to the statement after the <code>end<\/code> keyword of the current block:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><div><code class=\"hljs language-css\">&lt;&lt;<span class=\"hljs-selector-tag\">block_label<\/span>&gt;&gt;\n<span class=\"hljs-selector-tag\">BEGIN<\/span>\n    <span class=\"hljs-selector-tag\">--<\/span> <span class=\"hljs-selector-tag\">some<\/span> <span class=\"hljs-selector-tag\">code<\/span>\n    <span class=\"hljs-selector-tag\">EXIT<\/span> <span class=\"hljs-selector-attr\">[block_label]<\/span> <span class=\"hljs-selector-attr\">[WHEN condition]<\/span>;\n    <span class=\"hljs-selector-tag\">--<\/span> <span class=\"hljs-selector-tag\">some<\/span> <span class=\"hljs-selector-tag\">more<\/span> <span class=\"hljs-selector-tag\">code<\/span>\n<span class=\"hljs-selector-tag\">END<\/span> <span class=\"hljs-selector-tag\">block_label<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>PL\/pgSQL Exit examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the PL\/pgSQL <code>exit<\/code> statement.<\/p>\n\n\n\n<h3>1) Using PL\/pgSQL Exit statement to terminate an unconditional loop<\/h3>\n\n\n\n<p>The following example illustrates how to use the <code>exit<\/code> statement in unconditional loops:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-keyword\">do<\/span>\n$$\n<span class=\"hljs-keyword\">declare<\/span> \n   i int = <span class=\"hljs-number\">0<\/span>;\n   j int = <span class=\"hljs-number\">0<\/span>;\nbegin\n  &lt;&lt;outer_loop&gt;&gt;\n  loop \n     i = i + <span class=\"hljs-number\">1<\/span>;\n     <span class=\"hljs-keyword\">exit<\/span> when i &gt; <span class=\"hljs-number\">3<\/span>;\n\t -- inner loop\n\t j = <span class=\"hljs-number\">0<\/span>;\n     &lt;&lt;inner_loop&gt;&gt;\n     loop \n\t\tj = j + <span class=\"hljs-number\">1<\/span>;\n\t\t<span class=\"hljs-keyword\">exit<\/span> when j &gt; <span class=\"hljs-number\">3<\/span>;\n\t\traise notice <span class=\"hljs-string\">'(i,j): (%,%)'<\/span>, i, j;\n\t end loop inner_loop;\n  end loop outer_loop;\nend;\n$$<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"HTTP\" data-shcb-language-slug=\"http\"><div><code class=\"hljs language-http\"><span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (1,1)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (1,2)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (1,3)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (2,1)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (2,2)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (2,3)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (3,1)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (3,2)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (3,3)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTTP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">http<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>This example contains two loops: outer and inner loops.<\/p>\n\n\n\n<p>Since both <code>exit<\/code> statements don&#8217;t use any loop labels, they will terminate the current loop.<\/p>\n\n\n\n<p>The first <code>exit<\/code> statement terminates the outer loop when <code>i<\/code> is greater than <code>3<\/code>. That&#8217;s why you see the value of <code>i<\/code> in the output is <code>1<\/code>, <code>2<\/code>, and <code>3<\/code>.<\/p>\n\n\n\n<p>The second <code>exit<\/code> statement terminates the inner loop when <code>j<\/code> is greater than <code>3<\/code>. It is the reason you see that <code>j<\/code> is <code>1<\/code>, <code>2<\/code>, and <code>3<\/code> for each iteration of the outer loop.<\/p>\n\n\n\n<p>The following example places the label of the outer loop in the second <code>exit<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-keyword\">do<\/span>\n$$\n<span class=\"hljs-keyword\">declare<\/span> \n   i int = <span class=\"hljs-number\">0<\/span>;\n   j int = <span class=\"hljs-number\">0<\/span>;\nbegin\n  &lt;&lt;outer_loop&gt;&gt;\n  loop \n     i = i + <span class=\"hljs-number\">1<\/span>;\n     <span class=\"hljs-keyword\">exit<\/span> when i &gt; <span class=\"hljs-number\">3<\/span>;\n\t -- inner loop\n\t j = <span class=\"hljs-number\">0<\/span>;\n     &lt;&lt;inner_loop&gt;&gt;\n     loop \n\t\tj = j + <span class=\"hljs-number\">1<\/span>;\n\t\t<span class=\"hljs-keyword\">exit<\/span> outer_loop when j &gt; <span class=\"hljs-number\">3<\/span>;\n\t\traise notice <span class=\"hljs-string\">'(i,j): (%,%)'<\/span>, i, j;\n\t end loop inner_loop;\n  end loop outer_loop;\nend;\n$$<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"HTTP\" data-shcb-language-slug=\"http\"><div><code class=\"hljs language-http\"><span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (1,1)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (1,2)\n<span class=\"hljs-attribute\">NOTICE<\/span>:  (i,j): (1,3)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTTP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">http<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the second <code>exit<\/code> statement terminates the outer loop when <code>j<\/code> is greater than 3. <\/p>\n\n\n\n<h3>2) Using the PL\/pgSQL Exit statement to exit a block<\/h3>\n\n\n\n<p>The following example illustrates how to use the <code>exit<\/code> statement to terminate a block:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-keyword\">do<\/span>\n$$\nbegin\n  \n  &lt;&lt;simple_block&gt;&gt;  \n   begin\n  \t <span class=\"hljs-keyword\">exit<\/span> simple_block;\n         -- <span class=\"hljs-keyword\">for<\/span> demo purposes\n\t raise notice <span class=\"hljs-string\">'%'<\/span>, <span class=\"hljs-string\">'unreachable!'<\/span>;\n   end;\n   raise notice <span class=\"hljs-string\">'%'<\/span>, <span class=\"hljs-string\">'End of block'<\/span>;\nend;\n$$<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output<br><\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"HTTP\" data-shcb-language-slug=\"http\"><div><code class=\"hljs language-http\"><span class=\"hljs-attribute\">NOTICE<\/span>:  End of block<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTTP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">http<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the exit statement terminates the <code>simple_block<\/code> immediately:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-keyword\">exit<\/span> simple_block;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This statement will never be reached:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">raise notice <span class=\"hljs-string\">'%'<\/span>, <span class=\"hljs-string\">'unreachable!'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>Use <code>exit<\/code> statement to terminate a loop including an unconditional loop, <code>while<\/code> loop, and <code>for<\/code> loop.<\/li><li>Also use the <code>exit<\/code> statement to exit a block.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"5851\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Exit Statement\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"5851\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Exit Statement\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the PL\/pgSQL exit statement and how to use it to terminate a loop or a block.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":788,"menu_order":15,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PL\/pgSQL EXIT Statement: Terminating a Loop or a Block<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the PL\/pgSQL exit statement and how to use it to terminate a loop or a block.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/\",\"name\":\"PL\/pgSQL EXIT Statement: Terminating a Loop or a Block\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"datePublished\":\"2020-08-05T06:27:48+00:00\",\"dateModified\":\"2020-08-05T06:34:38+00:00\",\"description\":\"In this tutorial, you will learn about the PL\/pgSQL exit statement and how to use it to terminate a loop or a block.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PL\/pgSQL\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PL\/pgSQL Exit Statement\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PL\/pgSQL EXIT Statement: Terminating a Loop or a Block","description":"In this tutorial, you will learn about the PL\/pgSQL exit statement and how to use it to terminate a loop or a block.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/","name":"PL\/pgSQL EXIT Statement: Terminating a Loop or a Block","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"datePublished":"2020-08-05T06:27:48+00:00","dateModified":"2020-08-05T06:34:38+00:00","description":"In this tutorial, you will learn about the PL\/pgSQL exit statement and how to use it to terminate a loop or a block.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-exit\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PL\/pgSQL","item":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/"},{"@type":"ListItem","position":3,"name":"PL\/pgSQL Exit Statement"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5851"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=5851"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5851\/revisions"}],"predecessor-version":[{"id":5859,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5851\/revisions\/5859"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/788"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=5851"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}