{"id":485,"date":"2013-05-29T19:56:10","date_gmt":"2013-05-30T02:56:10","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=485"},"modified":"2020-04-11T03:53:52","modified_gmt":"2020-04-11T10:53:52","slug":"postgresql-subquery","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-subquery\/","title":{"rendered":"PostgreSQL Subquery"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the <strong>PostgreSQL subquery<\/strong> that allows you to construct complex queries.<\/p>\n\n\n\n<h2>Introduction to PostgreSQL subquery<\/h2>\n\n\n\n<p>Let&#8217;s start with a simple example.<\/p>\n\n\n\n<p>Suppose we want to find the films whose rental rate is higher than the average rental rate. We can do it in two steps:<\/p>\n\n\n\n<ul><li>Find the average rental rate by using the <a title=\"PostgreSQL SELECT\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT statement<\/a> and average function ( <code>AVG<\/code>).<\/li><li>Use the result of the first query in the second <code>SELECT<\/code> statement to find the films that we want.<\/li><\/ul>\n\n\n\n<p>The following query gets the average rental rate:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t<span class=\"hljs-keyword\">AVG<\/span> (rental_rate)\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"63\" height=\"43\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-AVG.png\" alt=\"SELECT AVG\" class=\"wp-image-487\"\/><\/figure>\n\n\n\n<p>The average rental rate is 2.98<\/p>\n\n\n\n<p>Now, we can get films whose rental rate is higher than the average rental rate:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfilm_id,\n\ttitle,\n\trental_rate\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm\n<span class=\"hljs-keyword\">WHERE<\/span>\n\trental_rate &gt; <span class=\"hljs-number\">2.98<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"315\" height=\"181\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-film-whose-rental-rate-is-higher-than-average.png\" alt=\"SELECT film whose rental rate is higher than average\" class=\"wp-image-488\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-film-whose-rental-rate-is-higher-than-average.png 315w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-film-whose-rental-rate-is-higher-than-average-300x172.png 300w\" sizes=\"(max-width: 315px) 100vw, 315px\" \/><\/figure>\n\n\n\n<p>The code is not so elegant, which requires two steps. We want a way to pass the result of the first query to the second query in one query. The solution is to use a subquery.<\/p>\n\n\n\n<p>A subquery is a query nested inside another query such as <code>SELECT, INSERT, DELETE<\/code> and <code>UPDATE<\/code>. In this tutorial, we are focusing on the <code>SELECT<\/code> statement only.<\/p>\n\n\n\n<p>To construct a subquery, we put the second query in brackets and use it in the <a title=\"PostgreSQL WHERE\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/\">WHERE clause<\/a> as an expression:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfilm_id,\n\ttitle,\n\trental_rate\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm\n<span class=\"hljs-keyword\">WHERE<\/span>\n\trental_rate &gt; (\n\t\t<span class=\"hljs-keyword\">SELECT<\/span>\n\t\t\t<span class=\"hljs-keyword\">AVG<\/span> (rental_rate)\n\t\t<span class=\"hljs-keyword\">FROM<\/span>\n\t\t\tfilm\n\t);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The query inside the brackets is called a subquery or an inner query. The query that contains the subquery is known as an outer query.<\/p>\n\n\n\n<p>PostgreSQL executes the query that contains a subquery in the following sequence:<\/p>\n\n\n\n<ul><li>First, executes the subquery.<\/li><li>Second, gets the result and passes it to the outer query.<\/li><li>Third, executes the outer query.<\/li><\/ul>\n\n\n\n<h2>PostgreSQL subquery with IN operator<\/h2>\n\n\n\n<p>A subquery can return zero or more rows. To use this subquery, you use the <a title=\"PostgreSQL IN\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-in\/\">IN <\/a>operator in the <code>WHERE<\/code> clause.<\/p>\n\n\n\n<p>For example, to get films that have the returned date between <code>2005-05-29<\/code> and <code>2005-05-30<\/code>, you use the following query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tinventory.film_id\n<span class=\"hljs-keyword\">FROM<\/span>\n\trental\n<span class=\"hljs-keyword\">INNER<\/span> <span class=\"hljs-keyword\">JOIN<\/span> inventory <span class=\"hljs-keyword\">ON<\/span> inventory.inventory_id = rental.inventory_id\n<span class=\"hljs-keyword\">WHERE<\/span>\n\treturn_date <span class=\"hljs-keyword\">BETWEEN<\/span> <span class=\"hljs-string\">'2005-05-29'<\/span>\n<span class=\"hljs-keyword\">AND<\/span> <span class=\"hljs-string\">'2005-05-30'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"84\" height=\"179\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-films-between.png\" alt=\"SELECT films between\" class=\"wp-image-489\"\/><\/figure>\n\n\n\n<p>It returns multiple rows so we can use this query as a subquery in the <code>WHERE<\/code> clause of a query as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfilm_id,\n\ttitle\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tfilm_id <span class=\"hljs-keyword\">IN<\/span> (\n\t\t<span class=\"hljs-keyword\">SELECT<\/span>\n\t\t\tinventory.film_id\n\t\t<span class=\"hljs-keyword\">FROM<\/span>\n\t\t\trental\n\t\t<span class=\"hljs-keyword\">INNER<\/span> <span class=\"hljs-keyword\">JOIN<\/span> inventory <span class=\"hljs-keyword\">ON<\/span> inventory.inventory_id = rental.inventory_id\n\t\t<span class=\"hljs-keyword\">WHERE<\/span>\n\t\t\treturn_date <span class=\"hljs-keyword\">BETWEEN<\/span> <span class=\"hljs-string\">'2005-05-29'<\/span>\n\t\t<span class=\"hljs-keyword\">AND<\/span> <span class=\"hljs-string\">'2005-05-30'<\/span>\n\t);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"230\" height=\"203\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/PostgreSQL-Subquery-with-IN.png\" alt=\"PostgreSQL Subquery with IN\" class=\"wp-image-491\"\/><\/figure>\n\n\n\n<h2>PostgreSQL subquery with EXISTS operator<\/h2>\n\n\n\n<p>The following expression illustrates how to use a subquery with <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-exists\/\">EXISTS<\/a><\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">EXISTS subquery<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>A subquery can be an input of the <code>EXISTS<\/code> operator. If the subquery returns any row, the <code>EXISTS<\/code> operator returns true. If the subquery returns no row, the result of <code>EXISTS<\/code> operator is false.<\/p>\n\n\n\n<p>The <code>EXISTS<\/code> operator only cares about the number of rows returned from the subquery, not the content of the rows, therefore, the common coding convention of <code>EXISTS<\/code> operator is as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">EXISTS (<span class=\"hljs-keyword\">SELECT<\/span> <span class=\"hljs-number\">1<\/span> <span class=\"hljs-keyword\">FROM<\/span> tbl <span class=\"hljs-keyword\">WHERE<\/span> condition);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>See the following query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\t<span class=\"hljs-keyword\">EXISTS<\/span> (\n\t\t<span class=\"hljs-keyword\">SELECT<\/span>\n\t\t\t<span class=\"hljs-number\">1<\/span>\n\t\t<span class=\"hljs-keyword\">FROM<\/span>\n\t\t\tpayment\n\t\t<span class=\"hljs-keyword\">WHERE<\/span>\n\t\t\tpayment.customer_id = customer.customer_id\n\t);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"211\" height=\"201\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/PostgreSQL-Subquery-with-EXISTS.png\" alt=\"PostgreSQL Subquery with EXISTS\" class=\"wp-image-492\"\/><\/figure>\n\n\n\n<p>The query works like an <a title=\"PostgreSQL INNER JOIN\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-inner-join\/\">inner join<\/a> on the <code>customer_id<\/code> column. However, it returns at most one row for each row in the <code>customer<\/code> table even though there are some corresponding rows in the <code>payment<\/code> table.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to use the PostgreSQL subquery to construct complex queries.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"485\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-subquery\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Subquery\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"485\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-subquery\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Subquery\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn how to use the PostgreSQL subquery that allows you to construct complex queries. Introduction to PostgreSQL subquery Let&#8217;s start with a simple example. Suppose we want to find the films whose rental rate is higher than the average rental rate. We can do it in two steps: Find [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":29,"comment_status":"open","ping_status":"open","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL Subquery<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use the PostgreSQL subquery, which is a query nested inside another query, to form a very useful query.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-AVG.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-AVG.png\",\"width\":63,\"height\":43,\"caption\":\"SELECT AVG\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/\",\"name\":\"PostgreSQL Subquery\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#primaryimage\"},\"datePublished\":\"2013-05-30T02:56:10+00:00\",\"dateModified\":\"2020-04-11T10:53:52+00:00\",\"description\":\"This tutorial shows you how to use the PostgreSQL subquery, which is a query nested inside another query, to form a very useful query.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL Subquery\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL Subquery","description":"This tutorial shows you how to use the PostgreSQL subquery, which is a query nested inside another query, to form a very useful query.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-AVG.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/SELECT-AVG.png","width":63,"height":43,"caption":"SELECT AVG"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/","name":"PostgreSQL Subquery","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#primaryimage"},"datePublished":"2013-05-30T02:56:10+00:00","dateModified":"2020-04-11T10:53:52+00:00","description":"This tutorial shows you how to use the PostgreSQL subquery, which is a query nested inside another query, to form a very useful query.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL Subquery"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/485"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=485"}],"version-history":[{"count":1,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/485\/revisions"}],"predecessor-version":[{"id":4741,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/485\/revisions\/4741"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=485"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}