{"id":1986,"date":"2016-06-11T18:41:15","date_gmt":"2016-06-12T01:41:15","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1986"},"modified":"2022-02-07T07:35:30","modified_gmt":"2022-02-07T14:35:30","slug":"connect","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/","title":{"rendered":"PostgreSQL PHP: Connect to PostgreSQL Database Using PDO"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to setup a simple project structure and connect to the PostgreSQL database using PHP PDO API.<\/p>\n\n\n\n<h2>Enable&nbsp;PDO_PGSQL driver<\/h2>\n\n\n\n<p>Most PHP distributions include the PostgreSQL extension <code>PDO_PGSQL<\/code> by default so you don&#8217;t need to do any further configuration in PHP. <\/p>\n\n\n\n<p>However, if this is not the case, you can enable the extension by editing the <code>php.ini<\/code> file to uncomment the following line:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">;extension=php_pdo_pgsql.dll<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To uncomment the line, you remove the semicolon (;) at the beginning of the line and restart the webserver.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">extension=php_pdo_pgsql.dll<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Create a PHP project structure with Composer<\/h2>\n\n\n\n<p>The\u00a0<a href=\"http:\/\/Composer\">Composer<\/a> is a tool for managing dependency that allows you to declare the PHP library in a project and manage the update automatically.<\/p>\n\n\n\n<p>We will use the Composer to set up the project structure of all the projects that we will be working on.<\/p>\n\n\n\n<p>First, create the&nbsp;&nbsp;<code>postgresqlphpconnect<\/code> folder in the webroot folder to store the project files.<\/p>\n\n\n\n<p>Next, create the&nbsp;<code>app<\/code> folder and a new <code>composer.json<\/code> file in the &nbsp;<code>postgresqlphpconnect<\/code> folder with the following content:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">{\n    \"autoload\": {\n        \"psr-4\": {\n            \"PostgreSQLTutorial\\\\\": \"app\/\"\n        }\n    }\n}<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It means that every class that you create in the <code>app<\/code> folder will map to the <code>PostgreSQLTutorial<\/code> namespace.<\/p>\n\n\n\n<p>Then, go to the window terminal, navigate to the \u00a0<code>postgresqlphpconnect<\/code> folder, and type the following command:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">&gt;composer update<\/code><\/div><\/pre>\n\n\n<p>This command instructs the Composer to download the declared libraries in the <code>composer.json<\/code> file and generate an autoload file. <\/p>\n\n\n\n<p>The command will also place all third-party libraries in the newly created <code>vendor<\/code> folder. Because we didn&#8217;t declare\u00a0any library in the <code>composer.json<\/code> file, it just generates the autoload file.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">Loading composer repositories <span class=\"hljs-keyword\">with<\/span> package information\nUpdating dependencies (including <span class=\"hljs-built_in\">require<\/span>-dev)\nNothing to install or update\nGenerating autoload files<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>After that, create the <code>index.php<\/code>\u00a0file in the\u00a0\u00a0<code>postgresqlphpconnect<\/code> folder.<\/p>\n\n\n\n<p>Finally, create two more files in the <code>app<\/code> folder: <code>Connection.php<\/code> and <code>database.ini<\/code>.<\/p>\n\n\n\n<p>The project structure will look like the following picture:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"223\" height=\"186\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-Connect.png\" alt=\"PostgreSQL PHP Connect\" class=\"wp-image-1987\"\/><\/figure>\n\n\n\n<h2>Connect to the PostgreSQL database<\/h2>\n\n\n\n<p>First, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-database\/\">create a new database<\/a> named <code>stocks<\/code> for the demonstration.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">DATABASE<\/span> stocks;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Next, use the <code>database.ini<\/code> file to store the PostgreSQL database parameters as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">host=localhost\t\nport=5432\ndatabase=stocks\nuser=postgres\npassword=postgres<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Then, create a new class called<code>Connection<\/code> in the <code>Connection.php<\/code> file.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">namespace<\/span> <span class=\"hljs-title\">PostgreSQLTutorial<\/span>;\n\n<span class=\"hljs-comment\">\/**\n * Represent the Connection\n *\/<\/span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Connection<\/span> <\/span>{\n\n    <span class=\"hljs-comment\">\/**\n     * Connection\n     * <span class=\"hljs-doctag\">@var<\/span> type \n     *\/<\/span>\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">static<\/span> $conn;\n\n    <span class=\"hljs-comment\">\/**\n     * Connect to the database and return an instance of \\PDO object\n     * <span class=\"hljs-doctag\">@return<\/span> \\PDO\n     * <span class=\"hljs-doctag\">@throws<\/span> \\Exception\n     *\/<\/span>\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">connect<\/span><span class=\"hljs-params\">()<\/span> <\/span>{\n\n        <span class=\"hljs-comment\">\/\/ read parameters in the ini configuration file<\/span>\n        $params = parse_ini_file(<span class=\"hljs-string\">'database.ini'<\/span>);\n        <span class=\"hljs-keyword\">if<\/span> ($params === <span class=\"hljs-keyword\">false<\/span>) {\n            <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> \\<span class=\"hljs-keyword\">Exception<\/span>(<span class=\"hljs-string\">\"Error reading database configuration file\"<\/span>);\n        }\n        <span class=\"hljs-comment\">\/\/ connect to the postgresql database<\/span>\n        $conStr = sprintf(<span class=\"hljs-string\">\"pgsql:host=%s;port=%d;dbname=%s;user=%s;password=%s\"<\/span>, \n                $params[<span class=\"hljs-string\">'host'<\/span>], \n                $params[<span class=\"hljs-string\">'port'<\/span>], \n                $params[<span class=\"hljs-string\">'database'<\/span>], \n                $params[<span class=\"hljs-string\">'user'<\/span>], \n                $params[<span class=\"hljs-string\">'password'<\/span>]);\n\n        $pdo = <span class=\"hljs-keyword\">new<\/span> \\PDO($conStr);\n        $pdo-&gt;setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n\n        <span class=\"hljs-keyword\">return<\/span> $pdo;\n    }\n\n    <span class=\"hljs-comment\">\/**\n     * return an instance of the Connection object\n     * <span class=\"hljs-doctag\">@return<\/span> type\n     *\/<\/span>\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">static<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">get<\/span><span class=\"hljs-params\">()<\/span> <\/span>{\n        <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">null<\/span> === <span class=\"hljs-keyword\">static<\/span>::$conn) {\n            <span class=\"hljs-keyword\">static<\/span>::$conn = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">static<\/span>();\n        }\n\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">static<\/span>::$conn;\n    }\n\n    <span class=\"hljs-keyword\">protected<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">()<\/span> <\/span>{\n        \n    }\n\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__clone<\/span><span class=\"hljs-params\">()<\/span> <\/span>{\n        \n    }\n\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__wakeup<\/span><span class=\"hljs-params\">()<\/span> <\/span>{\n        \n    }\n\n}<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>The <code>Connection<\/code> class is a singleton class. It means that you can create only one instance for the class. If the instance already exists and you try to create a new one, the class will return the existing reference.<\/li><li>To connect to a\u00a0PostgreSQL database, you need to create a new instance of the PDO class. In the <code>connect()<\/code> method, we read the database configuration parameters in the <code>database.ini<\/code> file, construct a connection string and pass it to the <code>PDO<\/code> constructor.<\/li><\/ul>\n\n\n\n<p>After that,&nbsp;place the following code in the <code>index.php<\/code> file.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'vendor\/autoload.php'<\/span>;\n\n<span class=\"hljs-keyword\">use<\/span> <span class=\"hljs-title\">PostgreSQLTutorial<\/span>\\<span class=\"hljs-title\">Connection<\/span> <span class=\"hljs-title\">as<\/span> <span class=\"hljs-title\">Connection<\/span>;\n\n<span class=\"hljs-keyword\">try<\/span> {\n    Connection::get()-&gt;connect();\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'A connection to the PostgreSQL database sever has been established successfully.'<\/span>;\n} <span class=\"hljs-keyword\">catch<\/span> (\\PDOException $e) {\n    <span class=\"hljs-keyword\">echo<\/span> $e-&gt;getMessage();\n}<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PHP throws a <code>\\PDOException<\/code> if there is an exception occurs when connecting to the PostgreSQL database server, therefore, you need to place the code of creating a new <code>PDO<\/code> object inside the \u00a0<code>try...catch<\/code> block to handle the exception.<\/p>\n\n\n\n<p>Run the following composer command to update the autoload files:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">&gt;composer dump-autoload -o\nGenerating optimized autoload files<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Finally, launch the <code>index.php<\/code> file from the web browser to test it.<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">A connection to the PostgreSQL database sever has been established successfully.<\/code><\/div><\/pre>\n\n\n<p>If you want to see the exception that may occur, you can change the parameters in the <code>database.ini<\/code> file to an invalid one and test it.<\/p>\n\n\n\n<p>The following is the error message when the password is invalid.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><div><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">SQLSTATE<\/span><span class=\"hljs-selector-attr\">[08006]<\/span> <span class=\"hljs-selector-attr\">[7]<\/span> <span class=\"hljs-selector-tag\">FATAL<\/span>: <span class=\"hljs-selector-tag\">password<\/span> <span class=\"hljs-selector-tag\">authentication<\/span> <span class=\"hljs-selector-tag\">failed<\/span> <span class=\"hljs-selector-tag\">for<\/span> <span class=\"hljs-selector-tag\">user<\/span> \"<span class=\"hljs-selector-tag\">postgres<\/span>\"<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And the following is the error message when the database is invalid.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">SQLSTATE[08006] [7] FATAL: database \"stockss\" does not exist<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned how to connect to the PostgreSQL database from a PHP application using the PDO API. We will reuse the <code>Connection<\/code> class in the subsequent tutorials.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1986\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL PHP: Connect to PostgreSQL Database Using PDO\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1986\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL PHP: Connect to PostgreSQL Database Using PDO\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to setup a simple project structure and connect to the PostgreSQL database using PHP PDO API<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1980,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL PHP: Connect to PostgreSQL Database Using PDO<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-Connect.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-Connect.png\",\"width\":223,\"height\":186},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/\",\"name\":\"PostgreSQL PHP: Connect to PostgreSQL Database Using PDO\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#primaryimage\"},\"datePublished\":\"2016-06-12T01:41:15+00:00\",\"dateModified\":\"2022-02-07T14:35:30+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PHP\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL PHP: Connect to PostgreSQL Database Using PDO\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL PHP: Connect to PostgreSQL Database Using PDO","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-Connect.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-Connect.png","width":223,"height":186},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/","name":"PostgreSQL PHP: Connect to PostgreSQL Database Using PDO","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#primaryimage"},"datePublished":"2016-06-12T01:41:15+00:00","dateModified":"2022-02-07T14:35:30+00:00","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/connect\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PHP","item":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL PHP: Connect to PostgreSQL Database Using PDO"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1986"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1986"}],"version-history":[{"count":2,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1986\/revisions"}],"predecessor-version":[{"id":5308,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1986\/revisions\/5308"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1980"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1986"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}