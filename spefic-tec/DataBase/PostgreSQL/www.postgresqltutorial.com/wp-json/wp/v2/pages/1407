{"id":1407,"date":"2015-09-19T21:17:53","date_gmt":"2015-09-20T04:17:53","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1407"},"modified":"2020-07-24T01:39:24","modified_gmt":"2020-07-24T08:39:24","slug":"plpgsql-cursor","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/","title":{"rendered":"PL\/pgSQL Cursor"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the PL\/pgSQL Cursors and how to use them to process a result set, row by row.<\/p>\n\n\n\n<p>A PL\/pgSQL cursor allows you to encapsulate a query and process each individual row at a time. <\/p>\n\n\n\n<p>Typically, you use cursors when you want to divide a large result set into parts and process each part individually. If you process it at once, you may have a memory overflow error.<\/p>\n\n\n\n<p>On top of that, you can <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-function\/\">develop a function<\/a> that returns a reference to a cursor. This is an effective way to return a large result set from a function. The caller of the function can process the result set based on the cursor reference.<\/p>\n\n\n\n<p>The following diagram illustrates how to use a cursor in PostgreSQL:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"692\" height=\"268\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-cursor.png\" alt=\"PL\/pgSQL Cursor\" class=\"wp-image-1409\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-cursor.png 692w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-cursor-300x116.png 300w\" sizes=\"(max-width: 692px) 100vw, 692px\" \/><\/figure><\/div>\n\n\n\n<ul><li>First, declare a cursor.<\/li><li>Next, open the cursor.<\/li><li>Then, fetch rows from the result set into a target.<\/li><li>After that, check if there is more row left to fetch. If yes, go to step 3, otherwise, go to step 5.<\/li><li>Finally, close the cursor.<\/li><\/ul>\n\n\n\n<p>We will examine each step in more detail in the following sections.<\/p>\n\n\n\n<h2>Declaring cursors<\/h2>\n\n\n\n<p>To access to a cursor, you need to declare a cursor <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-variables\/\">variable<\/a> in the <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-block-structure\/\">declaration section of a block. <\/a>PostgreSQL provides you with a special type called <code>REFCURSOR<\/code> to declare a cursor variable.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">declare<\/span> my_cursor <span class=\"hljs-type\">refcursor<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>You can also declare a cursor that bounds to a query by using the following syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">cursor_name [ [no] scroll ] cursor [( name datatype, name data type, ...)] for query;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>First, you specify a variable&nbsp;name for the cursor.<\/p>\n\n\n\n<p>Next, you specify whether the cursor can be scrolled backward using the <code>SCROLL<\/code>. If you use <code>NO SCROLL<\/code>, the cursor cannot be scrolled backward.<\/p>\n\n\n\n<p>Then, you put the <code>CURSOR<\/code> keyword followed by a list of comma-separated arguments ( <code>name<\/code> <code>datatype<\/code>) that defines parameters for the query. These arguments will be substituted by values when the cursor is opened.<\/p>\n\n\n\n<p>After that, you specify a query following the <code>FOR<\/code> keyword. You can use any valid <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT statement<\/a> here.<\/p>\n\n\n\n<p>The following example illustrates how to declare cursors:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">declare<\/span>\n    cur_films  <span class=\"hljs-keyword\">cursor<\/span> <span class=\"hljs-keyword\">for<\/span> \n\t\t<span class=\"hljs-keyword\">select<\/span> * \n\t\t<span class=\"hljs-keyword\">from<\/span> film;\n    cur_films2 <span class=\"hljs-keyword\">cursor<\/span> (year <span class=\"hljs-type\">integer<\/span>) <span class=\"hljs-keyword\">for<\/span> \n\t\t<span class=\"hljs-keyword\">select<\/span> * \n\t\t<span class=\"hljs-keyword\">from<\/span> film \n\t\t<span class=\"hljs-keyword\">where<\/span> release_year = year;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>cur_films<\/code> is a cursor that encapsulates all rows in the <code>film<\/code> table.<\/p>\n\n\n\n<p>The <code>cur_films2<\/code> is a cursor that encapsulates film with a particular release year in the <code>film<\/code> table.<\/p>\n\n\n\n<h2>Opening cursors<\/h2>\n\n\n\n<p>Cursors must be opened before they can be used to query rows. PostgreSQL provides the syntax for opening an unbound and bound cursor.<\/p>\n\n\n\n<h3>Opening unbound cursors<\/h3>\n\n\n\n<p>You open an unbound cursor using the following syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">OPEN unbound_cursor_variable [ [ NO ] SCROLL ] FOR query;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because the unbound cursor variable is not bounded to any query when we declared it, we have to specify the query when we open it. See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">open<\/span> my_cursor <span class=\"hljs-keyword\">for<\/span> \n\t<span class=\"hljs-keyword\">select<\/span> * <span class=\"hljs-keyword\">from<\/span> city \n\t<span class=\"hljs-keyword\">where<\/span> country = p_country;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL allows you to open a cursor and bound it to a dynamic query. Here is the syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">open<\/span> unbound_cursor_variable[ [ <span class=\"hljs-keyword\">no<\/span> ] scroll ] \n<span class=\"hljs-keyword\">for<\/span> <span class=\"hljs-keyword\">execute<\/span> query_string [<span class=\"hljs-keyword\">using<\/span> expression [, ... ] ];<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the following example, we build a dynamic query that sorts rows based on a <code>sort_field<\/code> parameter and open the cursor that executes the dynamic query.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\">query := <span class=\"hljs-string\">'select * from city order by $1'<\/span>;\n\n<span class=\"hljs-keyword\">open<\/span> cur_city <span class=\"hljs-keyword\">for<\/span> <span class=\"hljs-keyword\">execute<\/span> query <span class=\"hljs-keyword\">using<\/span> sort_field;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Opening bound cursors<\/h3>\n\n\n\n<p>Because a bound cursor already bounds to a query when we declared it, so when we open it, we just need to pass the arguments to the query if necessary.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">open cursor_variable[ (name:=value,name:=value,...)];<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the following example, we open bound cursors <code>cur_films<\/code> and <code>cur_films2<\/code> that we declared above:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">open cur_films;\nopen cur_films2(year:=2005);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Using cursors<\/h2>\n\n\n\n<p>After opening a cursor, we can manipulate it using <code>FETCH<\/code>, <code>MOVE<\/code>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\"> UPDATE<\/a>, or <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-delete\/\">DELETE<\/a> statement.<\/p>\n\n\n\n<h3>Fetching the next row<\/h3>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">fetch [ direction { from | in } ] cursor_variable \ninto target_variable;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>FETCH<\/code> statement gets the next row from the cursor and assigns it a <code>target_variable<\/code>, which could be a record, a row variable, or a comma-separated list of variables. If no more row found, the <code>target_variable<\/code> is set to <code>NULL<\/code>(s).<\/p>\n\n\n\n<p>By default, a cursor gets the next row if you don&#8217;t specify the direction explicitly. The following is valid for the&nbsp; cursor:<\/p>\n\n\n\n<ul><li>NEXT<\/li><li>LAST<\/li><li>PRIOR<\/li><li>FIRST<\/li><li>ABSOLUTE count<\/li><li>RELATIVE count<\/li><li>FORWARD<\/li><li>BACKWARD<\/li><\/ul>\n\n\n\n<p>Note that <code>FORWARD<\/code> and <code>BACKWARD<\/code> directions are only for cursors declared with <code>SCROLL<\/code> option.<\/p>\n\n\n\n<p>See the following examples of fetching cursors.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">fetch cur_films into row_film;\nfetch last from row_film into title, release_year;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Moving the cursor<\/h3>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">move [ direction { from | in } ] cursor_variable;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you want to move the cursor only without retrieving any row, you use the <code>MOVE<\/code> statement. The direction accepts the same value as the <code>FETCH<\/code> statement.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">move cur_films2;\nmove last from cur_films;\nmove relative -1 from cur_films;\nmove forward 3 from cur_films;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Deleting or updating the row<\/h3>\n\n\n\n<p>Once a cursor is positioned, we can delete or update row identifying by the cursor using <code>DELETE WHERE CURRENT OF<\/code> or <code>UPDATE WHERE CURRENT OF<\/code> statement as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">update<\/span> table_name \n<span class=\"hljs-keyword\">set<\/span> <span class=\"hljs-keyword\">column<\/span> = <span class=\"hljs-keyword\">value<\/span>, ... \n<span class=\"hljs-keyword\">where<\/span> <span class=\"hljs-keyword\">current<\/span> <span class=\"hljs-keyword\">of<\/span> cursor_variable;\n\n<span class=\"hljs-keyword\">delete<\/span> <span class=\"hljs-keyword\">from<\/span> table_name \n<span class=\"hljs-keyword\">where<\/span> <span class=\"hljs-keyword\">current<\/span> <span class=\"hljs-keyword\">of<\/span> cursor_variable;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>See the following example.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">update<\/span> film \n<span class=\"hljs-keyword\">set<\/span> release_year = p_year \n<span class=\"hljs-keyword\">where<\/span> <span class=\"hljs-keyword\">current<\/span> <span class=\"hljs-keyword\">of<\/span> cur_films;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Closing cursors<\/h2>\n\n\n\n<p>To close an opening cursor, we use <code>CLOSE<\/code> statement as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">close cursor_variable;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>CLOSE<\/code> statement releases resources or frees up cursor variable to allow it to be opened again using <code>OPEN<\/code> statement.<\/p>\n\n\n\n<h2>PL\/pgSQL cursors &#8211; putting it all together<\/h2>\n\n\n\n<p>The following <code>get_film_titles(integer)<\/code> function accepts an argument that represents the release year of a film. Inside the function, we query all films whose release year equals to the released year passed to the function. We use the cursor to loop through the rows and concatenate the title and release year of film that has the title contains the <code>ful&nbsp;<\/code>word.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">create<\/span> <span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">replace<\/span> <span class=\"hljs-keyword\">function<\/span> get_film_titles(p_year <span class=\"hljs-built_in\">integer<\/span>)\n   <span class=\"hljs-keyword\">returns<\/span> <span class=\"hljs-built_in\">text<\/span> <span class=\"hljs-keyword\">as<\/span> $$\n<span class=\"hljs-keyword\">declare<\/span> \n\t titles <span class=\"hljs-built_in\">text<\/span> <span class=\"hljs-keyword\">default<\/span> <span class=\"hljs-string\">''<\/span>;\n\t rec_film   record;\n\t cur_films cursor(p_year integer) \n\t\t for <span class=\"hljs-keyword\">select<\/span> title, release_year\n\t\t <span class=\"hljs-keyword\">from<\/span> film\n\t\t <span class=\"hljs-keyword\">where<\/span> release_year = p_year;\n<span class=\"hljs-keyword\">begin<\/span>\n   <span class=\"hljs-comment\">-- open the cursor<\/span>\n   <span class=\"hljs-keyword\">open<\/span> cur_films(p_year);\n\t\n   loop\n    <span class=\"hljs-comment\">-- fetch row into the film<\/span>\n      fetch cur_films into rec_film;\n    <span class=\"hljs-comment\">-- exit when no more row to fetch<\/span>\n      exit when not found;\n\n    <span class=\"hljs-comment\">-- build the output<\/span>\n      if rec_film.title like '%ful%' then \n         titles := titles || ',' || rec_film.title || ':' || rec_film.release_year;\n      <span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">if<\/span>;\n   <span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span>;\n  \n   <span class=\"hljs-comment\">-- close the cursor<\/span>\n   close cur_films;\n\n   return titles;\n<span class=\"hljs-keyword\">end<\/span>; $$\n\nlanguage plpgsql;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">select<\/span> get_film_titles(<span class=\"hljs-number\">2006<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">,Grosse Wonderful:2006,Day Unfaithful:2006,Reap Unfaithful:2006,Unfaithful Kill:2006,Wonderful Drop:2006<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned how to work with PL\/pgSQL cursor to&nbsp;loop through a set of rows and process each row individually.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1407\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Cursor\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1407\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Cursor\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the PL\/pgSQL Cursors and how to use them to process a result set, row by row.<\/p>\n","protected":false},"author":1,"featured_media":1409,"parent":788,"menu_order":25,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PL\/pgSQL Cursor with Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, we will show you how to use PL\/pgSQL Cursor and give you some practical examples of using PL\/pgSQL cursor.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-cursor.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-cursor.png\",\"width\":692,\"height\":268},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/\",\"name\":\"PL\/pgSQL Cursor with Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#primaryimage\"},\"datePublished\":\"2015-09-20T04:17:53+00:00\",\"dateModified\":\"2020-07-24T08:39:24+00:00\",\"description\":\"In this tutorial, we will show you how to use PL\/pgSQL Cursor and give you some practical examples of using PL\/pgSQL cursor.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PL\/pgSQL\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PL\/pgSQL Cursor\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PL\/pgSQL Cursor with Examples","description":"In this tutorial, we will show you how to use PL\/pgSQL Cursor and give you some practical examples of using PL\/pgSQL cursor.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/","twitter_misc":{"Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-cursor.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/09\/plpgsql-cursor.png","width":692,"height":268},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/","name":"PL\/pgSQL Cursor with Examples","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#primaryimage"},"datePublished":"2015-09-20T04:17:53+00:00","dateModified":"2020-07-24T08:39:24+00:00","description":"In this tutorial, we will show you how to use PL\/pgSQL Cursor and give you some practical examples of using PL\/pgSQL cursor.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-cursor\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PL\/pgSQL","item":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/"},{"@type":"ListItem","position":3,"name":"PL\/pgSQL Cursor"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1407"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1407"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1407\/revisions"}],"predecessor-version":[{"id":5528,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1407\/revisions\/5528"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/788"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media\/1409"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1407"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}