{"id":1311,"date":"2015-09-11T03:09:23","date_gmt":"2015-09-11T10:09:23","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1311"},"modified":"2020-08-05T17:35:32","modified_gmt":"2020-08-06T00:35:32","slug":"plpgsql-variables","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/","title":{"rendered":"PL\/pgSQL Variables"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn various techniques to declare PL\/pgSQL variables.<\/p>\n\n\n\n<h2>Introduction to variables in PL\/pgSQL<\/h2>\n\n\n\n<p>A variable&nbsp;is a meaningful name of a memory&nbsp;location. A variable holds a&nbsp;value that can be changed through the <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-block-structure\/\">block<\/a>. A variable is always associated with a particular <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-data-types\/\">data type<\/a>.<\/p>\n\n\n\n<p>Before using a variable, you must declare it in the declaration section of the <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-block-structure\/\">PL\/pgSQL block<\/a>. <\/p>\n\n\n\n<p>The following illustrates the syntax of declaring a variable.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\">variable_name data_type [:= expression];<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<ul><li>First, specify the name of the variable. It is a good practice to assign a meaningful name to a variable. For example, instead of naming a variable <code>i<\/code> you should\u00a0use <code>index<\/code> or <code>counter<\/code>.<\/li><li>Second, associate a specific data type with\u00a0the variable. The data type can be any valid data type such as <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-integer\/\">integer<\/a>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/\">numeric<\/a>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-char-varchar-text\/\">varchar<\/a>, and\u00a0<a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-char-varchar-text\/\">char<\/a>.<\/li><li>Third, optionally assign a default value to a variable. If you don&#8217;t do so, the initial value of the variable is <code>NULL<\/code>.<\/li><\/ul>\n\n\n\n<p class=\"note\">Note that you can use either <code>:=<\/code> or <code>=<\/code> assignment operator to initialize and assign a value to a variable. <\/p>\n\n\n\n<p>The following example illustrates how to declare&nbsp;and initialize variables:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span> $$<span class=\"pgsql\"> \n<span class=\"hljs-keyword\">declare<\/span>\n   counter    <span class=\"hljs-type\">integer<\/span> := <span class=\"hljs-number\">1<\/span>;\n   first_name <span class=\"hljs-type\">varchar<\/span>(<span class=\"hljs-number\">50<\/span>) := <span class=\"hljs-string\">'John'<\/span>;\n   last_name  <span class=\"hljs-type\">varchar<\/span>(<span class=\"hljs-number\">50<\/span>) := <span class=\"hljs-string\">'Doe'<\/span>;\n   payment    <span class=\"hljs-type\">numeric<\/span>(<span class=\"hljs-number\">11<\/span>,<span class=\"hljs-number\">2<\/span>) := <span class=\"hljs-number\">20.5<\/span>;\n<span class=\"hljs-keyword\">begin<\/span> \n   <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'% % % has been paid % USD'<\/span>, \n       counter, \n\t   first_name, \n\t   last_name, \n\t   payment;\n<span class=\"hljs-keyword\">end<\/span> $$<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>counter<\/code> variable is an integer that is initialized to 1<\/p>\n\n\n\n<p>The <code>first_name<\/code> and <code>last_name<\/code> are <code>varchar(50)<\/code> and initialized to <code>'John'<\/code> and <code>'Doe'<\/code> string constants.<\/p>\n\n\n\n<p>The type of <code>payment<\/code> is numeric and its value is initialized to <code>20.5<\/code><\/p>\n\n\n\n<h2>Variable initialization timing<\/h2>\n\n\n\n<p>PostgreSQL evaluates the default value of a variable and assigns it to the variable when the block is entered. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span> $$<span class=\"pgsql\"> \n<span class=\"hljs-keyword\">declare<\/span>\n   created_at <span class=\"hljs-type\">time<\/span> := now();\n<span class=\"hljs-keyword\">begin<\/span> \n   <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'%'<\/span>, created_at;\n   <span class=\"hljs-keyword\">perform<\/span> pg_sleep(<span class=\"hljs-number\">10<\/span>);\n   <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'%'<\/span>, created_at;\n<span class=\"hljs-keyword\">end<\/span> $$<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here is the output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">NOTICE:  14:23:33.064008\nNOTICE:  14:23:33.064008<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, declare a variable whose default value is initialized to the current time.<\/li><li>Second, print out the value of the variable and pass the execution in 10 seconds using the <code>pg_sleep()<\/code> function.<\/li><li>Third, print out the value of the <code>created_at<\/code> variable again.<\/li><\/ul>\n\n\n\n<p>As shown clearly from the output, the value of the <code>created_at<\/code> is only initialized&nbsp;once when the&nbsp;block is entered.<\/p>\n\n\n\n<h2>Copying&nbsp;data types<\/h2>\n\n\n\n<p>The <code>%type<\/code> provides the data type of a table column or another variable. Typically, you use the <code>%type<\/code> to declare a variable that holds a value from the database or another variable. <\/p>\n\n\n\n<p>The following illustrates how to declare a variable with the data type of a table column:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\">variable_name <span class=\"hljs-built_in\">table_name<\/span>.<span class=\"hljs-built_in\">column_name<\/span><span class=\"hljs-meta\">%type<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And the following shows how to declare a variable with the data type of another variable:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">variable_name variable%type;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>See the following film table from the sample database:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"244\" height=\"319\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png\" alt=\"\" class=\"wp-image-4017\"\/><\/figure>\n\n\n\n<p>This example uses the type copying technique to declare variables that hold values which come from the <code>film<\/code> table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span> $$<span class=\"pgsql\"> \n<span class=\"hljs-keyword\">declare<\/span>\n   film_title film.title<span class=\"hljs-meta\">%type<\/span>;\n   featured_title film_title<span class=\"hljs-meta\">%type<\/span>;\n<span class=\"hljs-keyword\">begin<\/span> \n   <span class=\"hljs-comment\">-- get title of the film id 100<\/span>\n   <span class=\"hljs-keyword\">select<\/span> title\n   <span class=\"hljs-keyword\">from<\/span> film\n   <span class=\"hljs-keyword\">into<\/span> film_title\n   <span class=\"hljs-keyword\">where<\/span> film_id = <span class=\"hljs-number\">100<\/span>;\n   \n   <span class=\"hljs-comment\">-- show the film title<\/span>\n   <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'Film title id 100: %s'<\/span>, film_title;\n<span class=\"hljs-keyword\">end<\/span>; $$<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This example declared two variables:<\/p>\n\n\n\n<ul><li>The <code>film_title<\/code> variable has the same data type as the <code>title<\/code> column in the <code>film<\/code> table from the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">sample database<\/a>.<\/li><li>The <code>featured_title<\/code> has the same data type as the data type of the <code>film_title<\/code> variable.<\/li><\/ul>\n\n\n\n<p>By using type copying feature, you get the following advantages:<\/p>\n\n\n\n<ul><li>First, you don&#8217;t need to know the type of the column or reference that you are referencing. <\/li><li>Second, if the data type of the referenced column name (or variable) changes, you don&#8217;t need to change the definition of the function.<\/li><\/ul>\n\n\n\n<h2>Variables in block and subblock<\/h2>\n\n\n\n<p>When you declare a variable in a subblock which hs the same name as another variable in the outer block, the variable in&nbsp;the outer block is hidden in the subblock. <\/p>\n\n\n\n<p>In case you want to access a variable in the outer block, you use the block label to qualify its name as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span> $$<span class=\"pgsql\"> \n<span class=\"hljs-symbol\">&lt;&lt;outer_block&gt;&gt;<\/span>\n<span class=\"hljs-keyword\">declare<\/span>\n  counter <span class=\"hljs-type\">integer<\/span> := <span class=\"hljs-number\">0<\/span>;\n<span class=\"hljs-keyword\">begin<\/span>\n   counter := counter + <span class=\"hljs-number\">1<\/span>;\n   <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'The current value of the counter is %'<\/span>, counter;\n\n   <span class=\"hljs-keyword\">declare<\/span>\n       counter <span class=\"hljs-type\">integer<\/span> := <span class=\"hljs-number\">0<\/span>;\n   <span class=\"hljs-keyword\">begin<\/span>\n       counter := counter + <span class=\"hljs-number\">10<\/span>;\n       <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'Counter in the subblock is %'<\/span>, counter;\n       <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'Counter in the outer block is %'<\/span>, outer_block.counter;\n   <span class=\"hljs-keyword\">end<\/span>;\n\n   <span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'Counter in the outer block is %'<\/span>, counter;\n   \n<span class=\"hljs-keyword\">end<\/span> outer_block $$<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"HTTP\" data-shcb-language-slug=\"http\"><div><code class=\"hljs language-http\"><span class=\"hljs-attribute\">NOTICE<\/span>:  The current value of the counter is 1\n<span class=\"hljs-attribute\">NOTICE<\/span>:  Counter in the subblock is 10\n<span class=\"hljs-attribute\">NOTICE<\/span>:  Counter in the outer block is 1\n<span class=\"hljs-attribute\">NOTICE<\/span>:  Counter in the outer block is 1<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTTP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">http<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, declare a variable named <code>counter<\/code> in the <code>outer_block<\/code>.<\/li><li>Next, declare a variable with the same name in the subblock.<\/li><li>Then, before entering into the subblock, the value of the counter is one. In the subblock, we increase the value of the <code>counter<\/code> to ten and print it out. Notice that the change only affects the <code>counter<\/code> variable in the subblock.<\/li><li>After that, reference the <code>counter<\/code> variable in the outer block using the block label to qualify its name <code>outer_block.counter<\/code>.<\/li><li>Finally, print out the value of the <code>counter<\/code> variable in the outer block, its value remains intact.<\/li><\/ul>\n\n\n\n<p>In this tutorial, you have learned&nbsp;the various ways to declare PL\/pgSQL variables.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1311\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Variables\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1311\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Variables\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn various techniques to declare PL\/pgSQL variables.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":788,"menu_order":3,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PL\/pgSQL Variables<\/title>\n<meta name=\"description\" content=\"In this tutorial, we will show you how to declare PL\/pgSQL variables using various techniques.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png\",\"width\":244,\"height\":319},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/\",\"name\":\"PL\/pgSQL Variables\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#primaryimage\"},\"datePublished\":\"2015-09-11T10:09:23+00:00\",\"dateModified\":\"2020-08-06T00:35:32+00:00\",\"description\":\"In this tutorial, we will show you how to declare PL\/pgSQL variables using various techniques.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PL\/pgSQL\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PL\/pgSQL Variables\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PL\/pgSQL Variables","description":"In this tutorial, we will show you how to declare PL\/pgSQL variables using various techniques.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png","width":244,"height":319},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/","name":"PL\/pgSQL Variables","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#primaryimage"},"datePublished":"2015-09-11T10:09:23+00:00","dateModified":"2020-08-06T00:35:32+00:00","description":"In this tutorial, we will show you how to declare PL\/pgSQL variables using various techniques.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-variables\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PL\/pgSQL","item":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/"},{"@type":"ListItem","position":3,"name":"PL\/pgSQL Variables"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1311"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1311"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1311\/revisions"}],"predecessor-version":[{"id":5874,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1311\/revisions\/5874"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/788"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1311"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}