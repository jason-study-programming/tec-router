{"id":4218,"date":"2019-05-16T00:22:02","date_gmt":"2019-05-16T07:22:02","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=4218"},"modified":"2020-04-11T03:53:00","modified_gmt":"2020-04-11T10:53:00","slug":"postgresql-lag-function","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-window-function\/postgresql-lag-function\/","title":{"rendered":"PostgreSQL LAG Function"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the PostgreSQL <code>LAG()<\/code> function to access a row which comes before the current row at a specific physical offset.<\/p>\n\n\n\n<h2>Introduction to PostgreSQL <code>LAG()<\/code> function<\/h2>\n\n\n\n<p>PostgreSQL <code>LAG()<\/code> function provides access to a row that comes before the current row at a specified physical offset. In other words, from the current row the <code>LAG()<\/code> function can access data of the previous row, or the row before the previous row, and so on.<\/p>\n\n\n\n<p>The <code>LAG()<\/code> function will be very useful for comparing the values of the current and the previous row.<\/p>\n\n\n\n<p>The following shows the syntax of <code>LAG()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">LAG(expression [,offset [,default_value]]) \nOVER (\n    [PARTITION BY partition_expression, ... ]\n    ORDER BY sort_expression [ASC | DESC], ...\n)\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<h3><code>expression<\/code><\/h3>\n\n\n\n<p>The <code>expression<\/code> is evaluated against the row that comes before the current row at a specified offset. It can be a column, expression, or <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/\">subquery<\/a>. The <code>expression<\/code> must return a single value, and cannot be a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-window-function\/\">window function<\/a>.<\/p>\n\n\n\n<h3><code>offset<\/code><\/h3>\n\n\n\n<p>The <code>offset<\/code> is a positive integer that specifies the number of rows which comes before the current row from which to access data. The <code>offset<\/code> can be an expression, subquery, or column. It defaults to 1 if you don&#8217;t specify it.<\/p>\n\n\n\n<h3><code>default_value<\/code><\/h3>\n\n\n\n<p>The <code>LAG()<\/code> function will return the <code>default_value<\/code> in case the <code>offset<\/code> goes beyond the scope of the partition. The function will return NULL if you omit the <code>default_value<\/code>.<\/p>\n\n\n\n<h3>PARTITION BY clause<\/h3>\n\n\n\n<p>The <code>PARTITION BY<\/code> clause divides rows into partitions to which the <code>LAG()<\/code> function is applied.<\/p>\n\n\n\n<p>By default the function will treat the whole result set as a single partition if you omit the <code>PARTITION BY<\/code> clause.<\/p>\n\n\n\n<h3>ORDER BY clause<\/h3>\n\n\n\n<p>The <code>ORDER BY<\/code> clause specifies the order of the rows in each partition to which the <code>LAG()<\/code> function is applied.<\/p>\n\n\n\n<h2>PostgreSQL <code>LAG()<\/code> function examples<\/h2>\n\n\n\n<p>We&#8217;ll use the <code>sales<\/code> table from the <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-lead-function\/\">LEAD()<\/a><\/code> function tutorial for the demonstration.<\/p>\n\n\n\n<p>Here is the data from the <code>sales<\/code> function:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"288\" height=\"263\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/Sales-sample-table.png\" alt=\"Sales sample table\" class=\"wp-image-4209\"\/><\/figure>\n\n\n\n<h3>1) Using PostgreSQL <code>LAG()<\/code> function over a result set example<\/h3>\n\n\n\n<p>This example uses the <code>LAG()<\/code> function to return the sales amount of the current year and the previous year:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">WITH<\/span> cte <span class=\"hljs-keyword\">AS<\/span> (\n\t<span class=\"hljs-keyword\">SELECT<\/span> \n\t\t<span class=\"hljs-keyword\">year<\/span>, \n\t\t<span class=\"hljs-keyword\">SUM<\/span>(amount) amount\n\t<span class=\"hljs-keyword\">FROM<\/span> sales\n\t<span class=\"hljs-keyword\">GROUP<\/span> <span class=\"hljs-keyword\">BY<\/span> <span class=\"hljs-keyword\">year<\/span>\n\t<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> <span class=\"hljs-keyword\">year<\/span>\n) \n<span class=\"hljs-keyword\">SELECT<\/span>\n\t<span class=\"hljs-keyword\">year<\/span>, \n\tamount,\n\tLAG(amount,<span class=\"hljs-number\">1<\/span>) <span class=\"hljs-keyword\">OVER<\/span> (\n\t\t<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> <span class=\"hljs-keyword\">year<\/span>\n\t) previous_year_sales\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcte;\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here is the output:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"325\" height=\"115\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-LAG-Function-Over-a-Result-Set-Example.png\" alt=\"PostgreSQL LAG Function Over a Result Set Example\" class=\"wp-image-4220\"\/><\/figure>\n\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, the CTE returns net sales summarized by year.<\/li><li>Then, the outer query uses the <code>LAG()<\/code> function to return the sales of the previous year for each row. The first row has NULL in the <code>previous_year_sales<\/code> column because there is no previous year of the first row.<\/li><\/ul>\n\n\n\n<p>This example uses two common table expressions to return the sales variance between the current and previous years:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">WITH<\/span> cte <span class=\"hljs-keyword\">AS<\/span> (\n\t<span class=\"hljs-keyword\">SELECT<\/span> \n\t\t<span class=\"hljs-keyword\">year<\/span>, \n\t\t<span class=\"hljs-keyword\">SUM<\/span>(amount) amount\n\t<span class=\"hljs-keyword\">FROM<\/span> sales\n\t<span class=\"hljs-keyword\">GROUP<\/span> <span class=\"hljs-keyword\">BY<\/span> <span class=\"hljs-keyword\">year<\/span>\n\t<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> <span class=\"hljs-keyword\">year<\/span>\n), cte2 <span class=\"hljs-keyword\">AS<\/span> (\n\t<span class=\"hljs-keyword\">SELECT<\/span>\n\t\t<span class=\"hljs-keyword\">year<\/span>, \n\t\tamount,\n\t\tLAG(amount,<span class=\"hljs-number\">1<\/span>) <span class=\"hljs-keyword\">OVER<\/span> (\n\t\t\t<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> <span class=\"hljs-keyword\">year<\/span>\n\t\t) previous_year_sales\n\t<span class=\"hljs-keyword\">FROM<\/span>\n\t\tcte\n)\t\n<span class=\"hljs-keyword\">SELECT<\/span> \n\t<span class=\"hljs-keyword\">year<\/span>, \n\tamount, \n\tprevious_year_sales,  \n\t(previous_year_sales - amount) <span class=\"hljs-keyword\">variance<\/span>\n<span class=\"hljs-keyword\">FROM<\/span> \n\tcte2;\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"398\" height=\"112\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-LAG-Function-Over-a-Result-Set-Example-2.png\" alt=\"PostgreSQL LAG Function Over a Result Set Example 2\" class=\"wp-image-4221\"\/><\/figure>\n\n\n\n<h3>2) Using PostgreSQL <code>LAG()<\/code> function over a partition example<\/h3>\n\n\n\n<p>This example uses the <code>LAG()<\/code> function to compare the sales of the current year with the sales of the previous year of each product group:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t<span class=\"hljs-keyword\">year<\/span>, \n\tamount,\n\t<span class=\"hljs-keyword\">group_id<\/span>,\n\tLAG(amount,<span class=\"hljs-number\">1<\/span>) <span class=\"hljs-keyword\">OVER<\/span> (\n\t\t<span class=\"hljs-keyword\">PARTITION<\/span> <span class=\"hljs-keyword\">BY<\/span> <span class=\"hljs-keyword\">group_id<\/span>\n\t\t<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> <span class=\"hljs-keyword\">year<\/span>\n\t) previous_year_sales\n<span class=\"hljs-keyword\">FROM<\/span>\n\tsales;\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This picture shows the output:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"438\" height=\"262\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/PostgreSQL-LAG-Function-Over-a-Partition-Example.png\" alt=\"PostgreSQL LAG Function Over a Partition Example\" class=\"wp-image-4222\"\/><\/figure>\n\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>The <code>PARTITION BY<\/code> clause distributes rows into product groups (or partitions) specified by group id.<\/li><li>The <code>ORDER BY<\/code> clause sorts rows in each product group by years in ascending order.<\/li><li>The <code>LAG()<\/code> function is applied to each partition to return the sales of the previous year.<\/li><\/ul>\n\n\n\n<p>In this tutorial, you have learned how to use the PostgreSQL <code>LAG()<\/code> function to access a row that comes before the current row at a specific physical offset.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"4218\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-window-function\/postgresql-lag-function\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL LAG Function\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"4218\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-window-function\/postgresql-lag-function\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL LAG Function\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the PostgreSQL LAG() function to access a row which comes before the current row at a specific physical offset.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1737,"menu_order":3,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL LAG() Function By Practical Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to use the PostgreSQL LAG() function to access a row which comes before the current row at a specific physical offset.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/Sales-sample-table.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/Sales-sample-table.png\",\"width\":288,\"height\":263,\"caption\":\"Sales sample table\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/\",\"name\":\"PostgreSQL LAG() Function By Practical Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#primaryimage\"},\"datePublished\":\"2019-05-16T07:22:02+00:00\",\"dateModified\":\"2020-04-11T10:53:00+00:00\",\"description\":\"In this tutorial, you will learn how to use the PostgreSQL LAG() function to access a row which comes before the current row at a specific physical offset.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Window Functions\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-window-function\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL LAG Function\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL LAG() Function By Practical Examples","description":"In this tutorial, you will learn how to use the PostgreSQL LAG() function to access a row which comes before the current row at a specific physical offset.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/Sales-sample-table.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/Sales-sample-table.png","width":288,"height":263,"caption":"Sales sample table"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/","name":"PostgreSQL LAG() Function By Practical Examples","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#primaryimage"},"datePublished":"2019-05-16T07:22:02+00:00","dateModified":"2020-04-11T10:53:00+00:00","description":"In this tutorial, you will learn how to use the PostgreSQL LAG() function to access a row which comes before the current row at a specific physical offset.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-lag-function\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Window Functions","item":"https:\/\/www.postgresqltutorial.com\/postgresql-window-function\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL LAG Function"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/4218"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=4218"}],"version-history":[{"count":0,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/4218\/revisions"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1737"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=4218"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}