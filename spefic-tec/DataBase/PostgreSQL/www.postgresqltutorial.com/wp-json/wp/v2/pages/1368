{"id":1368,"date":"2015-09-12T20:49:51","date_gmt":"2015-09-13T03:49:51","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1368"},"modified":"2020-07-24T00:56:26","modified_gmt":"2020-07-24T07:56:26","slug":"plpgsql-function-overloading","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/","title":{"rendered":"PL\/pgSQL Function Overloading"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about function overloading in PostgreSQL.<\/p>\n\n\n\n<h2>Introduction to PL\/pgSQL Function Overloading<\/h2>\n\n\n\n<p>PostgreSQL allows multiple <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-function\/\">functions<\/a> to share the same name as long as they have different arguments. <\/p>\n\n\n\n<p>If two or more functions share the same name, the function names are overloaded. <\/p>\n\n\n\n<p>When you can call an overloading function, PostgreSQL select the best candidate function to execute based on the the function argument list.<\/p>\n\n\n\n<p>The following <code>get_rental_duration()<\/code> function returns the total rental days of a specified customer:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">create<\/span> <span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">replace<\/span> <span class=\"hljs-keyword\">function<\/span> get_rental_duration(\n\tp_customer_id <span class=\"hljs-built_in\">integer<\/span>\n)\n<span class=\"hljs-keyword\">returns<\/span> <span class=\"hljs-built_in\">integer<\/span> \n<span class=\"hljs-keyword\">language<\/span> plpgsql\n<span class=\"hljs-keyword\">as<\/span> $$\n<span class=\"hljs-keyword\">declare<\/span> \n\trental_duration <span class=\"hljs-built_in\">integer<\/span>; \n<span class=\"hljs-keyword\">begin<\/span>\n\t<span class=\"hljs-keyword\">select<\/span> \n\t\t<span class=\"hljs-keyword\">sum<\/span>( <span class=\"hljs-keyword\">extract<\/span>(<span class=\"hljs-keyword\">day<\/span> <span class=\"hljs-keyword\">from<\/span> return_date - rental_date)) \n\t<span class=\"hljs-keyword\">into<\/span> rental_duration \n    <span class=\"hljs-keyword\">from<\/span> rental \n\t<span class=\"hljs-keyword\">where<\/span> customer_id = p_customer_id;\n\n\treturn rental_duration;\n<span class=\"hljs-keyword\">end<\/span>; $$\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>get_rental_function<\/code> function has the <code>p_customer_id<\/code> as an <code>in<\/code> parameter. <\/p>\n\n\n\n<p>The following return the number of rental days of the customer id 232:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> get_rental_duration(<span class=\"hljs-number\">232<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\"> get_rental_duration\n---------------------\n                  90\n(1 row)<\/code><\/div><\/pre>\n\n\n<p>Suppose that you want to know the rental duration of a customer from a specific date up to now. <\/p>\n\n\n\n<p>To do it, you can add one more parameter <code>p_from_date<\/code> to the <code>get_retal_duration()<\/code> function. Or you can develop a new function with the same name but have two parameters like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">create<\/span> <span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">replace<\/span> <span class=\"hljs-keyword\">function<\/span> get_rental_duration(\n\tp_customer_id <span class=\"hljs-built_in\">integer<\/span>, \n\tp_from_date <span class=\"hljs-built_in\">date<\/span>\n)\n<span class=\"hljs-keyword\">returns<\/span> <span class=\"hljs-built_in\">integer<\/span> \n<span class=\"hljs-keyword\">language<\/span> plpgsql\n<span class=\"hljs-keyword\">as<\/span> $$\n<span class=\"hljs-keyword\">declare<\/span> \n\trental_duration <span class=\"hljs-built_in\">integer<\/span>;\n<span class=\"hljs-keyword\">begin<\/span>\n\t<span class=\"hljs-comment\">-- get the rental duration based on customer_id <\/span>\n\t<span class=\"hljs-comment\">-- and rental date<\/span>\n\t<span class=\"hljs-keyword\">select<\/span> <span class=\"hljs-keyword\">sum<\/span>( <span class=\"hljs-keyword\">extract<\/span>( <span class=\"hljs-keyword\">day<\/span> <span class=\"hljs-keyword\">from<\/span> return_date + <span class=\"hljs-string\">'12:00:00'<\/span> - rental_date)) \n\t<span class=\"hljs-keyword\">into<\/span> rental_duration\n\t<span class=\"hljs-keyword\">from<\/span> rental \n\t<span class=\"hljs-keyword\">where<\/span> customer_id = p_customer_id <span class=\"hljs-keyword\">and<\/span> \n\t\t  rental_date &gt;= p_from_date;\n\t\n\t<span class=\"hljs-comment\">-- return the rental duration in days<\/span>\n\treturn rental_duration;\n<span class=\"hljs-keyword\">end<\/span>; $$\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This function has the same name as the first one except that it has two parameters. <\/p>\n\n\n\n<p>In other words, the <code>get_rental_duration(integer)<\/code>\u00a0function is\u00a0overloaded by the <code>get_rental_duration(integer,date)<\/code> function.<\/p>\n\n\n\n<p> The following statement returns the rental duration of the customer id <code>232<\/code> since <code>July 1st 2005<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> get_rental_duration(<span class=\"hljs-number\">232<\/span>,<span class=\"hljs-string\">'2005-07-01'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\"> get_rental_duration\n---------------------\n                  85\n(1 row)\n<\/code><\/div><\/pre>\n\n\n<p>Note that if you omit the second argument, PostgreSQL will call the <code>get_rental_duration(integer)<\/code> function that has one parameter.<\/p>\n\n\n\n<h2>PL\/pgSQL&nbsp;function overloading and default values<\/h2>\n\n\n\n<p>In the <code>get_rental_duration(integer,date)<\/code> function, if you want to set a default value to the second argument like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">create<\/span> <span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">replace<\/span> <span class=\"hljs-keyword\">function<\/span> get_rental_duration(\n\tp_customer_id <span class=\"hljs-built_in\">integer<\/span>, \n\tp_from_date <span class=\"hljs-built_in\">date<\/span> <span class=\"hljs-keyword\">default<\/span> <span class=\"hljs-string\">'2005-01-01'<\/span>\n)\n<span class=\"hljs-keyword\">returns<\/span> <span class=\"hljs-built_in\">integer<\/span>\n<span class=\"hljs-keyword\">language<\/span> plpgsql\n<span class=\"hljs-keyword\">as<\/span> $$\n<span class=\"hljs-keyword\">declare<\/span> \n\trental_duration <span class=\"hljs-built_in\">integer<\/span>;\n<span class=\"hljs-keyword\">begin<\/span>\n\t<span class=\"hljs-keyword\">select<\/span> <span class=\"hljs-keyword\">sum<\/span>( \n\t\t<span class=\"hljs-keyword\">extract<\/span>( <span class=\"hljs-keyword\">day<\/span> <span class=\"hljs-keyword\">from<\/span> return_date + <span class=\"hljs-string\">'12:00:00'<\/span> - rental_date)\n\t) \n\t<span class=\"hljs-keyword\">into<\/span> rental_duration\n\t<span class=\"hljs-keyword\">from<\/span> rental \n\t<span class=\"hljs-keyword\">where<\/span> customer_id= p_customer_id <span class=\"hljs-keyword\">and<\/span> \n\t\t  rental_date &gt;= p_from_date;\n\t \n\treturn rental_duration;\n\n<span class=\"hljs-keyword\">end<\/span>; $$<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following calls the <code>get_rental_duration()<\/code> function and passes the customer id 232:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> get_rental_duration(<span class=\"hljs-number\">232<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL issued an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">ERROR:  function get_rental_duration(integer) is not unique\nLINE 1: <span class=\"hljs-keyword\">SELECT<\/span> get_rental_duration(<span class=\"hljs-number\">232<\/span>);\n               ^\nHINT:  Could not choose the best candidate function. You might need to add explicit type casts.\nSQL state: 42725\nCharacter: 8<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, PostgreSQL could not choose the best candidate function to execute.<\/p>\n\n\n\n<p>In this scenario, you have three functions:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">get_rental_duration(p_customer_id integer);\nget_rental_duration(p_customer_id integer, p_from_date date)\nget_rental_duration(p_customer_id integer, p_from_date date <span class=\"hljs-keyword\">default<\/span> <span class=\"hljs-string\">'2005-01-01'<\/span>\n)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL did not know whether it should execute the first or the third function.<\/p>\n\n\n\n<p>As a rule of thumb, when you overload a function, you should always\u00a0make\u00a0their parameter list\u00a0unique. <\/p>\n\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>Multiple functions can share the same names as long as they have different arguments. These function names are overloaded.<\/li><li>Use a unique function argument list to define overloading functions.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1368\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Function Overloading\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1368\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Function Overloading\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn about function overloading in PostgreSQL. Introduction to PL\/pgSQL Function Overloading PostgreSQL allows multiple functions to share the same name as long as they have different arguments. If two or more functions share the same name, the function names are overloaded. When you can call an overloading function, PostgreSQL [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":788,"menu_order":19,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PL\/pgSQL Function Overloading<\/title>\n<meta name=\"description\" content=\"In this tutorial, we will introduce you to PL\/pgSQL function overloading feature to help you develop flexible functions.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/\",\"name\":\"PL\/pgSQL Function Overloading\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"datePublished\":\"2015-09-13T03:49:51+00:00\",\"dateModified\":\"2020-07-24T07:56:26+00:00\",\"description\":\"In this tutorial, we will introduce you to PL\/pgSQL function overloading feature to help you develop flexible functions.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PL\/pgSQL\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PL\/pgSQL Function Overloading\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PL\/pgSQL Function Overloading","description":"In this tutorial, we will introduce you to PL\/pgSQL function overloading feature to help you develop flexible functions.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/","name":"PL\/pgSQL Function Overloading","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"datePublished":"2015-09-13T03:49:51+00:00","dateModified":"2020-07-24T07:56:26+00:00","description":"In this tutorial, we will introduce you to PL\/pgSQL function overloading feature to help you develop flexible functions.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-function-overloading\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PL\/pgSQL","item":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/"},{"@type":"ListItem","position":3,"name":"PL\/pgSQL Function Overloading"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1368"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1368"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1368\/revisions"}],"predecessor-version":[{"id":5516,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1368\/revisions\/5516"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/788"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1368"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}