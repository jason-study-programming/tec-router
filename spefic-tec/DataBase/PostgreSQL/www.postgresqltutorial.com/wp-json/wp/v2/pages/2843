{"id":2843,"date":"2017-08-12T07:35:45","date_gmt":"2017-08-12T14:35:45","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2843"},"modified":"2020-07-09T22:57:55","modified_gmt":"2020-07-10T05:57:55","slug":"postgresql-format","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-string-functions\/postgresql-format\/","title":{"rendered":"PostgreSQL FORMAT Function"},"content":{"rendered":"\n<p>PostgreSQL <code>FORMAT()<\/code> function formats arguments based on a format string.<\/p>\n\n\n\n<p>If you have worked with the C programming language, you will find that the <code>FORMAT()<\/code> function is similar to the <code>sprintf()<\/code> function.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<p>The syntax of the PostgreSQL <code>FORMAT()<\/code> function is as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">FORMAT(format_string [, format_arg [, ...] ])<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>FORMAT()<\/code> function is variadic, therefore, you can pass the arguments to be formatted as an array marked with the <code>VARIADIC<\/code> keyword.<\/p>\n\n\n\n<p>The <code>FORMAT()<\/code> function treats the array&#8217;s elements as ordinary arguments and NULL as an array of zero elements.<\/p>\n\n\n\n<h2>Arguments<\/h2>\n\n\n\n<p><strong>1) <code>format_string<\/code><\/strong><\/p>\n\n\n\n<p>The <code>format_string<\/code> argument is a string that specifies how the result string should be formatted.<\/p>\n\n\n\n<p>The <code>format_string<\/code> consists of text and format specifiers. Text is copied directly to the result string while the format specifiers are placeholders for the arguments to be inserted into the result string.<\/p>\n\n\n\n<p>The following shows the syntax of the format specifier:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><div><code class=\"hljs language-css\">%<span class=\"hljs-selector-attr\">[position]<\/span><span class=\"hljs-selector-attr\">[flags]<\/span><span class=\"hljs-selector-attr\">[width]<\/span><span class=\"hljs-selector-tag\">type<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>A format specifier starts with <code>%<\/code> character. It has three optional components <code>position<\/code>, <code>flags<\/code>, <code>with<\/code>and a required component <code>type<\/code>.<\/p>\n\n\n\n<p><strong>position<\/strong><\/p>\n\n\n\n<p>The <code>position<\/code> specifies which argument to be inserted in the result string. The <code>position<\/code> is in the form <code>n$<\/code> where <code>n<\/code> is the argument index. The first argument starts from 1.<\/p>\n\n\n\n<p>If you omit the <code>position<\/code> component, the default is the next argument in the list.<\/p>\n\n\n\n<p><strong>flags<\/strong><\/p>\n\n\n\n<p>Currently, the flags can accept a minus sign (-) that instructs the format specifier&#8217;s output to be left-justified.<\/p>\n\n\n\n<p>The <code>flags<\/code> component only takes effect when the <code>width<\/code> field is specified.<\/p>\n\n\n\n<p><strong>width<\/strong><\/p>\n\n\n\n<p>The optional <code>width<\/code> field specifies the minimum number of characters to use for displaying the format specifier&#8217;s output.<\/p>\n\n\n\n<p>The result string can be padded left or right with the spaces needed to fill the <code>width<\/code>.<\/p>\n\n\n\n<p>If the <code>width<\/code> is too small, the output will be displayed as-is without any truncation.<\/p>\n\n\n\n<p>The <code>width<\/code> can be one of the following values:<\/p>\n\n\n\n<ul><li>A positive integer.<\/li><li>An asterisk (*) to use the next function argument as the width.<\/li><li>A string of the form <code>*n$<\/code> to use the <code>nth<\/code> function argument as the width.<\/li><\/ul>\n\n\n\n<p><strong>t<\/strong><strong>y<\/strong><strong>pe<\/strong><\/p>\n\n\n\n<p><code>type<\/code> is the type of format conversion to use to produce the format specifier&#8217;s output.<\/p>\n\n\n\n<p>The permitted values for type argument are as follows:<\/p>\n\n\n\n<ul><li><code>s<\/code> formats the argument value as a string. NULL is treated as an empty string.<\/li><li><code>I<\/code> treats the argument value as an SQL identifier.<\/li><li><code>L<\/code> quotes the argument value as an SQL literal.<\/li><\/ul>\n\n\n\n<p>We often use <code>I<\/code> and <code>L<\/code> for constructing dynamic SQL statements.<\/p>\n\n\n\n<p>If you want to include <code>%<\/code> in the result string, use double percentages <code>%%<\/code><\/p>\n\n\n\n<p><strong>2) <code>format_arg<\/code><\/strong><\/p>\n\n\n\n<p>As mentioned earlier, you pass a number of format arguments to the <code>FORMAT()<\/code> function.<\/p>\n\n\n\n<h2>Return value<\/h2>\n\n\n\n<p>The <code>FORMAT()<\/code> function returns a formatted string.<\/p>\n\n\n\n<h2>Examples<\/h2>\n\n\n\n<p>Let&#8217;s take a look at some examples of using the <code>FORMAT()<\/code> function.<\/p>\n\n\n\n<p><strong>A) Simple format<\/strong><\/p>\n\n\n\n<p>The following statement uses the <code>FORMAT()<\/code> function to format a string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">SELECT FORMAT(<span class=\"hljs-string\">'Hello, %s'<\/span>,<span class=\"hljs-string\">'PostgreSQL'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The output is:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\"><span class=\"hljs-string\">'Hello, PostgreSQL'<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, <code>%s<\/code> is replaced by the <code>'PostgreSQL'<\/code> string argument.<\/p>\n\n\n\n<p>See the following <code>customer<\/code> table in the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">sample database<\/a>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"180\" height=\"245\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/customer-table.png\" alt=\"customer table\" class=\"wp-image-456\"\/><\/figure>\n\n\n\n<p>The following statement uses the <code>FORMAT()<\/code> function to construct customers&#8217; full names from first names and last names:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">SELECT \n    FORMAT(<span class=\"hljs-string\">'%s, %s'<\/span>,last_name, first_name) full_name \nFROM \n    customer;\nORDER BY \n    full_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"230\" height=\"286\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/08\/PostgreSQL-FORMAT-example.png\" alt=\"PostgreSQL FORMAT example\" class=\"wp-image-2844\"\/><\/figure>\n\n\n\n<p>In this example, we used two format specifiers %s %s which are then replaced by values in the <code>first_name<\/code> and <code>last_name<\/code> columns.<\/p>\n\n\n\n<p><strong>B) Using <code>flags<\/code> component example<\/strong><\/p>\n\n\n\n<p>The following statement shows how to use the <code>flags<\/code> and <code>with<\/code> components in the format specifier:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">SELECT FORMAT(<span class=\"hljs-string\">'|%10s|'<\/span>, <span class=\"hljs-string\">'one'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The output string is left-padded with spaces and right-aligned.<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">format\n--------------\n |       one|\n(1 row)<\/code><\/div><\/pre>\n\n\n<p>To make it left-aligned, you use &#8211; as the flag:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">SELECT FORMAT(<span class=\"hljs-string\">'|%-10s|'<\/span>, <span class=\"hljs-string\">'one'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The output is:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">    format\n--------------\n |one       |\n(1 row)<\/code><\/div><\/pre>\n\n\n<p><strong>C) Using <code>position<\/code> component example<\/strong><\/p>\n\n\n\n<p>This example shows how to use the&nbsp;<code>position<\/code> component of the format specifier:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">SELECT \n    FORMAT(<span class=\"hljs-string\">'%1$s apple, %2$s orange, %1$s banana'<\/span>, <span class=\"hljs-string\">'small'<\/span>, <span class=\"hljs-string\">'big'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following illustrates the output:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">                format\n---------------------------------------\n small apple, big orange, small banana\n(1 row)<\/code><\/div><\/pre>\n\n\n<p>In this example, we have two arguments which are <code>'small'<\/code> and <code>'big'<\/code> strings.<\/p>\n\n\n\n<p>The <code>1$<\/code> and <code>2$<\/code> positions instruct the <code>FORMAT()<\/code> function to inject the first (<code>'small'<\/code>) and second arguments (<code>'big'<\/code>) into the corresponding placeholders.<\/p>\n\n\n\n<p>The <code>1$<\/code> position appears twice in the format string, therefore, the first argument is also inserted twice.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to use the PostgreSQL <code>FORMAT()<\/code> function to format arguments according to a format string.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2843\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-string-functions\/postgresql-format\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL FORMAT Function\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2843\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-string-functions\/postgresql-format\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL FORMAT Function\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the PostgreSQL FORMAT() function to format arguments according to a format string.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":2927,"menu_order":11,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL FORMAT: Formats Arguments According To a Format String<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to use the PostgreSQL FORMAT() function to format arguments according to a format string.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-format\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/customer-table.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/customer-table.png\",\"width\":180,\"height\":245,\"caption\":\"customer table\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-format\/\",\"name\":\"PostgreSQL FORMAT: Formats Arguments According To a Format String\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#primaryimage\"},\"datePublished\":\"2017-08-12T14:35:45+00:00\",\"dateModified\":\"2020-07-10T05:57:55+00:00\",\"description\":\"In this tutorial, you will learn how to use the PostgreSQL FORMAT() function to format arguments according to a format string.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-format\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL String Functions\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-string-functions\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL FORMAT Function\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL FORMAT: Formats Arguments According To a Format String","description":"In this tutorial, you will learn how to use the PostgreSQL FORMAT() function to format arguments according to a format string.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-format\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/customer-table.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/customer-table.png","width":180,"height":245,"caption":"customer table"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-format\/","name":"PostgreSQL FORMAT: Formats Arguments According To a Format String","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#primaryimage"},"datePublished":"2017-08-12T14:35:45+00:00","dateModified":"2020-07-10T05:57:55+00:00","description":"In this tutorial, you will learn how to use the PostgreSQL FORMAT() function to format arguments according to a format string.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-format\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-format\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL String Functions","item":"https:\/\/www.postgresqltutorial.com\/postgresql-string-functions\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL FORMAT Function"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2843"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2843"}],"version-history":[{"count":1,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2843\/revisions"}],"predecessor-version":[{"id":4596,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2843\/revisions\/4596"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2927"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2843"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}