{"id":2019,"date":"2016-06-12T01:49:07","date_gmt":"2016-06-12T08:49:07","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2019"},"modified":"2020-07-09T21:17:08","modified_gmt":"2020-07-10T04:17:08","slug":"postgresql-blob","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/","title":{"rendered":"PostgreSQL PHP: Working with BLOB"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to work with PostgreSQL BLOB using PHP such inserting BLOB, querying BLOB, and deleting BLOB.<\/p>\n\n\n\n<p>BLOB stands for the&nbsp;binary large object that is used to store binary data such as the&nbsp;content of a file. PostgreSQL does not have the BLOB data type. However, you can use the &nbsp;<code>bytea<\/code> data type for storing the&nbsp;binary string.<\/p>\n\n\n\n<p>We will create a new table named <code>company_files<\/code> to store the binary string.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> company_files (\n     <span class=\"hljs-keyword\">id<\/span>        <span class=\"hljs-built_in\">SERIAL<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n     stock_id  <span class=\"hljs-built_in\">INTEGER<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n     mime_type <span class=\"hljs-built_in\">CHARACTER<\/span> <span class=\"hljs-built_in\">VARYING<\/span>(<span class=\"hljs-number\">255<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n     file_name <span class=\"hljs-built_in\">CHARACTER<\/span> <span class=\"hljs-built_in\">VARYING<\/span>(<span class=\"hljs-number\">255<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n     file_data BYTEA <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n     <span class=\"hljs-keyword\">FOREIGN<\/span> <span class=\"hljs-keyword\">KEY<\/span>(stock_id) <span class=\"hljs-keyword\">REFERENCES<\/span> stocks(<span class=\"hljs-keyword\">id<\/span>)\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>We will store the content of a file in the <code>file_data<\/code> column. In addition, we will read the file from the <code>assets\/images<\/code> folder and insert them into the <code>company_files<\/code> table.<\/p>\n\n\n\n<p>To work with the BLOB data, we create a new class named <code>BlobDB<\/code>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"274\" height=\"290\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-BLOB.png\" alt=\"PostgreSQL PHP BLOB\" class=\"wp-image-2021\"\/><\/figure>\n\n\n\n<h2>Inserting PostgreSQL BLOB data<\/h2>\n\n\n\n<p>The following <code>insert()<\/code> method reads data from a file specified by the <code>$pathToFile<\/code> parameter and inserts it into the <code>company_files<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">   <span class=\"hljs-comment\">\/**\n     * Insert a file into the company_files table\n     * <span class=\"hljs-doctag\">@param<\/span> int $stockId\n     * <span class=\"hljs-doctag\">@param<\/span> string $fileName\n     * <span class=\"hljs-doctag\">@param<\/span> string $mimeType\n     * <span class=\"hljs-doctag\">@param<\/span> string $pathToFile\n     * <span class=\"hljs-doctag\">@return<\/span> int\n     * <span class=\"hljs-doctag\">@throws<\/span> \\Exception\n     *\/<\/span>\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">insert<\/span><span class=\"hljs-params\">($stockId, $fileName, $mimeType, $pathToFile)<\/span> <\/span>{\n        <span class=\"hljs-keyword\">if<\/span> (!file_exists($pathToFile)) {\n            <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> \\<span class=\"hljs-keyword\">Exception<\/span>(<span class=\"hljs-string\">\"File %s not found.\"<\/span>);\n        }\n\n        $sql = <span class=\"hljs-string\">\"INSERT INTO company_files(stock_id,mime_type,file_name,file_data) \"<\/span>\n                . <span class=\"hljs-string\">\"VALUES(:stock_id,:mime_type,:file_name,:file_data)\"<\/span>;\n\n        <span class=\"hljs-keyword\">try<\/span> {\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;beginTransaction();\n            \n            <span class=\"hljs-comment\">\/\/ create large object<\/span>\n            $fileData = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;pgsqlLOBCreate();\n            $stream = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;pgsqlLOBOpen($fileData, <span class=\"hljs-string\">'w'<\/span>);\n            \n            <span class=\"hljs-comment\">\/\/ read data from the file and copy the the stream<\/span>\n            $fh = fopen($pathToFile, <span class=\"hljs-string\">'rb'<\/span>);\n            stream_copy_to_stream($fh, $stream);\n            <span class=\"hljs-comment\">\/\/<\/span>\n            $fh = <span class=\"hljs-keyword\">null<\/span>;\n            $stream = <span class=\"hljs-keyword\">null<\/span>;\n\n            $stmt = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;prepare($sql);\n\n            $stmt-&gt;execute([\n                <span class=\"hljs-string\">':stock_id'<\/span> =&gt; $stockId,\n                <span class=\"hljs-string\">':mime_type'<\/span> =&gt; $mimeType,\n                <span class=\"hljs-string\">':file_name'<\/span> =&gt; $fileName,\n                <span class=\"hljs-string\">':file_data'<\/span> =&gt; $fileData,\n            ]);\n\n            <span class=\"hljs-comment\">\/\/ commit the transaction<\/span>\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;commit();\n        } <span class=\"hljs-keyword\">catch<\/span> (\\<span class=\"hljs-keyword\">Exception<\/span> $e) {\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;rollBack();\n            <span class=\"hljs-keyword\">throw<\/span> $e;\n        }\n\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;lastInsertId(<span class=\"hljs-string\">'company_files_id_seq'<\/span>);\n    }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ol><li>First, call the&nbsp;pgsqlLOBCreate() method of the PDO object to create a&nbsp;new large object and get the OID of the large object.<\/li><li>Next, call the pgsqlLOBopen() method to open &nbsp;a stream on the large object to write data to it.<\/li><li>Then, read data from a file and copy the data from the file stream to the large binary object.<\/li><li>After that, prepare the INSERT statement and execute it.<\/li><li>Finally, call the lastInsertId to get the generated ID.<\/li><\/ol>\n\n\n\n<p>Note that the <code>pgsqlLOBCreate()<\/code> method must be called within a transaction, therefore, we place all the logic within a transaction.<\/p>\n\n\n\n<p>Place the following code in the <code>index.php<\/code> file to insert the content of the <code>google.png<\/code> file into the <code>company_files<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">&lt;?php\n\nrequire 'vendor\/autoload.php';\n\n<span class=\"hljs-keyword\">use<\/span> PostgreSQLTutorial\\<span class=\"hljs-keyword\">Connection<\/span> <span class=\"hljs-keyword\">as<\/span> <span class=\"hljs-keyword\">Connection<\/span>;\n<span class=\"hljs-keyword\">use<\/span> PostgreSQLTutorial\\BlobDB <span class=\"hljs-keyword\">as<\/span> BlobDB;\n\ntry {\n    \/\/ connect to the PostgreSQL database\n    $pdo = Connection::get()-&gt;connect();\n    \/\/ \n    $blobDB = new BlobDB($pdo);\n    $fileId = $blobDB-&gt;<span class=\"hljs-keyword\">insert<\/span>(<span class=\"hljs-number\">2<\/span>, <span class=\"hljs-string\">'logo'<\/span>, <span class=\"hljs-string\">'image\/png'<\/span>, <span class=\"hljs-string\">'assets\/images\/google.png'<\/span>);\n\n    echo 'A file has been inserted <span class=\"hljs-keyword\">with<\/span> <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-string\">' . $fileId;\n} catch (\\PDOException $e) {\n    echo $e-&gt;getMessage();\n}<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Launch the index.php file, we get the following message.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">A file has been inserted <span class=\"hljs-keyword\">with<\/span> <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-number\">1<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To verify the insert operation, we use the following query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> * <span class=\"hljs-keyword\">FROM<\/span> company_files;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\"> id | stock_id | mime_type | file_name |  file_data\n----+----------+-----------+-----------+--------------\n  1 |        2 | image\/png | logo      | \\x3137323730\n(1 row)<\/code><\/div><\/pre>\n\n\n<h2>Querying PostgreSQL BLOB data<\/h2>\n\n\n\n<p>The following <code>read()<\/code> method reads the BLOB data from the <code>company_files<\/code> table and output the file content to the web browser.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">    <span class=\"hljs-comment\">\/**\n     * Read BLOB from the database and output to the web browser\n     * <span class=\"hljs-doctag\">@param<\/span> int $id\n     *\/<\/span>\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">read<\/span><span class=\"hljs-params\">($id)<\/span> <\/span>{\n\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;beginTransaction();\n\n        $stmt = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;prepare(<span class=\"hljs-string\">\"SELECT id, file_data, mime_type \"<\/span>\n                . <span class=\"hljs-string\">\"FROM company_files \"<\/span>\n                . <span class=\"hljs-string\">\"WHERE id= :id\"<\/span>);\n\n        <span class=\"hljs-comment\">\/\/ query blob from the database<\/span>\n        $stmt-&gt;execute([$id]);\n\n        $stmt-&gt;bindColumn(<span class=\"hljs-string\">'file_data'<\/span>, $fileData, \\PDO::PARAM_STR);\n        $stmt-&gt;bindColumn(<span class=\"hljs-string\">'mime_type'<\/span>, $mimeType, \\PDO::PARAM_STR);\n        $stmt-&gt;fetch(\\PDO::FETCH_BOUND);\n        $stream = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;pgsqlLOBOpen($fileData, <span class=\"hljs-string\">'r'<\/span>);\n\n        <span class=\"hljs-comment\">\/\/ output the file<\/span>\n        header(<span class=\"hljs-string\">\"Content-type: \"<\/span> . $mimeType);\n        fpassthru($stream);\n    }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ol><li>First, prepare a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT<\/a> statement.<\/li><li>Next, execute the <code>SELECT<\/code> statement by calling the <code>execute()<\/code> method.<\/li><li>Then, pass the OID to the <code>pgsqlLOBOpen()<\/code> method of a PDO object to get the stream.<\/li><li>After that, output the stream to based on the mime type of the file.<\/li><li>Finally, because the <code>pgsqlLOBopen()<\/code> must be called within a transaction, we called the <code>beginTransaction()<\/code> at the beginning of the method.<\/li><\/ol>\n\n\n\n<p>To test the read() method, we place the following code in the file.php:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'vendor\/autoload.php'<\/span>;\n\n<span class=\"hljs-keyword\">use<\/span> <span class=\"hljs-title\">PostgreSQLTutorial<\/span>\\<span class=\"hljs-title\">Connection<\/span> <span class=\"hljs-title\">as<\/span> <span class=\"hljs-title\">Connection<\/span>;\n<span class=\"hljs-keyword\">use<\/span> <span class=\"hljs-title\">PostgreSQLTutorial<\/span>\\<span class=\"hljs-title\">BlobDB<\/span> <span class=\"hljs-title\">as<\/span> <span class=\"hljs-title\">BlobDB<\/span>;\n\n$pdo = Connection::get()-&gt;connect();\n$blobDB = <span class=\"hljs-keyword\">new<\/span> BlobDB($pdo);\n\n<span class=\"hljs-comment\">\/\/ get document id from the query string<\/span>\n$id = filter_input(INPUT_GET, <span class=\"hljs-string\">'id'<\/span>, FILTER_SANITIZE_NUMBER_INT);\n\n$file = $blobDB-&gt;read($id);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The file.php file gets the id value from the query string and outputs the file stored in the company_files&nbsp;table to the web browser.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"485\" height=\"169\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-BLOB-example.png\" alt=\"PostgreSQL BLOB example\" class=\"wp-image-2024\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-BLOB-example.png 485w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-BLOB-example-300x105.png 300w\" sizes=\"(max-width: 485px) 100vw, 485px\" \/><\/figure>\n\n\n\n<h2>Deleting PostgreSQL BLOB data<\/h2>\n\n\n\n<p>The following <code>delete()<\/code> method deletes a row in the <code>company_files<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">    <span class=\"hljs-comment\">\/**\n     * Delete the large object in the database\n     * <span class=\"hljs-doctag\">@param<\/span> int $id\n     * <span class=\"hljs-doctag\">@throws<\/span> \\Exception\n     *\/<\/span>\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">delete<\/span><span class=\"hljs-params\">($id)<\/span> <\/span>{\n        <span class=\"hljs-keyword\">try<\/span> {\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;beginTransaction();\n            <span class=\"hljs-comment\">\/\/ select the file data from the database<\/span>\n            $stmt = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;prepare(<span class=\"hljs-string\">'SELECT file_data '<\/span>\n                    . <span class=\"hljs-string\">'FROM company_files '<\/span>\n                    . <span class=\"hljs-string\">'WHERE id=:id'<\/span>);\n            $stmt-&gt;execute([$id]);\n            $stmt-&gt;bindColumn(<span class=\"hljs-string\">'file_data'<\/span>, $fileData, \\PDO::PARAM_STR);\n            $stmt-&gt;closeCursor();\n\n            <span class=\"hljs-comment\">\/\/ delete the large object<\/span>\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;pgsqlLOBUnlink($fileData);\n            $stmt = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;prepare(<span class=\"hljs-string\">\"DELETE FROM company_files WHERE id = :id\"<\/span>);\n            $stmt-&gt;execute([$id]);\n\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;commit();\n        } <span class=\"hljs-keyword\">catch<\/span> (\\<span class=\"hljs-keyword\">Exception<\/span> $e) {\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;rollBack();\n            <span class=\"hljs-keyword\">throw<\/span> $e;\n        }\n    }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ol><li>First, get the OID object from the <code>file_data<\/code> column.<\/li><li>Second, use the\u00a0<code>pgsqlLOBUnLink()<\/code> method to remove the BLOB data and execute the <code>DELETE<\/code> statement to remove a row specified by an ID in the <code>company_files<\/code> table.<\/li><\/ol>\n\n\n\n<p>In this tutorial, we have shown you how to insert, query, and delete BLOB data in the PostgresQL database.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2019\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL PHP: Working with BLOB\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2019\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL PHP: Working with BLOB\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to work with PostgreSQL BLOB using PHP such inserting BLOB, querying BLOB, and deleting BLOB.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1980,"menu_order":7,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL PHP: Working with BLOB<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to work with PostgreSQL BLOB using PHP such inserting BLOB, querying BLOB, and deleting BLOB.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-BLOB.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-BLOB.png\",\"width\":274,\"height\":290},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/\",\"name\":\"PostgreSQL PHP: Working with BLOB\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#primaryimage\"},\"datePublished\":\"2016-06-12T08:49:07+00:00\",\"dateModified\":\"2020-07-10T04:17:08+00:00\",\"description\":\"In this tutorial, you will learn how to work with PostgreSQL BLOB using PHP such inserting BLOB, querying BLOB, and deleting BLOB.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PHP\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL PHP: Working with BLOB\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL PHP: Working with BLOB","description":"In this tutorial, you will learn how to work with PostgreSQL BLOB using PHP such inserting BLOB, querying BLOB, and deleting BLOB.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-BLOB.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/PostgreSQL-PHP-BLOB.png","width":274,"height":290},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/","name":"PostgreSQL PHP: Working with BLOB","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#primaryimage"},"datePublished":"2016-06-12T08:49:07+00:00","dateModified":"2020-07-10T04:17:08+00:00","description":"In this tutorial, you will learn how to work with PostgreSQL BLOB using PHP such inserting BLOB, querying BLOB, and deleting BLOB.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/postgresql-blob\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PHP","item":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL PHP: Working with BLOB"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2019"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2019"}],"version-history":[{"count":2,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2019\/revisions"}],"predecessor-version":[{"id":4561,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2019\/revisions\/4561"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1980"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2019"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}