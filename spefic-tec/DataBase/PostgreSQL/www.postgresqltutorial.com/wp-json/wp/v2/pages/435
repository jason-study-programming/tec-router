{"id":435,"date":"2013-05-28T21:05:47","date_gmt":"2013-05-29T04:05:47","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=435"},"modified":"2020-07-11T06:27:07","modified_gmt":"2020-07-11T13:27:07","slug":"postgresql-left-join","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-left-join\/","title":{"rendered":"PostgreSQL LEFT JOIN"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the PostgreSQL <code>LEFT JOIN<\/code> clause to select data from multiple tables.<\/p>\n\n\n\n<h2>Introduction to PostgreSQL LEFT JOIN clause<\/h2>\n\n\n\n<p>Suppose that you have two tables: <code>A<\/code>\u00a0and <code>B<\/code>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"344\" height=\"94\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/A-and-B-tables1.png\" alt=\"A and B tables\" class=\"wp-image-429\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/A-and-B-tables1.png 344w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/A-and-B-tables1-300x81.png 300w\" sizes=\"(max-width: 344px) 100vw, 344px\" \/><\/figure>\n\n\n\n<p>Each row in the table <code>A<\/code> may have zero or many corresponding rows in the table <code>B<\/code> while each row in the table <code>B<\/code>\u00a0has one and only one corresponding row in the table <code>A<\/code>\u00a0.<\/p>\n\n\n\n<p>To select data from the table <code>A<\/code>\u00a0that may or may not have corresponding rows in the table <code>B<\/code>\u00a0, you use the\u00a0<code>LEFT JOIN<\/code> clause.<\/p>\n\n\n\n<p>The following statement illustrates the <code>LEFT JOIN<\/code> syntax that joins the table <code>A<\/code>  with the table <code>B<\/code> :<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tpka,\n\tc1,\n\tpkb,\n\tc2\n<span class=\"hljs-keyword\">FROM<\/span>\n\tA\n<span class=\"hljs-keyword\">LEFT<\/span> <span class=\"hljs-keyword\">JOIN<\/span> B <span class=\"hljs-keyword\">ON<\/span> pka = fka;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To join the table <code>A<\/code>\u00a0with the table <code>B<\/code>\u00a0table using a left join, you follow these steps:<\/p>\n\n\n\n<ul><li>First, specify the columns in both tables from which you want to select data in the <code>SELECT<\/code> clause.<\/li><li>Second, specify the left table (table <code>A<\/code>) in the <code>FROM<\/code> clause.<\/li><li>Third, specify the right table (table <code>B<\/code>) in the <code>LEFT JOIN<\/code> clause and the join condition after the <code>ON<\/code> keyword.<\/li><\/ul>\n\n\n\n<p>The <code>LEFT JOIN<\/code> clause starts selecting data from the left table. For each row in the left table, it compares the value in the <code>pka<\/code> column with the value of each row in the <code>fka<\/code> column in the right table.<\/p>\n\n\n\n<p>If these values are equal, the left join clause creates a new row that contains columns that appear in the <code>SELECT<\/code> clause and adds this row to the result set.<\/p>\n\n\n\n<p>In case these values are not equal, the left join clause also creates a new row that contains columns that appear in the <code>SELECT<\/code> clause. In addition, it fills the columns that come from the right table with NULL.<\/p>\n\n\n\n<p>The following Venn diagram illustrates how the <code>LEFT JOIN<\/code> clause works:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"378\" height=\"290\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-Join-Left-Join.png\" alt=\"PostgreSQL Join - Left Join\" class=\"wp-image-3676\"\/><\/figure>\n\n\n\n<p>Note that the\u00a0<code>LEFT JOIN<\/code>\u00a0is also referred to as\u00a0<code>LEFT OUTER JOIN<\/code>.<\/p>\n\n\n\n<h2>PostgreSQL LEFT JOIN examples<\/h2>\n\n\n\n<p>Let&#8217;s look at the following <code>film<\/code> and <code>inventory<\/code> tables from the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">sample database<\/a>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"470\" height=\"305\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/film-and-inventory-tables.png\" alt=\"Film and Inventory tables\" class=\"wp-image-438\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/film-and-inventory-tables.png 470w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/film-and-inventory-tables-300x195.png 300w\" sizes=\"(max-width: 470px) 100vw, 470px\" \/><\/figure>\n\n\n\n<p>Each row in the <code>film<\/code> table may have zero or many rows in the <code>inventory<\/code>table. Each row in the <code>inventory<\/code> table has one and only one row in the <code>film<\/code> table. <\/p>\n\n\n\n<p>The <code>film_id<\/code> column establishes the link between the <code>film<\/code> and <code>inventory<\/code> tables.<\/p>\n\n\n\n<p>The following statement uses the <code>LEFT JOIN<\/code> clause to join <code>film<\/code> table with the <code>inventory<\/code>table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfilm.film_id,\n\ttitle,\n\tinventory_id\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm\n<span class=\"hljs-keyword\">LEFT<\/span> <span class=\"hljs-keyword\">JOIN<\/span> inventory \n    <span class=\"hljs-keyword\">ON<\/span> inventory.film_id = film.film_id\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> title;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"373\" height=\"265\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LEFT-JOIN-join-two-tables-example.png\" alt=\"PostgreSQL LEFT JOIN example\" class=\"wp-image-4870\"\/><\/figure>\n\n\n\n<p>When a row from the <code>film<\/code> table does not have a matching row in the <code>inventory<\/code>table, the value of the <code>inventory_id<\/code> column of this row is <code>NULL<\/code>.<\/p>\n\n\n\n<p>The following statement adds a <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/\">WHERE<\/a><\/code> clause to find the films that are not in the inventory:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfilm.film_id,\n\tfilm.title,\n\tinventory_id\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm\n<span class=\"hljs-keyword\">LEFT<\/span> <span class=\"hljs-keyword\">JOIN<\/span> inventory \n   <span class=\"hljs-keyword\">ON<\/span> inventory.film_id = film.film_id\n<span class=\"hljs-keyword\">WHERE<\/span> inventory.film_id <span class=\"hljs-keyword\">IS<\/span> <span class=\"hljs-literal\">NULL<\/span>\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> title;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following statement returns the same result. The difference is that it uses the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-alias\/\">table aliases<\/a> to make the query more concise:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tf.film_id,\n\ttitle,\n\tinventory_id\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm f\n<span class=\"hljs-keyword\">LEFT<\/span> <span class=\"hljs-keyword\">JOIN<\/span> inventory i\n   <span class=\"hljs-keyword\">ON<\/span> i.film_id = f.film_id\n<span class=\"hljs-keyword\">WHERE<\/span> i.film_id <span class=\"hljs-keyword\">IS<\/span> <span class=\"hljs-literal\">NULL<\/span>\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> title;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LEFT-JOIN-with-a-WHERE-clause-example.png\" alt=\"PostgreSQL LEFT JOIN with a WHERE clause example\" class=\"wp-image-4869\" width=\"357\" height=\"291\"\/><\/figure>\n\n\n\n<p>If both tables have the same column name used in the <code>ON<\/code> clause, you can use the <code>USING<\/code> syntax like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tf.film_id,\n\ttitle,\n\tinventory_id\n<span class=\"hljs-keyword\">FROM<\/span>\n\tfilm f\n<span class=\"hljs-keyword\">LEFT<\/span> <span class=\"hljs-keyword\">JOIN<\/span> inventory i <span class=\"hljs-keyword\">USING<\/span> (film_id)\n<span class=\"hljs-keyword\">WHERE<\/span> i.film_id <span class=\"hljs-keyword\">IS<\/span> <span class=\"hljs-literal\">NULL<\/span>\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> title;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This technique is useful when you want to select rows from one table that do not have matching rows in another table.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to use PostgreSQL <code>LEFT JOIN<\/code> clause to select rows from one table that may or may not have corresponding rows in other tables.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"435\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-left-join\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL LEFT JOIN\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"435\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-left-join\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL LEFT JOIN\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn how to use the PostgreSQL LEFT JOIN clause to select data from multiple tables. Introduction to PostgreSQL LEFT JOIN clause Suppose that you have two tables: A\u00a0and B. Each row in the table A may have zero or many corresponding rows in the table B while each row [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":15,"comment_status":"open","ping_status":"open","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL LEFT JOIN<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use PostgreSQL LEFT JOIN clause to select rows from one table that may or may not have corresponding rows in another table.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/A-and-B-tables1.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/A-and-B-tables1.png\",\"width\":344,\"height\":94,\"caption\":\"A and B tables\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/\",\"name\":\"PostgreSQL LEFT JOIN\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#primaryimage\"},\"datePublished\":\"2013-05-29T04:05:47+00:00\",\"dateModified\":\"2020-07-11T13:27:07+00:00\",\"description\":\"This tutorial shows you how to use PostgreSQL LEFT JOIN clause to select rows from one table that may or may not have corresponding rows in another table.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL LEFT JOIN\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL LEFT JOIN","description":"This tutorial shows you how to use PostgreSQL LEFT JOIN clause to select rows from one table that may or may not have corresponding rows in another table.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/A-and-B-tables1.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2013\/05\/A-and-B-tables1.png","width":344,"height":94,"caption":"A and B tables"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/","name":"PostgreSQL LEFT JOIN","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#primaryimage"},"datePublished":"2013-05-29T04:05:47+00:00","dateModified":"2020-07-11T13:27:07+00:00","description":"This tutorial shows you how to use PostgreSQL LEFT JOIN clause to select rows from one table that may or may not have corresponding rows in another table.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-left-join\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL LEFT JOIN"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/435"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=435"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/435\/revisions"}],"predecessor-version":[{"id":4872,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/435\/revisions\/4872"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=435"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}