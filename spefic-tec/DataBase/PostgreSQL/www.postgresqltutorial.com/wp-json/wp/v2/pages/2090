{"id":2090,"date":"2016-06-16T00:34:12","date_gmt":"2016-06-16T07:34:12","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2090"},"modified":"2021-05-25T20:22:04","modified_gmt":"2021-05-26T03:22:04","slug":"transaction","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/","title":{"rendered":"PostgreSQL Python: Transaction"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to handle PostgreSQL transactions in Python using psycopg database adapter.<\/p>\n\n\n\n<h2>Introduction to the transaction in psycopg<\/h2>\n\n\n\n<p>In psycopg, the <code>connection<\/code> class is responsible for handling transactions. When you issue the first SQL statement to the PostgreSQL database using a <code>cursor<\/code> object, psycopg creates a new <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-transaction\/\">transaction<\/a>. <\/p>\n\n\n\n<p>From that moment, psycopg executes all the subsequent statements in the same transaction. If any statement fails, psycopg will abort the transaction.<\/p>\n\n\n\n<p>The <code>connection<\/code> class has two methods for ending a transaction: <code>commit()<\/code> and <code>rollback()<\/code>. If you want to commit all changes to the PostgreSQL database permanently, you call the <code>commit()<\/code> method. And in case you want to cancel the changes, you call the <code>rollback()<\/code> method. Closing the connection object or destroying it using the \u00a0<code>del<\/code> will also result in an implicit rollback.<\/p>\n\n\n\n<p>It is important to notice that a simple <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT<\/a><\/code> statement will start a transaction that may result in undesirable effects such as table bloat and locks. Therefore, if you are developing a long-living application, you should call the <code>commit()<\/code> or <code>rollback()<\/code> method before leaving the connection unused for a long time.<\/p>\n\n\n\n<p>Alternatively, you can set the <code>autocommit<\/code> attribute of the <code>connection<\/code> object to <code>True<\/code>. This ensures that psycopg executes every statement and commits it immediately.<\/p>\n\n\n\n<p>The <code>autocommit<\/code> mode is also useful when you execute statements required to execute outside a transaction such as <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-database\/\">CREATE DATABASE&nbsp;<\/a>&nbsp;and VACUUM.<\/p>\n\n\n\n<p>The following shows a typical pattern for handling a transaction in psycopg:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\"><span class=\"hljs-comment\">#!\/usr\/bin\/python<\/span>\n\n<span class=\"hljs-keyword\">import<\/span> psycopg2\n\nconn = <span class=\"hljs-literal\">None<\/span>\n<span class=\"hljs-keyword\">try<\/span>:\n    conn = psycopg2.connect(dsn)\n    cur = conn.cursor()\n    <span class=\"hljs-comment\"># execute 1st statement<\/span>\n    cur.execute(statement_1)\n    <span class=\"hljs-comment\"># execute 2nd statement<\/span>\n    cur.execute(statement_1)\n    <span class=\"hljs-comment\"># commit the transaction<\/span>\n    conn.commit()\n    <span class=\"hljs-comment\"># close the database communication<\/span>\n    cur.close()\n<span class=\"hljs-keyword\">except<\/span> psycopg2.DatabaseError <span class=\"hljs-keyword\">as<\/span> error:\n    print(error)\n<span class=\"hljs-keyword\">finally<\/span>:\n    <span class=\"hljs-keyword\">if<\/span> conn <span class=\"hljs-keyword\">is<\/span> <span class=\"hljs-keyword\">not<\/span> <span class=\"hljs-literal\">None<\/span>:\n        conn.close()\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Postgres Python transaction example<\/h2>\n\n\n\n<p>We will use the <code>parts<\/code> and <code>vendor_parts<\/code> tables that we created in the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/create-tables\/\">creating table tutorial<\/a> for the demonstration.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"681\" height=\"94\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_vendors_tables.png\" alt=\"parts_vendors_tables\" class=\"wp-image-2143\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_vendors_tables.png 681w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_vendors_tables-300x41.png 300w\" sizes=\"(max-width: 681px) 100vw, 681px\" \/><\/figure>\n\n\n\n<p>Suppose you need to add a new part and assign the vendors who supply the part at the same time. To do this, first, you <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">insert a new row<\/a> into the <code>parts<\/code> table and get the part id. Then, you insert rows into the <code>vendor_parts<\/code> table. The following <code>add_part()<\/code> function demonstrates the idea:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\"><span class=\"hljs-comment\">#!\/usr\/bin\/python<\/span>\n<span class=\"hljs-keyword\">import<\/span> psycopg2\n<span class=\"hljs-keyword\">from<\/span> config <span class=\"hljs-keyword\">import<\/span> config\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add_part<\/span><span class=\"hljs-params\">(part_name, vendor_list)<\/span>:<\/span>\n    <span class=\"hljs-comment\"># statement for inserting a new row into the parts table<\/span>\n    insert_part = <span class=\"hljs-string\">\"INSERT INTO parts(part_name) VALUES(%s) RETURNING part_id;\"<\/span>\n    <span class=\"hljs-comment\"># statement for inserting a new row into the vendor_parts table<\/span>\n    assign_vendor = <span class=\"hljs-string\">\"INSERT INTO vendor_parts(vendor_id,part_id) VALUES(%s,%s)\"<\/span>\n\n    conn = <span class=\"hljs-literal\">None<\/span>\n    <span class=\"hljs-keyword\">try<\/span>:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cur = conn.cursor()\n        <span class=\"hljs-comment\"># insert a new part<\/span>\n        cur.execute(insert_part, (part_name,))\n        <span class=\"hljs-comment\"># get the part id<\/span>\n        part_id = cur.fetchone()[<span class=\"hljs-number\">0<\/span>]\n        <span class=\"hljs-comment\"># assign parts provided by vendors<\/span>\n        <span class=\"hljs-keyword\">for<\/span> vendor_id <span class=\"hljs-keyword\">in<\/span> vendor_list:\n            cur.execute(assign_vendor, (vendor_id, part_id))\n\n        <span class=\"hljs-comment\"># commit changes<\/span>\n        conn.commit()\n    <span class=\"hljs-keyword\">except<\/span> (Exception, psycopg2.DatabaseError) <span class=\"hljs-keyword\">as<\/span> error:\n        print(error)\n    <span class=\"hljs-keyword\">finally<\/span>:\n        <span class=\"hljs-keyword\">if<\/span> conn <span class=\"hljs-keyword\">is<\/span> <span class=\"hljs-keyword\">not<\/span> <span class=\"hljs-literal\">None<\/span>:\n            conn.close()\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To test the <code>add_part()<\/code> function, we call it to insert some parts and assign them to the respective vendors as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\"><span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    add_part(<span class=\"hljs-string\">'SIM Tray'<\/span>, (<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>))\n    add_part(<span class=\"hljs-string\">'Speaker'<\/span>, (<span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>))\n    add_part(<span class=\"hljs-string\">'Vibrator'<\/span>, (<span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">6<\/span>))\n    add_part(<span class=\"hljs-string\">'Antenna'<\/span>, (<span class=\"hljs-number\">6<\/span>, <span class=\"hljs-number\">7<\/span>))\n    add_part(<span class=\"hljs-string\">'Home Button'<\/span>, (<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">5<\/span>))\n    add_part(<span class=\"hljs-string\">'LTE Modem'<\/span>, (<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">5<\/span>))<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Let\u2019s query the <code>parts<\/code> and <code>vendor_parts<\/code> table to confirm the transaction.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">suppliers=<span class=\"hljs-comment\"># select * from parts;<\/span>\n part_id |  part_name\n<span class=\"hljs-comment\">---------+-------------<\/span>\n       1 | SIM Tray\n       2 | Speaker\n       3 | Vibrator\n       4 | Antenna\n       5 | Home Button\n       6 | LTE Modem\n(6 rows)\n\nsuppliers=<span class=\"hljs-comment\"># select * from vendor_parts;<\/span>\n vendor_id | part_id\n<span class=\"hljs-comment\">-----------+---------<\/span>\n         1 |       1\n         2 |       1\n         3 |       2\n         4 |       2\n         5 |       3\n         6 |       3\n         6 |       4\n         7 |       4\n         1 |       5\n         5 |       5\n         1 |       6\n         5 |       6\n(12 rows)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As you see, we have successfully inserted the data into both <code>parts<\/code> and <code>vendor_parts<\/code> tables.<\/p>\n\n\n\n<p>Let&#8217;s insert another part, but this time, we use an invalid vendor id purposefully for the demonstration purpose. The program should not add a new part without assigning it to a vendor.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\"><span class=\"hljs-comment\"># no rows inserted into the parts and vendor_parts tables<\/span>\nadd_part(<span class=\"hljs-string\">'Power Amplifier'<\/span>, (<span class=\"hljs-number\">99<\/span>,))<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>An exception occurred.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">insert or update on table <span class=\"hljs-string\">\"vendor_parts\"<\/span> violates foreign key constraint <span class=\"hljs-string\">\"vendor_parts_vendor_id_fkey\"<\/span>\n<span class=\"hljs-attr\">DETAIL<\/span>:  Key (vendor_id)=(<span class=\"hljs-number\">99<\/span>) is not present <span class=\"hljs-keyword\">in<\/span> table <span class=\"hljs-string\">\"vendors\"<\/span>.<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>We query data from the <code>parts<\/code> and <code>vendor_parts<\/code>&nbsp;tables again, there is no new data, therefore, the function works as expected.<\/p>\n\n\n\n<h2>Transactions using the <code>with<\/code> statement<\/h2>\n\n\n\n<p>Starting from psycopg 2.5, the connection and cursor are <em>Context Managers<\/em> and therefore you can use them with the <code>with<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\"><span class=\"hljs-keyword\">with<\/span> psycopg2.connect(dsn) <span class=\"hljs-keyword\">as<\/span> conn:\n    <span class=\"hljs-keyword\">with<\/span> conn.cursor() <span class=\"hljs-keyword\">as<\/span> cur:\n        cur.execute(sql)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Psycopg commits the transaction if no exception occurs within the <code>with<\/code> block, and otherwise it rolls back the transaction.<\/p>\n\n\n\n<p>Unlike other <a href=\"https:\/\/www.pythontutorial.net\/advanced-python\/python-context-managers\/\" target=\"_blank\" rel=\"noreferrer noopener\">context manager<\/a> objects, exiting the <code>with<\/code> block does not close the connection but only terminates the transaction. As a result, you can use the same <code>connection<\/code> object in the subsequent <code>with<\/code> statement in another transaction\u00a0as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><div><code class=\"hljs language-python\">conn = psycopg2.connect(dsn)\n\n<span class=\"hljs-comment\"># transaction 1<\/span>\n<span class=\"hljs-keyword\">with<\/span> conn:\n    <span class=\"hljs-keyword\">with<\/span> conn.cursor() <span class=\"hljs-keyword\">as<\/span> cur:\n        cur.execute(sql)\n\n<span class=\"hljs-comment\"># transaction 2<\/span>\n<span class=\"hljs-keyword\">with<\/span> conn:\n    <span class=\"hljs-keyword\">with<\/span> conn.cursor() <span class=\"hljs-keyword\">as<\/span> cur:\n        cur.execute(sql)\n\nconn.close()<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you learned how to use the psycopg transaction and how to use transactions to insert data in the PostgreSQL database.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2090\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Python: Transaction\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2090\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Python: Transaction\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to handle PostgreSQL transactions in Python using psycopg database adapter.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":2071,"menu_order":4,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL Python: Handling Transaction in Psycopg<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to handle PostgresQL transactions in Python using psycopg database driver.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_vendors_tables.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_vendors_tables.png\",\"width\":681,\"height\":94},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/\",\"name\":\"PostgreSQL Python: Handling Transaction in Psycopg\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#primaryimage\"},\"datePublished\":\"2016-06-16T07:34:12+00:00\",\"dateModified\":\"2021-05-26T03:22:04+00:00\",\"description\":\"In this tutorial, you will learn how to handle PostgresQL transactions in Python using psycopg database driver.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Python\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL Python: Transaction\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL Python: Handling Transaction in Psycopg","description":"In this tutorial, you will learn how to handle PostgresQL transactions in Python using psycopg database driver.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_vendors_tables.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2016\/06\/parts_vendors_tables.png","width":681,"height":94},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/","name":"PostgreSQL Python: Handling Transaction in Psycopg","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#primaryimage"},"datePublished":"2016-06-16T07:34:12+00:00","dateModified":"2021-05-26T03:22:04+00:00","description":"In this tutorial, you will learn how to handle PostgresQL transactions in Python using psycopg database driver.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/transaction\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Python","item":"https:\/\/www.postgresqltutorial.com\/postgresql-python\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL Python: Transaction"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2090"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2090"}],"version-history":[{"count":3,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2090\/revisions"}],"predecessor-version":[{"id":6079,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2090\/revisions\/6079"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2071"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2090"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}