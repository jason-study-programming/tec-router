{"id":2466,"date":"2017-02-19T02:25:57","date_gmt":"2017-02-19T09:25:57","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2466"},"modified":"2020-07-21T02:09:44","modified_gmt":"2020-07-21T09:09:44","slug":"postgresql-numeric","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-numeric\/","title":{"rendered":"An Overview Of PostgreSQL NUMERIC Type"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the PostgreSQL <code>NUMERIC<\/code> type for storing numeric data.<\/p>\n\n\n\n<h2>Introduction to PostgreSQL NUMERIC data type<\/h2>\n\n\n\n<p>The <code>NUMERIC<\/code> type can store numbers with a lot of digits. Typically, you use the <code>NUMERIC<\/code> type&nbsp;for numbers that require exactness such as monetary amounts or quantities.<\/p>\n\n\n\n<p>The following illustrate the syntax of the <code>NUMERIC<\/code> type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">NUMERIC(precision, scale)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax, the <code>precision<\/code> is the total number of digits and the <code>scale<\/code> is the number of digits in the fraction part. For example, the number <code>1234.567<\/code> has the precision <code>7<\/code> and scale <code>3<\/code>.<\/p>\n\n\n\n<p>The <code>NUMERIC<\/code> type can hold a value up to <code>131,072<\/code> digits before the decimal point <code>16,383<\/code> digits after the decimal point.<\/p>\n\n\n\n<p>The scale of the <code>NUMERIC<\/code> type can be zero or positive. The following shows the syntax of <code>NUMERIC<\/code> type with scale zero:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">NUMERIC(precision)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you omit both <code>precision<\/code> and <code>scale<\/code>, you can store any precision and scale up to the limit of the precision and scale mentioned above.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">NUMERIC<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In PostgreSQL, the <code>NUMERIC<\/code> and <code>DECIMAL<\/code> types are equivalent and both of them are also a part of SQL standard.<\/p>\n\n\n\n<p>If precision is not required, you should not use the <code>NUMERIC<\/code> type because calculations on <code>NUMERIC<\/code> values are typically slower than <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-integer\/\">integers<\/a>, floats, and double precisions.<\/p>\n\n\n\n<h2>PostgreSQL NUMERIC examples<\/h2>\n\n\n\n<p>Let&#8217;s take some example of using the PostgreSQL <code>NUMERIC<\/code> type.<\/p>\n\n\n\n<h3>1) Storing numeric values<\/h3>\n\n\n\n<p>If you store a value with a scale greater than the declared scale of the <code>NUMERIC<\/code> column, PostgreSQL will <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-round\/\">round<\/a> the value to a specified number of fractional digits. <\/p>\n\n\n\n<p>See the following example.<\/p>\n\n\n\n<p>First, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-table\/\">create a new table<\/a> named <code>products<\/code> for the demonstration:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP<\/span> <span class=\"hljs-keyword\">TABLE<\/span> <span class=\"hljs-keyword\">IF<\/span> <span class=\"hljs-keyword\">EXISTS<\/span> products;\n\n<span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> products (\n    <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">SERIAL<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n    <span class=\"hljs-keyword\">name<\/span> <span class=\"hljs-built_in\">VARCHAR<\/span>(<span class=\"hljs-number\">100<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n    price <span class=\"hljs-built_in\">NUMERIC<\/span>(<span class=\"hljs-number\">5<\/span>,<span class=\"hljs-number\">2<\/span>)\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-python\/insert\/\">insert <\/a>some products with prices whose scales exceed the scale declared in the <code>price<\/code> column:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> products (<span class=\"hljs-keyword\">name<\/span>, price)\n<span class=\"hljs-keyword\">VALUES<\/span> (<span class=\"hljs-string\">'Phone'<\/span>,<span class=\"hljs-number\">500.215<\/span>), \n       (<span class=\"hljs-string\">'Tablet'<\/span>,<span class=\"hljs-number\">500.214<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because the scale of the <code>price<\/code> column is 2, PostgreSQL rounds the value <code>500.215<\/code> up to <code>500.22<\/code> and rounds the value <code>500.214<\/code> down to <code>500.21<\/code> :<\/p>\n\n\n\n<p>The following <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">query<\/a> returns all rows of the <code>products<\/code> table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> * <span class=\"hljs-keyword\">FROM<\/span> products;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"186\" height=\"61\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/02\/PostgreSQL-NUMERIC-example.png\" alt=\"PostgreSQL NUMERIC example\" class=\"wp-image-2467\"\/><\/figure>\n\n\n\n<p>In case you store a value whose precision exceeds the declared precision, PostgreSQL will raise an error as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> products (<span class=\"hljs-keyword\">name<\/span>, price)\n<span class=\"hljs-keyword\">VALUES<\/span>(<span class=\"hljs-string\">'Phone'<\/span>,<span class=\"hljs-number\">123456.21<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL issued the following error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">ERROR:  numeric field overflow\nDETAIL:  A field with precision 5, scale 2 must round to an absolute value less than 10^3.<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>PostgreSQL NUMERIC type and NaN<\/h3>\n\n\n\n<p>In addition to holding numeric values, the <code>NUMERIC<\/code> type can also hold a special value called <code>NaN<\/code> which stands for not-a-number. <\/p>\n\n\n\n<p>The following example updates the price of the product id 1 to <code>NaN<\/code> :<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">UPDATE<\/span> products\n<span class=\"hljs-keyword\">SET<\/span> price = <span class=\"hljs-string\">'NaN'<\/span>\n<span class=\"hljs-keyword\">WHERE<\/span> <span class=\"hljs-keyword\">id<\/span> = <span class=\"hljs-number\">1<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Notice that you must use single quotes to wrap the <code>NaN<\/code>&nbsp;as shown in the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\"><code>UPDATE<\/code><\/a> statement above.<\/p>\n\n\n\n<p>The following query returns the data of the <code>products<\/code> table:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">SELECT * FROM products;<\/code><\/div><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"186\" height=\"64\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/02\/PostgreSQL-NUMERIC-NaN-example.png\" alt=\"PostgreSQL NUMERIC NaN example\" class=\"wp-image-2468\"\/><\/figure>\n\n\n\n<p>Typically, the <code>NaN<\/code> is not equal to any number including itself. It means that the expression <code>NaN = NaN<\/code> returns false. <\/p>\n\n\n\n<p>However, two <code>NaN<\/code> values are equal and <code>NaN<\/code> is greater than other numbers. This implementation allows PostgreSQL to sort <code>NUMERIC<\/code> values and use them in tree-based <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-indexes\/\">indexes<\/a>.<\/p>\n\n\n\n<p>The following query <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-order-by\/\">sorts<\/a> the products based on prices:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> * <span class=\"hljs-keyword\">FROM<\/span> products\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> price <span class=\"hljs-keyword\">DESC<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"182\" height=\"61\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/02\/PostgreSQL-NUMERIC-NaN-sorting.png\" alt=\"PostgreSQL NUMERIC NaN Sorting Example\" class=\"wp-image-2469\"\/><\/figure>\n\n\n\n<p>As you can see from the output, the <code>NaN<\/code> is greater than <code>500.21<\/code><\/p>\n\n\n\n<p>In this tutorial, you have learned about the&nbsp;PostgreSQL <code>NUMERIC<\/code> data types and how to use <code>NUMERIC<\/code>&nbsp;column to store numbers.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2466\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-numeric\/\"\n\t\t\t\tdata-post-title=\"An Overview Of PostgreSQL NUMERIC Type\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2466\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-numeric\/\"\n\t\t\t\tdata-post-title=\"An Overview Of PostgreSQL NUMERIC Type\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the PostgreSQL NUMERIC data type and how to use NUMERIC column for storing values that precision is required.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":69,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>An Overview Of PostgreSQL NUMERIC Type with Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the PostgreSQL NUMERIC data type and how to use NUMERIC column for storing values that precision is required.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/02\/PostgreSQL-NUMERIC-example.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/02\/PostgreSQL-NUMERIC-example.png\",\"width\":186,\"height\":61,\"caption\":\"PostgreSQL NUMERIC example\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/\",\"name\":\"An Overview Of PostgreSQL NUMERIC Type with Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#primaryimage\"},\"datePublished\":\"2017-02-19T09:25:57+00:00\",\"dateModified\":\"2020-07-21T09:09:44+00:00\",\"description\":\"In this tutorial, you will learn about the PostgreSQL NUMERIC data type and how to use NUMERIC column for storing values that precision is required.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"An Overview Of PostgreSQL NUMERIC Type\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"An Overview Of PostgreSQL NUMERIC Type with Examples","description":"In this tutorial, you will learn about the PostgreSQL NUMERIC data type and how to use NUMERIC column for storing values that precision is required.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/02\/PostgreSQL-NUMERIC-example.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2017\/02\/PostgreSQL-NUMERIC-example.png","width":186,"height":61,"caption":"PostgreSQL NUMERIC example"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/","name":"An Overview Of PostgreSQL NUMERIC Type with Examples","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#primaryimage"},"datePublished":"2017-02-19T09:25:57+00:00","dateModified":"2020-07-21T09:09:44+00:00","description":"In this tutorial, you will learn about the PostgreSQL NUMERIC data type and how to use NUMERIC column for storing values that precision is required.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-numeric\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"An Overview Of PostgreSQL NUMERIC Type"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2466"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2466"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2466\/revisions"}],"predecessor-version":[{"id":5335,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2466\/revisions\/5335"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2466"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}