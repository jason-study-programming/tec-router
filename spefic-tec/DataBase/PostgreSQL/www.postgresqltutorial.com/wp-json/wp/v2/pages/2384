{"id":2384,"date":"2016-07-02T02:18:43","date_gmt":"2016-07-02T09:18:43","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2384"},"modified":"2020-07-29T23:35:42","modified_gmt":"2020-07-30T06:35:42","slug":"postgresql-recursive-query","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-recursive-query\/","title":{"rendered":"Learn PostgreSQL Recursive Query By Example"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the PostgreSQL recursive query using recursive common table expressions or CTEs.<\/p>\n\n\n\n<h2>Introduction to the PostgreSQL recursive query<\/h2>\n\n\n\n<p>PostgreSQL provides the <code>WITH<\/code> statement that allows you to construct auxiliary statements for use in a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">query<\/a>. <\/p>\n\n\n\n<p>These statements are often referred to as common table expressions or CTEs. The CTEs are like temporary tables that exist only during the execution of the query.<\/p>\n\n\n\n<p>A recursive query is a query that refers to a recursive CTE. The recursive queries are useful in many situations such as querying hierarchical data like organizational structure, bill of materials, etc.<\/p>\n\n\n\n<p>The following illustrates the syntax of a recursive CTE:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">WITH<\/span> <span class=\"hljs-keyword\">RECURSIVE<\/span> cte_name <span class=\"hljs-keyword\">AS<\/span>(\n\u00a0\u00a0\u00a0 CTE_query_definition <span class=\"hljs-comment\">-- non-recursive term<\/span>\n\u00a0\u00a0\u00a0 <span class=\"hljs-keyword\">UNION<\/span> [<span class=\"hljs-keyword\">ALL<\/span>]\n\u00a0\u00a0\u00a0 CTE_query definion  <span class=\"hljs-comment\">-- recursive term<\/span>\n) <span class=\"hljs-keyword\">SELECT<\/span> * <span class=\"hljs-keyword\">FROM<\/span> cte_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>A recursive CTE has three elements:<\/p>\n\n\n\n<ul><li>Non-recursive term: the non-recursive term is a CTE query definition that forms the base result set of the CTE structure.<\/li><li>Recursive term: the recursive term is one or more CTE query definitions joined with the non-recursive term using the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-union\/\">UNION<\/a> or <code>UNION ALL<\/code> operator. The recursive term references the CTE name itself.<\/li><li>Termination check: the recursion stops when no rows are returned from the previous iteration.<\/li><\/ul>\n\n\n\n<p>PostgreSQL executes a recursive CTE in the following sequence:<\/p>\n\n\n\n<ol><li>Execute the non-recursive term to create the&nbsp;base result set (R0).<\/li><li>Execute recursive term with Ri as an input to return the result set Ri+1 as the output.<\/li><li>Repeat step 2 until an empty set is returned. (termination check)<\/li><li>Return the final result set that is a <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-union\/\">UNION<\/a> or <code>UNION ALL<\/code> of the result set R0, R1, &#8230; Rn<\/li><\/ol>\n\n\n\n<h2>PostgreSQL recursive query example<\/h2>\n\n\n\n<p>We will <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-table\/\">create a new table<\/a> to demonstrate the PostgreSQL recursive query.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> employees (\n\temployee_id <span class=\"hljs-built_in\">serial<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n\tfull_name <span class=\"hljs-built_in\">VARCHAR<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n\tmanager_id <span class=\"hljs-built_in\">INT<\/span>\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>employees<\/code> table has three columns: <code>employee_id<\/code>, <code>manager_id<\/code>, and <code>full_name<\/code>. &nbsp;The <code>manager_id<\/code> column specifies the manager id of an employee.<\/p>\n\n\n\n<p>The following statement <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">inserts<\/a> sample data into the <code>employees<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">INSERT INTO employees (\n\temployee_id,\n\tfull_name,\n\tmanager_id\n)\nVALUES\n\t(<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-string\">'Michael North'<\/span>, <span class=\"hljs-keyword\">NULL<\/span>),\n\t(<span class=\"hljs-number\">2<\/span>, <span class=\"hljs-string\">'Megan Berry'<\/span>, <span class=\"hljs-number\">1<\/span>),\n\t(<span class=\"hljs-number\">3<\/span>, <span class=\"hljs-string\">'Sarah Berry'<\/span>, <span class=\"hljs-number\">1<\/span>),\n\t(<span class=\"hljs-number\">4<\/span>, <span class=\"hljs-string\">'Zoe Black'<\/span>, <span class=\"hljs-number\">1<\/span>),\n\t(<span class=\"hljs-number\">5<\/span>, <span class=\"hljs-string\">'Tim James'<\/span>, <span class=\"hljs-number\">1<\/span>),\n\t(<span class=\"hljs-number\">6<\/span>, <span class=\"hljs-string\">'Bella Tucker'<\/span>, <span class=\"hljs-number\">2<\/span>),\n\t(<span class=\"hljs-number\">7<\/span>, <span class=\"hljs-string\">'Ryan Metcalfe'<\/span>, <span class=\"hljs-number\">2<\/span>),\n\t(<span class=\"hljs-number\">8<\/span>, <span class=\"hljs-string\">'Max Mills'<\/span>, <span class=\"hljs-number\">2<\/span>),\n\t(<span class=\"hljs-number\">9<\/span>, <span class=\"hljs-string\">'Benjamin Glover'<\/span>, <span class=\"hljs-number\">2<\/span>),\n\t(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'Carolyn Henderson'<\/span>, <span class=\"hljs-number\">3<\/span>),\n\t(<span class=\"hljs-number\">11<\/span>, <span class=\"hljs-string\">'Nicola Kelly'<\/span>, <span class=\"hljs-number\">3<\/span>),\n\t(<span class=\"hljs-number\">12<\/span>, <span class=\"hljs-string\">'Alexandra Climo'<\/span>, <span class=\"hljs-number\">3<\/span>),\n\t(<span class=\"hljs-number\">13<\/span>, <span class=\"hljs-string\">'Dominic King'<\/span>, <span class=\"hljs-number\">3<\/span>),\n\t(<span class=\"hljs-number\">14<\/span>, <span class=\"hljs-string\">'Leonard Gray'<\/span>, <span class=\"hljs-number\">4<\/span>),\n\t(<span class=\"hljs-number\">15<\/span>, <span class=\"hljs-string\">'Eric Rampling'<\/span>, <span class=\"hljs-number\">4<\/span>),\n\t(<span class=\"hljs-number\">16<\/span>, <span class=\"hljs-string\">'Piers Paige'<\/span>, <span class=\"hljs-number\">7<\/span>),\n\t(<span class=\"hljs-number\">17<\/span>, <span class=\"hljs-string\">'Ryan Henderson'<\/span>, <span class=\"hljs-number\">7<\/span>),\n\t(<span class=\"hljs-number\">18<\/span>, <span class=\"hljs-string\">'Frank Tucker'<\/span>, <span class=\"hljs-number\">8<\/span>),\n\t(<span class=\"hljs-number\">19<\/span>, <span class=\"hljs-string\">'Nathan Ferguson'<\/span>, <span class=\"hljs-number\">8<\/span>),\n\t(<span class=\"hljs-number\">20<\/span>, <span class=\"hljs-string\">'Kevin Rampling'<\/span>, <span class=\"hljs-number\">8<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following query returns all subordinates&nbsp;of the manager with the id 2.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">WITH<\/span> <span class=\"hljs-keyword\">RECURSIVE<\/span> subordinates <span class=\"hljs-keyword\">AS<\/span> (\n\t<span class=\"hljs-keyword\">SELECT<\/span>\n\t\temployee_id,\n\t\tmanager_id,\n\t\tfull_name\n\t<span class=\"hljs-keyword\">FROM<\/span>\n\t\temployees\n\t<span class=\"hljs-keyword\">WHERE<\/span>\n\t\temployee_id = <span class=\"hljs-number\">2<\/span>\n\t<span class=\"hljs-keyword\">UNION<\/span>\n\t\t<span class=\"hljs-keyword\">SELECT<\/span>\n\t\t\te.employee_id,\n\t\t\te.manager_id,\n\t\t\te.full_name\n\t\t<span class=\"hljs-keyword\">FROM<\/span>\n\t\t\temployees e\n\t\t<span class=\"hljs-keyword\">INNER<\/span> <span class=\"hljs-keyword\">JOIN<\/span> subordinates s <span class=\"hljs-keyword\">ON<\/span> s.employee_id = e.manager_id\n) <span class=\"hljs-keyword\">SELECT<\/span>\n\t*\n<span class=\"hljs-keyword\">FROM<\/span>\n\tsubordinates;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works:<\/p>\n\n\n\n<ul><li>The recursive CTE, <span class=\"code\">subordinates<\/span>, defines&nbsp;one non-recursive term and one recursive term.<\/li><li>The non-recursive term returns the base result set R<span class=\"sub\">0 that is the employee with the id 2.<\/span><\/li><\/ul>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"> employee_id | manager_id |  full_name\n<span class=\"hljs-comment\">-------------+------------+-------------<\/span>\n           2 |          1 | Megan Berry<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The recursive term returns the direct subordinate(s) of the employee id 2. This is the result of joining between the <span class=\"code\">employees&nbsp;<\/span>table and the&nbsp;<span class=\"code\">subordinates&nbsp;<\/span>CTE. The first iteration of the recursive term returns the following result set:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"> employee_id | manager_id |    full_name\n<span class=\"hljs-comment\">-------------+------------+-----------------<\/span>\n           6 |          2 | Bella Tucker\n           7 |          2 | Ryan Metcalfe\n           8 |          2 | Max Mills\n           9 |          2 | Benjamin Glover<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PostgreSQL executes the recursive term repeatedly. The second iteration of the recursive member uses the result set above step as the input value, and returns this result set:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"> employee_id | manager_id |    full_name\n<span class=\"hljs-comment\">-------------+------------+-----------------<\/span>\n          16 |          7 | Piers Paige\n          17 |          7 | Ryan Henderson\n          18 |          8 | Frank Tucker\n          19 |          8 | Nathan Ferguson\n          20 |          8 | Kevin Rampling<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The third iteration returns an empty result set because there is no employee reporting to the employee with the id 16, 17, 18, 19, and 20.<\/p>\n\n\n\n<p>PostgreSQL returns the final result set that is the union of all result sets in the first and second iterations generated by the non-recursive and recursive terms.<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\"> employee_id | manager_id |    full_name\n-------------+------------+-----------------\n           2 |          1 | Megan Berry\n           6 |          2 | Bella Tucker\n           7 |          2 | Ryan Metcalfe\n           8 |          2 | Max Mills\n           9 |          2 | Benjamin Glover\n          16 |          7 | Piers Paige\n          17 |          7 | Ryan Henderson\n          18 |          8 | Frank Tucker\n          19 |          8 | Nathan Ferguson\n          20 |          8 | Kevin Rampling\n(10 rows)<\/code><\/div><\/pre>\n\n\n<p>In this tutorial, you have learned how to use the recursive CTEs to construct the PostgreSQL recursive queries.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2384\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-recursive-query\/\"\n\t\t\t\tdata-post-title=\"Learn PostgreSQL Recursive Query By Example\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2384\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-recursive-query\/\"\n\t\t\t\tdata-post-title=\"Learn PostgreSQL Recursive Query By Example\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the PostgreSQL recursive query using recursive common table expressions or CTEs.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":34,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Learn PostgreSQL Recursive Query By Example<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the PostgreSQL recursive query using the recursive common table expressions or recursive CTEs.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/\",\"name\":\"Learn PostgreSQL Recursive Query By Example\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"datePublished\":\"2016-07-02T09:18:43+00:00\",\"dateModified\":\"2020-07-30T06:35:42+00:00\",\"description\":\"In this tutorial, you will learn about the PostgreSQL recursive query using the recursive common table expressions or recursive CTEs.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Learn PostgreSQL Recursive Query By Example\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Learn PostgreSQL Recursive Query By Example","description":"In this tutorial, you will learn about the PostgreSQL recursive query using the recursive common table expressions or recursive CTEs.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/","name":"Learn PostgreSQL Recursive Query By Example","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"datePublished":"2016-07-02T09:18:43+00:00","dateModified":"2020-07-30T06:35:42+00:00","description":"In this tutorial, you will learn about the PostgreSQL recursive query using the recursive common table expressions or recursive CTEs.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"Learn PostgreSQL Recursive Query By Example"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2384"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2384"}],"version-history":[{"count":2,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2384\/revisions"}],"predecessor-version":[{"id":5701,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2384\/revisions\/5701"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2384"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}