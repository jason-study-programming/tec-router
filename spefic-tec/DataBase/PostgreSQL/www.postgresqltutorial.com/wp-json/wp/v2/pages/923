{"id":923,"date":"2014-05-21T01:07:00","date_gmt":"2014-05-21T08:07:00","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=923"},"modified":"2020-10-20T08:17:19","modified_gmt":"2020-10-20T15:17:19","slug":"creating-first-trigger-postgresql","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-triggers\/creating-first-trigger-postgresql\/","title":{"rendered":"PostgreSQL CREATE TRIGGER"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the PostgreSQL <code>CREATE TRIGGER<\/code> statement to create a trigger. <\/p>\n\n\n\n<p>To create a new trigger in PostgreSQL, you follow these steps:<\/p>\n\n\n\n<ul><li>First, create a trigger function using <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-function\/\">CREATE FUNCTION<\/a><\/code> statement.<\/li><li>Second, bind the trigger function to a table by using <code>CREATE TRIGGER<\/code> statement.<\/li><\/ul>\n\n\n\n<p class=\"note\">If you are not familiar with creating a user-defined function, you can check out the <a title=\"PostgreSQL Stored Procedures\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-stored-procedures\/\">PL\/pgSQL section<\/a>.<\/p>\n\n\n\n<h2>Create trigger function syntax<\/h2>\n\n\n\n<p>A trigger function is similar to a regular <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-function\/\">user-defined function<\/a>. However, a trigger function does not take any arguments and has a return value with the type <code>trigger<\/code>.<\/p>\n\n\n\n<p>The following illustrates the syntax of creating trigger function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">FUNCTION<\/span> trigger_function() \n   <span class=\"hljs-keyword\">RETURNS<\/span> <span class=\"hljs-keyword\">TRIGGER<\/span> \n   <span class=\"hljs-keyword\">LANGUAGE<\/span> PLPGSQL\n<span class=\"hljs-keyword\">AS<\/span> $$\n<span class=\"hljs-keyword\">BEGIN<\/span>\n   <span class=\"hljs-comment\">-- trigger logic<\/span>\n<span class=\"hljs-keyword\">END<\/span>;\n$$<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Notice that you can create a trigger function using any languages supported by PostgreSQL. In this tutorial, we will use PL\/pgSQL.<\/p>\n\n\n\n<p>A trigger function receives data about its calling environment through a special structure called TriggerData which contains a set of local variables.<\/p>\n\n\n\n<p>For example, <code>OLD<\/code> and <code>NEW<\/code> represent the states of the row in the table before or after the triggering event. <\/p>\n\n\n\n<p>PostgreSQL also provides other local variables preceded by <code>TG_<\/code>&nbsp;such as <code>TG_WHEN<\/code>, and <code>TG_TABLE_NAME<\/code>.<\/p>\n\n\n\n<p>Once you define a trigger function, you can bind it to one or more trigger events such as <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">INSERT<\/a><\/code>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\"><code>UPDATE<\/code><\/a>, and <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-delete\/\">DELETE<\/a><\/code>.<\/p>\n\n\n\n<h2>Introduction to PostgreSQL <code>CREATE TRIGGER<\/code> statement<\/h2>\n\n\n\n<p>The <code>CREATE TRIGGER<\/code> statement creates a new trigger. The following illustrates the basic syntax of the <code>CREATE TRIGGER<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TRIGGER<\/span> trigger_name \n   {<span class=\"hljs-keyword\">BEFORE<\/span> | <span class=\"hljs-keyword\">AFTER<\/span>} { <span class=\"hljs-keyword\">event<\/span> }\n   <span class=\"hljs-keyword\">ON<\/span> table_name\n   [<span class=\"hljs-keyword\">FOR<\/span> [<span class=\"hljs-keyword\">EACH<\/span>] { <span class=\"hljs-keyword\">ROW<\/span> | <span class=\"hljs-keyword\">STATEMENT<\/span> }]\n       <span class=\"hljs-keyword\">EXECUTE<\/span> <span class=\"hljs-keyword\">PROCEDURE<\/span> trigger_function<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<p>First, specify the name of the trigger after the <code>TRIGGER<\/code> keywords.<\/p>\n\n\n\n<p>Second, specify the timing that cause the trigger to fire. It can be <code>BEFORE<\/code> or <code>AFTER<\/code> an event occurs.<\/p>\n\n\n\n<p>Third, specify the event that invokes the trigger. The event can be <code>INSERT<\/code> , <code>DELETE<\/code>, <code>UPDATE<\/code> or <code>TRUNCATE<\/code>.<\/p>\n\n\n\n<p>Fourth, specify the name of the table associated with the trigger after the <code>ON<\/code> keyword.<\/p>\n\n\n\n<p>Fifth, specify the type of triggers which can be:<\/p>\n\n\n\n<ul><li>Row-level trigger that is specified by the <code>FOR EACH ROW<\/code> clause.<\/li><li>Statement-level trigger that is specified by the <code>FOR EACH STATEMENT<\/code> clause.<\/li><\/ul>\n\n\n\n<p>A row-level trigger is fired for each row while a statement-level trigger is fired for each transaction.<\/p>\n\n\n\n<p>Suppose a table has 100 rows and two triggers that will be fired when a <code>DELETE<\/code> event occurs.<\/p>\n\n\n\n<p>If the <code>DELETE<\/code> statement deletes 100 rows, the row-level trigger will fire 100 times, once for each deleted row. On the other hand, a statement-level trigger will be fired for one time regardless of how many rows are deleted.<\/p>\n\n\n\n<p>Finally, specify the name of the trigger function after the <code>EXECUTE PROCEDURE<\/code> keywords.<\/p>\n\n\n\n<h2>PostgreSQL CREATE TRIGGER example<\/h2>\n\n\n\n<p>The following statement create a new table called <code>employees<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DROP<\/span> <span class=\"hljs-keyword\">TABLE<\/span> <span class=\"hljs-keyword\">IF<\/span> <span class=\"hljs-keyword\">EXISTS<\/span> employees;\n\n<span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> employees(\n   <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">INT<\/span> <span class=\"hljs-keyword\">GENERATED<\/span> <span class=\"hljs-keyword\">ALWAYS<\/span> <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-keyword\">IDENTITY<\/span>,\n   first_name <span class=\"hljs-built_in\">VARCHAR<\/span>(<span class=\"hljs-number\">40<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n   last_name <span class=\"hljs-built_in\">VARCHAR<\/span>(<span class=\"hljs-number\">40<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n   PRIMARY <span class=\"hljs-keyword\">KEY<\/span>(<span class=\"hljs-keyword\">id<\/span>)\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Suppose that when the name of an employee changes, you want to log the changes in a separate table called <code>employee_audits<\/code> :<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> employee_audits (\n   <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">INT<\/span> <span class=\"hljs-keyword\">GENERATED<\/span> <span class=\"hljs-keyword\">ALWAYS<\/span> <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-keyword\">IDENTITY<\/span>,\n   employee_id <span class=\"hljs-built_in\">INT<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n   last_name <span class=\"hljs-built_in\">VARCHAR<\/span>(<span class=\"hljs-number\">40<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n   changed_on <span class=\"hljs-built_in\">TIMESTAMP<\/span>(<span class=\"hljs-number\">6<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>First, create a new function called <code>log_last_name_changes<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">OR<\/span> <span class=\"hljs-keyword\">REPLACE<\/span> <span class=\"hljs-keyword\">FUNCTION<\/span> log_last_name_changes()\n  <span class=\"hljs-keyword\">RETURNS<\/span> <span class=\"hljs-keyword\">TRIGGER<\/span> \n  <span class=\"hljs-keyword\">LANGUAGE<\/span> PLPGSQL\n  <span class=\"hljs-keyword\">AS<\/span>\n$$\n<span class=\"hljs-keyword\">BEGIN<\/span>\n\t<span class=\"hljs-keyword\">IF<\/span> NEW.last_name &lt;&gt; OLD.last_name <span class=\"hljs-keyword\">THEN<\/span>\n\t\t <span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> employee_audits(employee_id,last_name,changed_on)\n\t\t <span class=\"hljs-keyword\">VALUES<\/span>(OLD.id,OLD.last_name,<span class=\"hljs-keyword\">now<\/span>());\n\t<span class=\"hljs-keyword\">END<\/span> <span class=\"hljs-keyword\">IF<\/span>;\n\n\tRETURN NEW;\n<span class=\"hljs-keyword\">END<\/span>;\n$$<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The function inserts the old last name into the <code>employee_audits<\/code> table including employee id, last name, and the time of change if the last name of an employee changes.<\/p>\n\n\n\n<p>The <code>OLD<\/code> represents the row before update while the <code>NEW<\/code> represents the new row that will be updated. The <code>OLD.last_name<\/code> returns the last name before the update and the <code>NEW.last_name<\/code> returns the new last name.<\/p>\n\n\n\n<p>Second, bind the trigger function to the <code>employees<\/code> table. The trigger name is <code>last_name_changes<\/code>. Before the value of the <code>last_name<\/code> column is updated, the trigger function is automatically invoked to log the changes.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TRIGGER<\/span> last_name_changes\n  <span class=\"hljs-keyword\">BEFORE<\/span> <span class=\"hljs-keyword\">UPDATE<\/span>\n  <span class=\"hljs-keyword\">ON<\/span> employees\n  <span class=\"hljs-keyword\">FOR<\/span> <span class=\"hljs-keyword\">EACH<\/span> <span class=\"hljs-keyword\">ROW<\/span>\n  <span class=\"hljs-keyword\">EXECUTE<\/span> <span class=\"hljs-keyword\">PROCEDURE<\/span> log_last_name_changes();<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">insert<\/a> some rows into the <code>employees<\/code> table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> employees (first_name, last_name)\n<span class=\"hljs-keyword\">VALUES<\/span> (<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n\n<span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> employees (first_name, last_name)\n<span class=\"hljs-keyword\">VALUES<\/span> (<span class=\"hljs-string\">'Lily'<\/span>, <span class=\"hljs-string\">'Bush'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Fourth, examine the contents of the <code>employees<\/code>&nbsp;table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> * <span class=\"hljs-keyword\">FROM<\/span> employees;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"403\" height=\"88\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Cretae-Trigger-Sample-Table.png\" alt=\"\" class=\"wp-image-5734\"\/><\/figure>\n\n\n\n<p>Suppose that <code>Lily Bush<\/code> changes her last name to <code>Lily Brown<\/code>. <\/p>\n\n\n\n<p>Fifth, update Lily&#8217;s last name to the new one:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">UPDATE<\/span> employees\n<span class=\"hljs-keyword\">SET<\/span> last_name = <span class=\"hljs-string\">'Brown'<\/span>\n<span class=\"hljs-keyword\">WHERE<\/span> <span class=\"hljs-keyword\">ID<\/span> = <span class=\"hljs-number\">2<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Seventh, check if the last name of <code>Lily<\/code> has been updated:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> * <span class=\"hljs-keyword\">FROM<\/span> employees;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"397\" height=\"86\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Cretae-Trigger-after-update.png\" alt=\"\" class=\"wp-image-5735\"\/><\/figure>\n\n\n\n<p>As you can see from the output, Lily&#8217;s last name has been updated. <\/p>\n\n\n\n<p>Eighth, verify the contents of the <code>employee_audits<\/code>&nbsp;table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> * <span class=\"hljs-keyword\">FROM<\/span> employee_audits;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"550\" height=\"60\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Cretae-Trigger-example.png\" alt=\"\" class=\"wp-image-5736\"\/><\/figure>\n\n\n\n<p>The change was logged in the <code>employee_audits<\/code>&nbsp;table by the trigger.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to use the PostgreSQL <code>CREATE TRIGGER<\/code> to create a new trigger.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"923\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-triggers\/creating-first-trigger-postgresql\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL CREATE TRIGGER\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"923\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-triggers\/creating-first-trigger-postgresql\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL CREATE TRIGGER\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the PostgreSQL CREATE TRIGGER statement to create a trigger. <\/p>\n","protected":false},"author":1,"featured_media":0,"parent":940,"menu_order":1,"comment_status":"closed","ping_status":"open","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL CREATE TRIGGER Statement By Practical Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to use the PostgreSQL CREATE TRIGGER statement to create a trigger.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Cretae-Trigger-Sample-Table.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Cretae-Trigger-Sample-Table.png\",\"width\":403,\"height\":88},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/\",\"name\":\"PostgreSQL CREATE TRIGGER Statement By Practical Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#primaryimage\"},\"datePublished\":\"2014-05-21T08:07:00+00:00\",\"dateModified\":\"2020-10-20T15:17:19+00:00\",\"description\":\"In this tutorial, you will learn how to use the PostgreSQL CREATE TRIGGER statement to create a trigger.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Triggers\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-triggers\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL CREATE TRIGGER\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL CREATE TRIGGER Statement By Practical Examples","description":"In this tutorial, you will learn how to use the PostgreSQL CREATE TRIGGER statement to create a trigger.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Cretae-Trigger-Sample-Table.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Cretae-Trigger-Sample-Table.png","width":403,"height":88},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/","name":"PostgreSQL CREATE TRIGGER Statement By Practical Examples","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#primaryimage"},"datePublished":"2014-05-21T08:07:00+00:00","dateModified":"2020-10-20T15:17:19+00:00","description":"In this tutorial, you will learn how to use the PostgreSQL CREATE TRIGGER statement to create a trigger.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/creating-first-trigger-postgresql\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Triggers","item":"https:\/\/www.postgresqltutorial.com\/postgresql-triggers\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL CREATE TRIGGER"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/923"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=923"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/923\/revisions"}],"predecessor-version":[{"id":5929,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/923\/revisions\/5929"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/940"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=923"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}