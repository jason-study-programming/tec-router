{"id":1135,"date":"2015-07-10T01:53:51","date_gmt":"2015-07-10T08:53:51","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=1135"},"modified":"2020-07-21T02:15:07","modified_gmt":"2020-07-21T09:15:07","slug":"postgresql-json","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-json\/","title":{"rendered":"PostgreSQL JSON"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to how to work with PostgreSQL JSON data type and some useful operators and functions for handling JSON data.<\/p>\n\n\n\n<p>JSON stands for JavaScript Object Notation. JSON is an open standard format that consists of key-value pairs. <\/p>\n\n\n\n<p>The main usage of JSON is to transport\u00a0data between a server and a web application. Unlike other formats, JSON is human-readable text.<\/p>\n\n\n\n<p>PostgreSQL supports native JSON data type since version 9.2.&nbsp;It provides many functions and operators for manipulating JSON data.<\/p>\n\n\n\n<p>Let&#8217;s get started by <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-table\/\">creating a new table<\/a>&nbsp;for practicing with JSON data type.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> orders (\n\t<span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">serial<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n\tinfo <span class=\"hljs-keyword\">json<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>orders<\/code> table consists of two columns:<\/p>\n\n\n\n<ol><li>The&nbsp;<code>id<\/code>&nbsp;column is the primary key column that identifies&nbsp;the order.<\/li><li>The <code>info<\/code> column stores the data in the form of JSON.<\/li><\/ol>\n\n\n\n<h2>Insert JSON data<\/h2>\n\n\n\n<p>To insert data into a&nbsp;JSON column, you have to ensure that data is in a valid JSON format. &nbsp;The following <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">INSERT<\/a><\/code> statement inserts a new row into the <code>orders<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> orders (info)\n<span class=\"hljs-keyword\">VALUES<\/span>(<span class=\"hljs-string\">'{ \"customer\": \"John Doe\", \"items\": {\"product\": \"Beer\",\"qty\": 6}}'<\/span>);\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It means <code>John Doe<\/code> bought <code>6<\/code>&nbsp;bottle of <code>beers<\/code>.<\/p>\n\n\n\n<p>The following statement inserts multiple\u00a0rows at the same time.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> orders (info)\n<span class=\"hljs-keyword\">VALUES<\/span>(<span class=\"hljs-string\">'{ \"customer\": \"Lily Bush\", \"items\": {\"product\": \"Diaper\",\"qty\": 24}}'<\/span>),\n      (<span class=\"hljs-string\">'{ \"customer\": \"Josh William\", \"items\": {\"product\": \"Toy Car\",\"qty\": 1}}'<\/span>),\n      (<span class=\"hljs-string\">'{ \"customer\": \"Mary Clark\", \"items\": {\"product\": \"Toy Train\",\"qty\": 2}}'<\/span>);\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Querying JSON data<\/h2>\n\n\n\n<p>To query JSON data, you use the <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT<\/a><\/code> statement,&nbsp;which is similar to querying&nbsp;other native data types:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> info <span class=\"hljs-keyword\">FROM<\/span> orders;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"390\" height=\"102\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-query-data.jpg\" alt=\"postgresql json query data\" class=\"wp-image-1136\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-query-data.jpg 390w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-query-data-300x78.jpg 300w\" sizes=\"(max-width: 390px) 100vw, 390px\" \/><\/figure>\n\n\n\n<p>PostgreSQL returns a&nbsp;result set in the form of JSON.<\/p>\n\n\n\n<p>PostgreSQL provides two native operators <code>-&gt;<\/code> and <code>-&gt;&gt;<\/code> to help you query JSON data.<\/p>\n\n\n\n<ul><li>The operator <code>-&gt;<\/code> returns JSON object field by key.<\/li><li>The operator <code>-&gt;&gt;<\/code> returns JSON object field by text.<\/li><\/ul>\n\n\n\n<p>The following query&nbsp;uses the operator <code>-&gt;<\/code> to get all customers in form of JSON:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> info -&gt; <span class=\"hljs-string\">'customer'<\/span> <span class=\"hljs-keyword\">AS<\/span> customer\n<span class=\"hljs-keyword\">FROM<\/span> orders;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"120\" height=\"102\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-JSON-native-operator.jpg\" alt=\"postgresql JSON native operator\" class=\"wp-image-1137\"\/><\/figure>\n\n\n\n<p>And the following query&nbsp;uses operator <code>-&gt;&gt;<\/code> to get all customers in form of text:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> info -&gt;&gt; <span class=\"hljs-string\">'customer'<\/span> <span class=\"hljs-keyword\">AS<\/span> customer\n<span class=\"hljs-keyword\">FROM<\/span> orders;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"121\" height=\"102\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-text-operator.jpg\" alt=\"postgresql json text operator\" class=\"wp-image-1138\"\/><\/figure>\n\n\n\n<p>Because <code>-&gt;<\/code> operator returns a JSON object, you can chain it with the operator <code>-&gt;&gt;<\/code> to retrieve a specific node. For example, the following statement returns all products sold:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> info -&gt; <span class=\"hljs-string\">'items'<\/span> -&gt;&gt; <span class=\"hljs-string\">'product'<\/span> <span class=\"hljs-keyword\">as<\/span> product\n<span class=\"hljs-keyword\">FROM<\/span> orders\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> product;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"89\" height=\"102\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-operator-chain.jpg\" alt=\"postgresql json operator chain\" class=\"wp-image-1139\"\/><\/figure>\n\n\n\n<p>First &nbsp;<code>info -&gt; 'items'<\/code> returns items as JSON objects. And then <code>info-&gt;'items'-&gt;&gt;'product'<\/code> returns all products as text.<\/p>\n\n\n\n<h2>Use JSON operator in WHERE clause<\/h2>\n\n\n\n<p>We&nbsp;can use the JSON operators in <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-where\/\">WHERE<\/a><\/code> clause to filter the returning rows. For example, to find out who bought <code>Diaper<\/code>, we&nbsp;use the following query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> info -&gt;&gt; <span class=\"hljs-string\">'customer'<\/span> <span class=\"hljs-keyword\">AS<\/span> customer\n<span class=\"hljs-keyword\">FROM<\/span> orders\n<span class=\"hljs-keyword\">WHERE<\/span> info -&gt; <span class=\"hljs-string\">'items'<\/span> -&gt;&gt; <span class=\"hljs-string\">'product'<\/span> = <span class=\"hljs-string\">'Diaper'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"94\" height=\"43\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-opeartor-in-where-clause.jpg\" alt=\"postgresql json opeartor in where clause\" class=\"wp-image-1140\"\/><\/figure>\n\n\n\n<p>To find out who bought two products at a time, we&nbsp;use the following query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> info -&gt;&gt; <span class=\"hljs-string\">'customer'<\/span> <span class=\"hljs-keyword\">AS<\/span> customer,\n\tinfo -&gt; <span class=\"hljs-string\">'items'<\/span> -&gt;&gt; <span class=\"hljs-string\">'product'<\/span> <span class=\"hljs-keyword\">AS<\/span> product\n<span class=\"hljs-keyword\">FROM<\/span> orders\n<span class=\"hljs-keyword\">WHERE<\/span> <span class=\"hljs-keyword\">CAST<\/span> ( info -&gt; <span class=\"hljs-string\">'items'<\/span> -&gt;&gt; <span class=\"hljs-string\">'qty'<\/span> <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-built_in\">INTEGER<\/span>) = <span class=\"hljs-number\">2<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"167\" height=\"42\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-operator-cast-in-where-clause.jpg\" alt=\"postgresql json operator cast in where clause\" class=\"wp-image-1141\"\/><\/figure>\n\n\n\n<p>Notice that we used the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-cast\/\">type cast<\/a> to convert the <code>qty<\/code> field into <code>INTEGER<\/code>&nbsp;type and compare it with two.<\/p>\n\n\n\n<h2>Apply aggregate functions to JSON data<\/h2>\n\n\n\n<p>We can apply <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-functions\/\">aggregate functions<\/a> such as <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-min-function\/\">MIN<\/a>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-max-function\/\">MAX<\/a>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-avg-function\/\">AVERAGE<\/a>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sum-function\/\">SUM<\/a>, etc., to JSON data. For example, the following statement returns minimum quantity, maximum quantity, average quantity and the total quantity of products sold.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> \n   <span class=\"hljs-keyword\">MIN<\/span> (<span class=\"hljs-keyword\">CAST<\/span> (info -&gt; <span class=\"hljs-string\">'items'<\/span> -&gt;&gt; <span class=\"hljs-string\">'qty'<\/span> <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-built_in\">INTEGER<\/span>)),\n   <span class=\"hljs-keyword\">MAX<\/span> (<span class=\"hljs-keyword\">CAST<\/span> (info -&gt; <span class=\"hljs-string\">'items'<\/span> -&gt;&gt; <span class=\"hljs-string\">'qty'<\/span> <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-built_in\">INTEGER<\/span>)),\n   <span class=\"hljs-keyword\">SUM<\/span> (<span class=\"hljs-keyword\">CAST<\/span> (info -&gt; <span class=\"hljs-string\">'items'<\/span> -&gt;&gt; <span class=\"hljs-string\">'qty'<\/span> <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-built_in\">INTEGER<\/span>)),\n   <span class=\"hljs-keyword\">AVG<\/span> (<span class=\"hljs-keyword\">CAST<\/span> (info -&gt; <span class=\"hljs-string\">'items'<\/span> -&gt;&gt; <span class=\"hljs-string\">'qty'<\/span> <span class=\"hljs-keyword\">AS<\/span> <span class=\"hljs-built_in\">INTEGER<\/span>))\n<span class=\"hljs-keyword\">FROM<\/span> orders;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"224\" height=\"45\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-aggregate-function.jpg\" alt=\"postgresql json aggregate function\" class=\"wp-image-1142\"\/><\/figure>\n\n\n\n<h2>PostgreSQL JSON functions<\/h2>\n\n\n\n<p>PostgreSQL provides us with some functions to help you process JSON data.<\/p>\n\n\n\n<h3>json_each function<\/h3>\n\n\n\n<p>The <code>json_each()<\/code> function allows us&nbsp;to expand the outermost JSON object into a set of key-value pairs. See the following statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> json_each (info)\n<span class=\"hljs-keyword\">FROM<\/span> orders;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"302\" height=\"182\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-json_each-function.jpg\" alt=\"postgresql json json_each function\" class=\"wp-image-1143\" srcset=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-json_each-function.jpg 302w, https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-json_each-function-300x181.jpg 300w\" sizes=\"(max-width: 302px) 100vw, 302px\" \/><\/figure>\n\n\n\n<p>If you want to get a set of key-value pairs as text, you use the&nbsp;<code>json_each_text()<\/code> function instead.<\/p>\n\n\n\n<h3>json_object_keys function<\/h3>\n\n\n\n<p>To get a set of keys in the outermost JSON object, you use the&nbsp;<code>json_object_keys()<\/code>&nbsp;function. The following query returns all keys of the nested <code>items<\/code> object in the <code>info<\/code> column<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> json_object_keys (info-&gt;<span class=\"hljs-string\">'items'<\/span>)\n<span class=\"hljs-keyword\">FROM<\/span> orders;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"134\" height=\"182\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json_object_keys-function.jpg\" alt=\"postgresql json_object_keys function\" class=\"wp-image-1144\"\/><\/figure>\n\n\n\n<h3>json_typeof function<\/h3>\n\n\n\n<p>The <code>json_typeof()<\/code> function returns type of the outermost JSON value as a string. It can be <code>number<\/code>, <code>boolean<\/code>, <code>null<\/code>, <code>object<\/code>, <code>array<\/code>, and <code>string<\/code>.<\/p>\n\n\n\n<p>The following query return the data type of the items:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> json_typeof (info-&gt;<span class=\"hljs-string\">'items'<\/span>)\n<span class=\"hljs-keyword\">FROM<\/span> orders;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"107\" height=\"104\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json_typeof.jpg\" alt=\"postgresql json_typeof\" class=\"wp-image-1145\"\/><\/figure>\n\n\n\n<p>The following query returns the data type of the qty field of the nested items JSON object.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span> json_typeof (info-&gt;<span class=\"hljs-string\">'items'<\/span>-&gt;<span class=\"hljs-string\">'qty'<\/span>)\n<span class=\"hljs-keyword\">FROM<\/span> orders;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"108\" height=\"102\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json_typeof-function.jpg\" alt=\"postgresql json_typeof function\" class=\"wp-image-1146\"\/><\/figure>\n\n\n\n<p>There are more <a href=\"https:\/\/www.postgresql.org\/docs\/current\/static\/functions-json.html\">PostgreSQL JSON functions<\/a> if you want to dig deeper.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to work with PostgreSQL JSON data type and how to use some of the most important JSON operators to process JSON data more effectively.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1135\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-json\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL JSON\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1135\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-json\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL JSON\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to how to work with PostgreSQL JSON data type and some useful operators and functions for handling JSON data.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":78,"comment_status":"closed","ping_status":"open","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL JSON Tutorial<\/title>\n<meta name=\"description\" content=\"We show you how to work with PostgreSQL JSON data and introduce you to some important PostgreSQL JSON operators and functions for handling JSON data.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-json\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-query-data.jpg\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-query-data.jpg\",\"width\":390,\"height\":102,\"caption\":\"postgresql json query data\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-json\/\",\"name\":\"PostgreSQL JSON Tutorial\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#primaryimage\"},\"datePublished\":\"2015-07-10T08:53:51+00:00\",\"dateModified\":\"2020-07-21T09:15:07+00:00\",\"description\":\"We show you how to work with PostgreSQL JSON data and introduce you to some important PostgreSQL JSON operators and functions for handling JSON data.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-json\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL JSON\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL JSON Tutorial","description":"We show you how to work with PostgreSQL JSON data and introduce you to some important PostgreSQL JSON operators and functions for handling JSON data.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-json\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-query-data.jpg","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2015\/07\/postgresql-json-query-data.jpg","width":390,"height":102,"caption":"postgresql json query data"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-json\/","name":"PostgreSQL JSON Tutorial","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#primaryimage"},"datePublished":"2015-07-10T08:53:51+00:00","dateModified":"2020-07-21T09:15:07+00:00","description":"We show you how to work with PostgreSQL JSON data and introduce you to some important PostgreSQL JSON operators and functions for handling JSON data.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-json\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-json\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL JSON"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1135"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=1135"}],"version-history":[{"count":2,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1135\/revisions"}],"predecessor-version":[{"id":5337,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1135\/revisions\/5337"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=1135"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}