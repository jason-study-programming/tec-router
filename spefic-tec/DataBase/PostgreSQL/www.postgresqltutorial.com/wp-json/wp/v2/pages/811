{"id":811,"date":"2013-06-06T22:03:38","date_gmt":"2013-06-07T05:03:38","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=811"},"modified":"2020-10-20T08:03:31","modified_gmt":"2020-10-20T15:03:31","slug":"postgresql-create-function","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/","title":{"rendered":"PostgreSQL Create Function Statement"},"content":{"rendered":"\n<p><b>Summary<\/b>: in this tutorial, you will learn how to use the PostgreSQL <code>CREATE FUNCTION<\/code> statement to develop user-defined functions.<\/p>\n\n\n\n<h2>Introduction to Create Function statement<\/h2>\n\n\n\n<p>The <code>create function<\/code> statement allows you to define a new user-defined function.<\/p>\n\n\n\n<p>The following illustrates the syntax of the <code>create function<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">create<\/span> [<span class=\"hljs-keyword\">or replace<\/span>] <span class=\"hljs-keyword\">function<\/span> function_name(param_list)\n   <span class=\"hljs-keyword\">returns<\/span> return_type \n   <span class=\"hljs-keyword\">language<\/span> plpgsql\n  <span class=\"hljs-keyword\">as<\/span>\n$$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">declare<\/span> \n<span class=\"hljs-comment\">-- variable declaration<\/span>\n<span class=\"hljs-keyword\">begin<\/span>\n <span class=\"hljs-comment\">-- logic<\/span>\n<span class=\"hljs-keyword\">end<\/span>;\n$$<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<ul><li>First, specify the name of the function after the <code>create function<\/code> keywords. If you want to replace the existing function, you can use the <code>or replace<\/code> keywords. <\/li><li>Then, specify the function parameter list surrounded by parentheses after the function name. A function can have zero or many parameters. <\/li><li>Next, specify the datatype of the returned value after the <code>returns<\/code> keyword.<\/li><li>After that, use the <code>language plpgsql<\/code> to specify the procedural language of the function. Note that PostgreSQL supports many procedural languages, not just <code>plpgsql<\/code>.<\/li><li>Finally, place a <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-block-structure\/\">block<\/a> in the <a href=\"https:\/\/www.postgresqltutorial.com\/dollar-quoted-string-constants\/\">dollar-quoted string constant<\/a>. <\/li><\/ul>\n\n\n\n<h2>PostgreSQL Create Function statement examples<\/h2>\n\n\n\n<p>We&#8217;ll use the film table from the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">dvdrental sample database<\/a>.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"244\" height=\"319\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png\" alt=\"\" class=\"wp-image-4017\"\/><\/figure>\n\n\n\n<p>The following statement creates a function that counts the films whose length between the <code>len_from<\/code> and <code>len_to<\/code> parameters:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">create<\/span> <span class=\"hljs-keyword\">function<\/span> get_film_count(len_from <span class=\"hljs-type\">int<\/span>, len_to <span class=\"hljs-type\">int<\/span>)\n<span class=\"hljs-keyword\">returns<\/span> <span class=\"hljs-type\">int<\/span>\n<span class=\"hljs-keyword\">language<\/span> plpgsql\n<span class=\"hljs-keyword\">as<\/span>\n$$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">declare<\/span>\n   film_count <span class=\"hljs-type\">integer<\/span>;\n<span class=\"hljs-keyword\">begin<\/span>\n   <span class=\"hljs-keyword\">select<\/span> count(*) \n   <span class=\"hljs-keyword\">into<\/span> film_count\n   <span class=\"hljs-keyword\">from<\/span> film\n   <span class=\"hljs-keyword\">where<\/span> length <span class=\"hljs-keyword\">between<\/span> len_from <span class=\"hljs-keyword\">and<\/span> len_to;\n   \n   <span class=\"hljs-keyword\">return<\/span> film_count;\n<span class=\"hljs-keyword\">end<\/span>;\n$$<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The function <code>get_film_count<\/code> has two main sections: header and body.<\/p>\n\n\n\n<p>In the header section:<\/p>\n\n\n\n<ul><li>First, the name of the function is <code>get_film_count<\/code> that follows the <code>create function<\/code> keywords.<\/li><li>Second, the <code>get_film_count()<\/code> function accepts two parameters len_from and len_to with the integer datatype.<\/li><li>Third, the <code>get_film_count<\/code> function returns an integer specified by the <code>returns int<\/code> clause.<\/li><li>Finally, the language of the function is <code>plpgsql<\/code> indicated by the <code>language plpgsql<\/code>.<\/li><\/ul>\n\n\n\n<p>In the function body:<\/p>\n\n\n\n<ul><li>Use the <a href=\"https:\/\/www.postgresqltutorial.com\/dollar-quoted-string-constants\/\">dollar-quoted string constant syntax<\/a> that starts with <code>$$<\/code> and ends with <code>$$<\/code>. Between these <code>$$<\/code>, you can place a <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-block-structure\/\">block<\/a> that contains the declaration and logic of the function.<\/li><li>In the declaration section, declare a variable called <code>film_count<\/code> that stores the number of films selected from the <code>film<\/code> table.<\/li><li>In the body of the block, use the <code><a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-select-into\/\">select into<\/a><\/code> statement to select the number of films whose length are between <code>len_from<\/code> and <code>len_to<\/code> and assign the result to the <code>film_count<\/code> variable. At the end of the block, use the <code>return<\/code> statement to return the <code>film_count<\/code>. <\/li><\/ul>\n\n\n\n<p>To execute the create function statement, you can use any PostgreSQL client tool including psql and pgAdmin<\/p>\n\n\n\n<h3>1) Creating a function using pgAdmin<\/h3>\n\n\n\n<p>First, launch the pgAdmin tool and connect to the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">dvdrental sample database<\/a>.<\/p>\n\n\n\n<p>Second, open the query tool by selecting <strong>Tools &gt; Query Tool<\/strong>.<\/p>\n\n\n\n<p>Third, enter the above code int the query tool and click the <strong>Execute<\/strong> button to create the <code>get_film_count<\/code> function.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"566\" height=\"459\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Create-Function-example.png\" alt=\"\" class=\"wp-image-5497\"\/><\/figure>\n\n\n\n<p>If everything is fine, you will see the following message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">CREATE FUNCTION\n\nQuery returned successfully in 44 msec.<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It means that the function <code>get_film_count<\/code> is created successfully.<\/p>\n\n\n\n<p>Finnally, you can find the function <code>get_film_count<\/code> in the <strong>Functions <\/strong>list:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"436\" height=\"419\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-Create-Function-Function-List.png\" alt=\"\" class=\"wp-image-5498\"\/><\/figure>\n\n\n\n<p>In case you could not find the function name, you can right-click the Functions node and select <strong>Refresh&#8230;<\/strong> menu item to refresh the function list.<\/p>\n\n\n\n<h3>2) Creating a function using psql<\/h3>\n\n\n\n<p>First, launch the psql interactive tool and connect to the <code>dvdrental<\/code> database.<\/p>\n\n\n\n<p>Second, enter the above code in the psql to create the function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">dvdrental=# create function get_film_count(len_from int, len_to int)\n<span class=\"hljs-meta\">dvdrental-#<\/span><span class=\"bash\"> returns int<\/span>\n<span class=\"hljs-meta\">dvdrental-#<\/span><span class=\"bash\"> language plpgsql<\/span>\n<span class=\"hljs-meta\">dvdrental-#<\/span><span class=\"bash\"> as<\/span>\n<span class=\"hljs-meta\">dvdrental-#<\/span><span class=\"bash\"> $$<\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\"># declare<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\">#    film_count integer;<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\"># begin<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\">#    select count(*)<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\">#    into film_count<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\">#    from film<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\">#    where length between len_from and len_to;<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\">#<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\">#    return film_count;<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\"># end;<\/span><\/span>\n<span class=\"hljs-meta\">dvdrental$<\/span><span class=\"bash\"><span class=\"hljs-comment\"># $$;<\/span><\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>You will see the following message if the function is created successfully:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">CREATE FUNCTION<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, use the <code>\\df<\/code> command to list all user-defined in the current database:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">dvdrental=# \\df<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Calling a user-defined function<\/h2>\n\n\n\n<p>PostgreSQL provides you with three ways to call a user-defined function:<\/p>\n\n\n\n<ul><li>Using positional notation<\/li><li>Using named notation<\/li><li>Using the mixed notation.<\/li><\/ul>\n\n\n\n<h3>1) Using positional notation<\/h3>\n\n\n\n<p>To call a function using the positional notation, you need to specify the arguments in the same order as parameters. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">select<\/span> get_film_count(<span class=\"hljs-number\">40<\/span>,<span class=\"hljs-number\">90<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\"> get_film_count\n----------------\n            325\n(1 row)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the arguments of the get_film_count() are <code>40<\/code> and <code>90<\/code> that corresponding to the <code>from_len<\/code> and <code>to_len<\/code> parameters.<\/p>\n\n\n\n<p>You call a function using the positional notation when the function has few parameters. <\/p>\n\n\n\n<p>If the function has many parameters, you should call it using the named notation since it will make the function call more obvious.<\/p>\n\n\n\n<h3>2) Using named notation<\/h3>\n\n\n\n<p>The following shows how to call the <code>get_film_count<\/code> function using the positional notation:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">select<\/span> get_film_count(\n    len_from =&gt; <span class=\"hljs-number\">40<\/span>, \n     len_to =&gt; <span class=\"hljs-number\">90<\/span>\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\"> get_film_count\n----------------\n            325\n(1 row)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the named notation, you use the <code>=&gt;<\/code> to separate the argument&#8217;s name and its value.<\/p>\n\n\n\n<p>For backward compatibility, PostgreSQL supports the older syntax based on <code>:=<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">select<\/span> get_film_count(\n    len_from := <span class=\"hljs-number\">40<\/span>, \n    len_to := <span class=\"hljs-number\">90<\/span>\n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>3) Using mixed notation<\/h3>\n\n\n\n<p>The mixed notation is the combination of positional and named notations. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">select<\/span> get_film_count(<span class=\"hljs-number\">40<\/span>, len_to =&gt; <span class=\"hljs-number\">90<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that you cannot use the named arguments before positional arguments like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">select<\/span> get_film_count(len_from =&gt; <span class=\"hljs-number\">40<\/span>, <span class=\"hljs-number\">90<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">ERROR:  positional argument cannot follow named argument\nLINE 1: select get_film_count(len_from =&gt; 40, 90);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned how to use the <code>CREATE FUNCTION<\/code> statement to create a user-defined function.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"811\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Create Function Statement\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"811\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL Create Function Statement\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, we will show you step by step how to develop the first user-defined function using PostgreSQL CREATE FUNCTION statement.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":788,"menu_order":17,"comment_status":"closed","ping_status":"open","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL CREATE FUNCTION By Practical Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, we will show you step by step how to develop the fist user-defined function using PostgreSQL CREATE FUNCTION statement.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png\",\"width\":244,\"height\":319},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/\",\"name\":\"PostgreSQL CREATE FUNCTION By Practical Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#primaryimage\"},\"datePublished\":\"2013-06-07T05:03:38+00:00\",\"dateModified\":\"2020-10-20T15:03:31+00:00\",\"description\":\"In this tutorial, we will show you step by step how to develop the fist user-defined function using PostgreSQL CREATE FUNCTION statement.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PL\/pgSQL\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL Create Function Statement\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL CREATE FUNCTION By Practical Examples","description":"In this tutorial, we will show you step by step how to develop the fist user-defined function using PostgreSQL CREATE FUNCTION statement.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/05\/film.png","width":244,"height":319},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/","name":"PostgreSQL CREATE FUNCTION By Practical Examples","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#primaryimage"},"datePublished":"2013-06-07T05:03:38+00:00","dateModified":"2020-10-20T15:03:31+00:00","description":"In this tutorial, we will show you step by step how to develop the fist user-defined function using PostgreSQL CREATE FUNCTION statement.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/postgresql-create-function\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PL\/pgSQL","item":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL Create Function Statement"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/811"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=811"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/811\/revisions"}],"predecessor-version":[{"id":5926,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/811\/revisions\/5926"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/788"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=811"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}