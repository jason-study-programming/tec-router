{"id":3689,"date":"2018-12-02T01:40:09","date_gmt":"2018-12-02T08:40:09","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=3689"},"modified":"2020-08-02T05:22:51","modified_gmt":"2020-08-02T12:22:51","slug":"postgresql-explain","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-explain\/","title":{"rendered":"PostgreSQL EXPLAIN"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you have learned how to use the PostgreSQL <code>EXPLAIN<\/code> statement to display the execution plan of a statement.<\/p>\n\n\n\n<h2>Introduction to PostgreSQL <code>EXPLAIN<\/code> statement<\/h2>\n\n\n\n<p>The <code>EXPLAIN<\/code> statement returns the execution plan which PostgreSQL planner generates for a given statement.<\/p>\n\n\n\n<p>The <code>EXPLAIN<\/code> shows how tables involved in a statement will be scanned by index scan or sequential scan, etc., and if multiple tables are used, what kind of join algorithm will be used.<\/p>\n\n\n\n<p>The most important and useful information that the <code>EXPLAIN<\/code> statement returns are start-cost before the first row can be returned and the total cost to return the complete result set.<\/p>\n\n\n\n<p>The following shows the syntax of the <code>EXPLAIN<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><div><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">EXPLAIN<\/span> <span class=\"hljs-selector-attr\">[ ( option [, ...]<\/span> ) ] <span class=\"hljs-selector-tag\">sql_statement<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>where <code>option<\/code> can be one of the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">ANALYZE [ boolean ]\nVERBOSE [ boolean ]\nCOSTS [ boolean ]\nBUFFERS [ boolean ]\nTIMING [ boolean ]  \nSUMMARY [ boolean ]\nFORMAT { TEXT | XML | <span class=\"hljs-built_in\">JSON<\/span> | YAML }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>boolean<\/code> specifies whether the selected option should be turned on or off. You can use <code>TRUE<\/code>, <code>ON<\/code>, or <code>1<\/code> to enable the option, and <code>FALSE<\/code>, <code>OFF<\/code>, or <code>0<\/code> to disable it. If you omit the boolean, it defaults to <code>ON<\/code>.<\/p>\n\n\n\n<h3><code>ANALYZE<\/code><\/h3>\n\n\n\n<p>The <code>ANALYZE<\/code> option causes the <code>sql_statement<\/code> to be executed first and then actual run-time statistics in the returned information including total elapsed time expended within each plan node and the number of rows it actually returned.<\/p>\n\n\n\n<p>The <code>ANALYZE<\/code> statement actually executes the SQL statement and discards the output information, therefore, if you want to analyze any statement such as <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">INSERT<\/a><\/code>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\"><code>UPDATE<\/code><\/a>, or <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-delete\/\">DELETE<\/a><\/code> without affecting the data, you should wrap the <code>EXPLAIN ANALYZE<\/code> in a transaction, as follows:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">BEGIN;\n    EXPLAIN ANALYZE sql_statement;\nROLLBACK;<\/code><\/div><\/pre>\n\n\n<h3><code>VERBOSE<\/code><\/h3>\n\n\n\n<p>The <code>VERBOSE<\/code> parameter allows you to show additional information regarding the plan. This parameter sets to <code>FALSE<\/code> by default.<\/p>\n\n\n\n<h3><code>COSTS<\/code><\/h3>\n\n\n\n<p>The <code>COSTS<\/code> option includes the estimated startup and total costs of each plan node, as well as the estimated number of rows and the estimated width of each row in the query plan. The <code>COSTS<\/code> defaults to <code>TRUE<\/code>.<\/p>\n\n\n\n<h3><code>BUFFERS<\/code><\/h3>\n\n\n\n<p>This parameter adds information to the buffer usage. <code>BUFFERS<\/code> only can be used when <code>ANALYZE<\/code> is enabled. By default, the <code>BUFFERS<\/code> parameter set to <code>FALSE<\/code>.<\/p>\n\n\n\n<h3><code>TIMING<\/code><\/h3>\n\n\n\n<p>This parameter includes the actual startup time and time spent in each node in the output. The <code>TIMING<\/code> defaults to <code>TRUE<\/code> and it may only be used when <code>ANALYZE<\/code> is enabled.<\/p>\n\n\n\n<h3><code>SUMMARY<\/code><\/h3>\n\n\n\n<p>The <code>SUMMARY<\/code> parameter adds summary information such as total timing after the query plan. Note that when <code>ANALYZE<\/code> option is used, the summary information is included by default.<\/p>\n\n\n\n<h3><code>FORMAT<\/code><\/h3>\n\n\n\n<p>Specify the output format of the query plan such as <code>TEXT<\/code>, <code>XML<\/code>, <code>JSON<\/code>, and <code>YAML<\/code>. This parameter is set to <code>TEXT<\/code> by default.<\/p>\n\n\n\n<h2>PostgreSQL <code>EXPLAIN<\/code> examples<\/h2>\n\n\n\n<p>The following statement shows the plan for a simple query on the &nbsp;<code>film<\/code> table:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">EXPLAIN SELECT * FROM film;<\/code><\/div><\/pre>\n\n\n<p>The output is as follows:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"347\" height=\"36\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-for-a-simple-query.png\" alt=\"PostgreSQL EXPLAIN - shows plan for a simple query\" class=\"wp-image-3690\"\/><\/figure>\n\n\n\n<p>The following example shows the plan for a query that returns a film by a specific <code>film_id<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">EXPLAIN SELECT * FROM film WHERE film_id = 100;<\/code><\/div><\/pre>\n\n\n<p>Here is the output:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"388\" height=\"54\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-for-a-query-with-an-index.png\" alt=\"PostgreSQL EXPLAIN - shows plan for a query with an index\" class=\"wp-image-3691\"\/><\/figure>\n\n\n\n<p>Because the <code>film_id<\/code> is indexed, the statement returned a different plan. In the output, the planner used an index scan instead of a sequential scan on the <code>film<\/code> table.<\/p>\n\n\n\n<p>To suppress the cost, you can use the <code>COSTS<\/code> option:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">EXPLAIN (COSTS <span class=\"hljs-keyword\">FALSE<\/span>) SELECT\n    *\nFROM\n    film\nWHERE\n    film_id = <span class=\"hljs-number\">100<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"218\" height=\"51\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-without-costs.png\" alt=\"PostgreSQL EXPLAIN - shows plan without costs\" class=\"wp-image-3692\"\/><\/figure>\n\n\n\n<p>The following example displays the plan for a query that uses an aggregate function:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">EXPLAIN SELECT COUNT(*) FROM film;<\/code><\/div><\/pre>\n\n\n<p>The output is:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"339\" height=\"55\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-with-an-aggregate-function.png\" alt=\"PostgreSQL EXPLAIN - shows plan with an aggregate function\" class=\"wp-image-3693\"\/><\/figure>\n\n\n\n<p>The following example returns a plan for a statement that joins multiple tables:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">EXPLAIN\nSELECT\n    f.film_id,\n    title,\n    name category_name\nFROM\n    film f\n    INNER JOIN film_category fc \n        ON fc.film_id = f.film_id\n    INNER JOIN category c \n        ON c.category_id = fc.category_id\nORDER BY\n    title;<\/code><\/div><\/pre>\n\n\n<p>The output is:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"481\" height=\"217\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-for-a-join.png\" alt=\"PostgreSQL EXPLAIN - shows plan for a join\" class=\"wp-image-3694\"\/><\/figure>\n\n\n\n<p>To add the actual runtime statistics to the output, you need to execute the statement using the <code>ANALYZE<\/code> option:<\/p>\n\n\n<pre class=\"wp-block-code\"><div><code class=\"hljs\">EXPLAIN ANALYZE\n    SELECT\n        f.film_id,\n        title,\n        name category_name\n    FROM\n        film f\n        INNER JOIN film_category fc \n            ON fc.film_id = f.film_id\n        INNER JOIN category c \n            ON c.category_id = fc.category_id\n    ORDER BY\n        title;<\/code><\/div><\/pre>\n\n\n<p>Here is the output:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"674\" height=\"308\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-ANALYZE-output.png\" alt=\"PostgreSQL EXPLAIN ANALYZE output\" class=\"wp-image-3695\"\/><\/figure>\n\n\n\n<p>In this tutorial, you have learned how to use the PostgreSQL <code>EXPLAIN<\/code> statement to show the query&#8217;s plan for a specific SQL statement.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"3689\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-explain\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL EXPLAIN\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"3689\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-explain\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL EXPLAIN\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This tutorial explains you the PostgreSQL EXPLAIN statement and shows you how to use it to get the plan for a given query.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":88,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL EXPLAIN Explained<\/title>\n<meta name=\"description\" content=\"This tutorial explains you the PostgreSQL EXPLAIN statement and shows you how to use it to get the plan for a given query.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-for-a-simple-query.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-for-a-simple-query.png\",\"width\":347,\"height\":36,\"caption\":\"PostgreSQL EXPLAIN - shows plan for a simple query\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/\",\"name\":\"PostgreSQL EXPLAIN Explained\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#primaryimage\"},\"datePublished\":\"2018-12-02T08:40:09+00:00\",\"dateModified\":\"2020-08-02T12:22:51+00:00\",\"description\":\"This tutorial explains you the PostgreSQL EXPLAIN statement and shows you how to use it to get the plan for a given query.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL EXPLAIN\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL EXPLAIN Explained","description":"This tutorial explains you the PostgreSQL EXPLAIN statement and shows you how to use it to get the plan for a given query.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-for-a-simple-query.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2018\/12\/PostgreSQL-EXPLAIN-shows-plan-for-a-simple-query.png","width":347,"height":36,"caption":"PostgreSQL EXPLAIN - shows plan for a simple query"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/","name":"PostgreSQL EXPLAIN Explained","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#primaryimage"},"datePublished":"2018-12-02T08:40:09+00:00","dateModified":"2020-08-02T12:22:51+00:00","description":"This tutorial explains you the PostgreSQL EXPLAIN statement and shows you how to use it to get the plan for a given query.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-explain\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-explain\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL EXPLAIN"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/3689"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=3689"}],"version-history":[{"count":3,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/3689\/revisions"}],"predecessor-version":[{"id":5780,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/3689\/revisions\/5780"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=3689"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}