{"id":184,"date":"2012-08-27T22:30:37","date_gmt":"2012-08-28T05:30:37","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=184"},"modified":"2020-07-10T15:37:07","modified_gmt":"2020-07-10T22:37:07","slug":"postgresql-like","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-like\/","title":{"rendered":"PostgreSQL LIKE"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the PostgreSQL LIKE and <code>ILIKE<\/code> operators to query data using pattern matchings.<\/p>\n\n\n\n<h2>Introduction to PostgreSQL LIKE operator<\/h2>\n\n\n\n<p>Suppose that you want to find a customer but you do not remember her name exactly. However, you just remember that her name begins with something like <code>Jen<\/code>. <\/p>\n\n\n\n<p>How do you find the exact customer from the database? You may find the customer in the\u00a0 <code>customer<\/code> table by looking at the first name column to see if there is any value that begins with <code>Jen<\/code>. It will be time-consuming if the customer table has many rows.<\/p>\n\n\n\n<p>Fortunately, you can use the PostgreSQL <code>LIKE<\/code> operator to match the first name of the customer with a string like this query:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n        last_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tfirst_name <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'Jen%'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"338\" height=\"112\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LIKE-operator-simple-example.png\" alt=\"PostgreSQL LIKE operator\" class=\"wp-image-4702\"\/><\/figure>\n\n\n\n<p>Notice that the <code>WHERE<\/code> clause contains a special expression: the <code>first_name<\/code>, the <code>LIKE<\/code> operator and a string that contains a percent sign <code>(%<\/code>). The string <code>'Jen%'<\/code> is called a pattern.<\/p>\n\n\n\n<p>The query returns rows whose values in the first_name column begin with <code>Jen<\/code> and may be followed by any sequence of characters. This technique is called pattern matching.<\/p>\n\n\n\n<p>You construct a pattern by combining literal values with wildcard characters and use the <code>LIKE<\/code> or <code>NOT LIKE<\/code> operator to find the matches. PostgreSQL provides you with two wildcards:<\/p>\n\n\n\n<ul><li>Percent sign ( <code>%<\/code>)\u00a0matches any sequence of zero or more characters.<\/li><li>Underscore sign ( <code>_<\/code>)\u00a0 matches any single character.<\/li><\/ul>\n\n\n\n<p>The syntax of PostgreSQL <code>LIKE<\/code> operator is as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">value LIKE pattern<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The expression returns true if the <code>value<\/code> matches the <code>pattern<\/code>.<\/p>\n\n\n\n<p>To negate the <code>LIKE<\/code> operator, you use the <code>NOT<\/code> operator as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">value NOT LIKE pattern<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>NOT LIKE<\/code> operator returns true when the <code>value<\/code> does not match the <code>pattern<\/code>.<\/p>\n\n\n\n<p>If the pattern does not contain any wildcard character, the <code>LIKE<\/code> operator behaves like the equal ( <code>=<\/code>) operator.<\/p>\n\n\n\n<h2>PostgreSQL LIKE operator &#8211; pattern matching examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the LIKE operator<\/p>\n\n\n\n<h3>PostgreSQL LIKE examples<\/h3>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\t<span class=\"hljs-string\">'foo'<\/span> <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'foo'<\/span>, <span class=\"hljs-comment\">-- true<\/span>\n\t<span class=\"hljs-string\">'foo'<\/span> <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'f%'<\/span>, <span class=\"hljs-comment\">-- true<\/span>\n\t<span class=\"hljs-string\">'foo'<\/span> <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'_o_'<\/span>, <span class=\"hljs-comment\">-- true<\/span>\n\t<span class=\"hljs-string\">'bar'<\/span> <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'b_'<\/span>; <span class=\"hljs-comment\">-- false<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>The first expression returns true because the <code>foo<\/code>pattern does not contain any wildcard character so the <code>LIKE<\/code> operator acts like the equal (<code>=<\/code>) operator.<\/li><li>The second expression returns true because it matches any string that begins with the letter\u00a0 <code>f<\/code> and followed by any number of characters.<\/li><li>The third expression returns true because the pattern ( <code>_o_<\/code>) matches any string that begins with any single character, followed by the letter <code>o<\/code> and ended with any single character.<\/li><li>The fourth expression returns false because the pattern\u00a0 <code>b_<\/code> matches any string that begins with the letter\u00a0 <code>b<\/code> and followed by any single character.<\/li><\/ul>\n\n\n\n<p>It&#8217;s possible to use wildcards at the beginning and\/or end of the pattern. <\/p>\n\n\n\n<p>For example, the following query returns customers whose first name contains\u00a0 <code>er<\/code> string like <code>Jenifer<\/code>, <code>Kimberly<\/code>, etc.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n        last_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tfirst_name <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'%er%'<\/span>\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> \n        first_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"337\" height=\"318\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LIKE-operator-example.png\" alt=\"PostgreSQL LIKE example\" class=\"wp-image-4700\"\/><\/figure>\n\n\n\n<p>You can combine the percent ( <code>%<\/code>) with underscore ( <code>_<\/code>) to construct a pattern as the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tfirst_name <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'_her%'<\/span>\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> \n        first_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"330\" height=\"136\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LIKE-operator-combining-wildcards.png\" alt=\"PostgreSQL LIKE example - combining wildcards\" class=\"wp-image-4699\"\/><\/figure>\n\n\n\n<p>The pattern <code>_her%<\/code> matches any string that:<\/p>\n\n\n\n<ul><li>Begin with any single character (<code>_<\/code>)<\/li><li>And is followed by the literal string <code>her<\/code>.<\/li><li>And is ended with any number of characters.<\/li><\/ul>\n\n\n\n<p>The returned first names are C<strong>her<\/strong>yl, S<strong>her<\/strong>ri, S<strong>her<\/strong>ry, and T<strong>her<\/strong>asa.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h3>PostgreSQL NOT LIKE examples<\/h3>\n\n\n\n<p>The following query uses the <code>NOT LIKE<\/code> operator to find customers whose first names do not begin with <code>Jen<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tfirst_name <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-keyword\">LIKE<\/span> <span class=\"hljs-string\">'Jen%'<\/span>\n<span class=\"hljs-keyword\">ORDER<\/span> <span class=\"hljs-keyword\">BY<\/span> \n        first_name<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"328\" height=\"309\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LIKE-operator-NOT-LIKE-example.png\" alt=\"PostgreSQL NOT LIKE example\" class=\"wp-image-4701\"\/><\/figure>\n\n\n\n<h2>PostgreSQL extensions of LIKE operator<\/h2>\n\n\n\n<p>PostgreSQL supports the <code>ILIKE<\/code> operator that works like the <code>LIKE<\/code> operator. In addition, the <code>ILIKE<\/code> operator matches value case-insensitively. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT<\/span>\n\tfirst_name,\n\tlast_name\n<span class=\"hljs-keyword\">FROM<\/span>\n\tcustomer\n<span class=\"hljs-keyword\">WHERE<\/span>\n\tfirst_name <span class=\"hljs-keyword\">ILIKE<\/span> <span class=\"hljs-string\">'BAR%'<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"341\" height=\"84\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-ILIKE-example.png\" alt=\"PostgreSQL ILIKE example\" class=\"wp-image-4703\"\/><\/figure>\n\n\n\n<p>The&nbsp; <code>BAR%<\/code> pattern matches any string that begins with <code>BAR<\/code>, <code>Bar<\/code>, <code>BaR<\/code>, etc. If you use the <code>LIKE<\/code> operator instead, the query will not return any row.<\/p>\n\n\n\n<p>PostgreSQL also provides some operators that act like the <code>LIKE, NOT LIKE, ILIKE<\/code> and <code>NOT ILIKE<\/code> operator as shown below:<\/p>\n\n\n\n<figure class=\"wp-block-table is-style-regular\"><table><thead><tr><th>Operator<\/th><th>Equivalent<\/th><\/tr><\/thead><tbody><tr><td>~~<\/td><td>LIKE<\/td><\/tr><tr><td>~~*<\/td><td>ILIKE<\/td><\/tr><tr><td>!~~<\/td><td>NOT LIKE<\/td><\/tr><tr><td>!~~*<\/td><td>NOT ILIKE<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>In this tutorial, you have learned how to use the PostgreSQL <code>LIKE<\/code> and <code>ILIKE<\/code> operators to query data using pattern matching.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"184\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-like\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL LIKE\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"184\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-like\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL LIKE\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn how to use the PostgreSQL LIKE and ILIKE operators to query data using pattern matchings. Introduction to PostgreSQL LIKE operator Suppose that you want to find a customer but you do not remember her name exactly. However, you just remember that her name begins with something like Jen. [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":10,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL LIKE - Querying Data by Using Pattern Matching Techniques<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use PostgreSQL LIKE and ILIKE operator to query data by using pattern matching techniques.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LIKE-operator-simple-example.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LIKE-operator-simple-example.png\",\"width\":338,\"height\":112},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/\",\"name\":\"PostgreSQL LIKE - Querying Data by Using Pattern Matching Techniques\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#primaryimage\"},\"datePublished\":\"2012-08-28T05:30:37+00:00\",\"dateModified\":\"2020-07-10T22:37:07+00:00\",\"description\":\"This tutorial shows you how to use PostgreSQL LIKE and ILIKE operator to query data by using pattern matching techniques.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL LIKE\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL LIKE - Querying Data by Using Pattern Matching Techniques","description":"This tutorial shows you how to use PostgreSQL LIKE and ILIKE operator to query data by using pattern matching techniques.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-like\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LIKE-operator-simple-example.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2020\/07\/PostgreSQL-LIKE-operator-simple-example.png","width":338,"height":112},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-like\/","name":"PostgreSQL LIKE - Querying Data by Using Pattern Matching Techniques","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#primaryimage"},"datePublished":"2012-08-28T05:30:37+00:00","dateModified":"2020-07-10T22:37:07+00:00","description":"This tutorial shows you how to use PostgreSQL LIKE and ILIKE operator to query data by using pattern matching techniques.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-like\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-like\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL LIKE"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/184"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=184"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/184\/revisions"}],"predecessor-version":[{"id":4710,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/184\/revisions\/4710"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=184"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}