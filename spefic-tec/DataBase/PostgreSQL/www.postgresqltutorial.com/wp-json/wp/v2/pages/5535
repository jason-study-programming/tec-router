{"id":5535,"date":"2020-07-25T02:27:24","date_gmt":"2020-07-25T09:27:24","guid":{"rendered":"https:\/\/www.postgresqltutorial.com\/?page_id=5535"},"modified":"2020-08-05T17:45:08","modified_gmt":"2020-08-06T00:45:08","slug":"plpgsql-record-types","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/","title":{"rendered":"PL\/pgSQL Record Types"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the PL\/pgSQL record types that allow you to define variables that can hold a single row from a result set.<\/p>\n\n\n\n<h3>Introduction to PL\/pgSQL record types<\/h3>\n\n\n\n<p>PostgreSQL provides a &#8220;type&#8221; called the <code>record<\/code> that is similar to the <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-row-types\/\">row-type<\/a>. <\/p>\n\n\n\n<p>To declare a <code>record<\/code> variable, you use a variable name followed by the <code>record<\/code> keyword like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\">variable_name <span class=\"hljs-type\">record<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>A <code>record<\/code> variable is similar to a <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-row-types\/\">row-type variable<\/a>. It can hold only one row of a result set. <\/p>\n\n\n\n<p>Unlike a row-type variable, a <code>record<\/code> variable does not have a predefined structure. The structure of a <code>record<\/code> variable is determined when the <code><a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-select-into\/\">select<\/a><\/code> or <code><a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-for-loop\/\">for<\/a><\/code> statement assigns an actual row to it. <\/p>\n\n\n\n<p>To access a field in the record, you use the dot notation (<code>.<\/code>) syntax like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\">record_variable.field_name;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you attempt to access a field in a record variable before it is assigned, you will get an error.<\/p>\n\n\n\n<p>In fact, a record is not a true data type. It is just a placeholder. Also, a record variable can change its structure when you reassign it.<\/p>\n\n\n\n<h2>PL\/pgSQL record examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the record variables.<\/p>\n\n\n\n<h3>1) Using record with the select into statement<\/h3>\n\n\n\n<p>The following example illustrates how to use the record variable with the <code>select into<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span>\n$$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">declare<\/span>\n\trec <span class=\"hljs-type\">record<\/span>;\n<span class=\"hljs-keyword\">begin<\/span>\n\t<span class=\"hljs-comment\">-- select the film <\/span>\n\t<span class=\"hljs-keyword\">select<\/span> film_id, title, length \n\t<span class=\"hljs-keyword\">into<\/span> rec\n\t<span class=\"hljs-keyword\">from<\/span> film\n\t<span class=\"hljs-keyword\">where<\/span> film_id = <span class=\"hljs-number\">200<\/span>;\n\t\n\t<span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'% % %'<\/span>, rec.film_id, rec.title, rec.length;   \n\t\n<span class=\"hljs-keyword\">end<\/span>;\n$$<\/span>\n<span class=\"hljs-keyword\">language<\/span> plpgsql;\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, declare a record variable called <code>rec<\/code> in the declaration section.<\/li><li>Second use the <code>select into<\/code> statement to select a row whose <code>film_id<\/code> is 200 into the <code>rec<\/code> variable<\/li><li>Third, print out the information of the film via the record variable.<\/li><\/ul>\n\n\n\n<h3>2) Using record variables in the for loop statement<\/h3>\n\n\n\n<p>The following shows how to use a record variable in a <code>for loop<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PostgreSQL SQL dialect and PL\/pgSQL\" data-shcb-language-slug=\"pgsql\"><div><code class=\"hljs language-pgsql\"><span class=\"hljs-keyword\">do<\/span>\n$$<span class=\"pgsql\">\n<span class=\"hljs-keyword\">declare<\/span>\n\trec <span class=\"hljs-type\">record<\/span>;\n<span class=\"hljs-keyword\">begin<\/span>\n\t<span class=\"hljs-keyword\">for<\/span> rec <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-keyword\">select<\/span> title, length \n\t\t\t<span class=\"hljs-keyword\">from<\/span> film \n\t\t\t<span class=\"hljs-keyword\">where<\/span> length &gt; <span class=\"hljs-number\">50<\/span>\n\t\t\t<span class=\"hljs-keyword\">order<\/span> <span class=\"hljs-keyword\">by<\/span> length\n\t<span class=\"hljs-keyword\">loop<\/span>\n\t\t<span class=\"hljs-keyword\">raise<\/span> <span class=\"hljs-keyword\">notice<\/span> <span class=\"hljs-string\">'% (%)'<\/span>, rec.title, rec.length;\t\n\t<span class=\"hljs-keyword\">end<\/span> <span class=\"hljs-keyword\">loop<\/span>;\n<span class=\"hljs-keyword\">end<\/span>;\n$$<\/span><\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PostgreSQL SQL dialect and PL\/pgSQL<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">pgsql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here is the parial output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><div><code class=\"hljs language-shell\">NOTICE:  Hall Cassidy (51)\nNOTICE:  Champion Flatliners (51)\nNOTICE:  Deep Crusade (51)\nNOTICE:  Simon North (51)\nNOTICE:  English Bulworth (51)\n...<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"note\">Note that you will learn more about the <code><a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-for-loop\/\">for loop<\/a><\/code> statement in the <a href=\"https:\/\/www.postgresqltutorial.com\/plpgsql-for-loop\/\">for loop tutorial<\/a>.<\/p>\n\n\n\n<p>How it works:<\/p>\n\n\n\n<ul><li>First, declare a variable named r with the type <code>record<\/code>.<\/li><li>Second, use the <code>for loop<\/code> statement to fetch rows from the <code>film<\/code> table (in the <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-sample-database\/\">sample database<\/a>).  The <code>for loop<\/code> statement assigns the row that consists of <code>title<\/code> and <code>length<\/code> to the <code>rec<\/code> variable in each iteration.  <\/li><li>Third, show the contents of the fields of the record variable by using the dot notation (<code>rec.title<\/code> and <code>rec.length<\/code>)<\/li><\/ul>\n\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>A record is a placeholder that can hold a single row of a result set.<\/li><li>A record has not predefined structure like a row variable. Its structure is determined when you assign a row to it.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"5535\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Record Types\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"5535\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/\"\n\t\t\t\tdata-post-title=\"PL\/pgSQL Record Types\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the PL\/pgSQL record types.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":788,"menu_order":6,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PL\/pgSQL Record Types Explained Clearly By Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the PL\/pgSQL record types that allow you to define variables that can hold a sinle row of a result set.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/\",\"name\":\"PL\/pgSQL Record Types Explained Clearly By Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"datePublished\":\"2020-07-25T09:27:24+00:00\",\"dateModified\":\"2020-08-06T00:45:08+00:00\",\"description\":\"In this tutorial, you will learn about the PL\/pgSQL record types that allow you to define variables that can hold a sinle row of a result set.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PL\/pgSQL\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PL\/pgSQL Record Types\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PL\/pgSQL Record Types Explained Clearly By Examples","description":"In this tutorial, you will learn about the PL\/pgSQL record types that allow you to define variables that can hold a sinle row of a result set.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/","twitter_misc":{"Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/","name":"PL\/pgSQL Record Types Explained Clearly By Examples","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"datePublished":"2020-07-25T09:27:24+00:00","dateModified":"2020-08-06T00:45:08+00:00","description":"In this tutorial, you will learn about the PL\/pgSQL record types that allow you to define variables that can hold a sinle row of a result set.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/plpgsql-record-types\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PL\/pgSQL","item":"https:\/\/www.postgresqltutorial.com\/postgresql-plpgsql\/"},{"@type":"ListItem","position":3,"name":"PL\/pgSQL Record Types"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5535"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=5535"}],"version-history":[{"count":5,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5535\/revisions"}],"predecessor-version":[{"id":5876,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/5535\/revisions\/5876"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/788"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=5535"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}