{"id":2042,"date":"2016-06-13T04:38:10","date_gmt":"2016-06-13T11:38:10","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=2042"},"modified":"2022-02-09T07:54:47","modified_gmt":"2022-02-09T14:54:47","slug":"transaction","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/","title":{"rendered":"PostgreSQL PHP: Transaction"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to perform transactions in PostgreSQL using PHP PDO.<\/p>\n\n\n\n<p>A transaction is a series of operations performed as a single logical unit of work. A transaction has four characteristics: <\/p>\n\n\n\n<ul><li>Atomicity <\/li><li>Consistency<\/li><li>Isolation <\/li><li>Durability<\/li><\/ul>\n\n\n\n<p>These characteristics are referred to as (<a href=\"https:\/\/en.wikipedia.org\/wiki\/ACID\">ACID<\/a>).<\/p>\n\n\n\n<p>By default, PostgreSQL uses the auto-commit mode. This means that for every statement that the application issues, PostgreSQL commits it automatically.<\/p>\n\n\n\n<p>To turn off the auto-commit mode in PHP, you call the <code>beginTransaction()<\/code> method of the PDO object. By doing this, the change to the database is made only when the <code>commit()<\/code> method of the PDO object is called.<\/p>\n\n\n\n<p>If there is an exception or error happens, you can cancel the change using the <code>rollback()<\/code> method of the PDO object.<\/p>\n\n\n\n<p>The typical usage of the transaction in PHP PDO is as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">try<\/span> {\n    $pdo-&gt;beginTransaction();\n\n    $pdo-&gt;query(<span class=\"hljs-string\">\"SELECT * FROM table\"<\/span>);\n\n    $stmt = $pdo-&gt;prepare(<span class=\"hljs-string\">\"UPDATE QUERY\"<\/span>);\n    $stmt-&gt;execute();\n\n    $stmt = $pdo-&gt;prepare(<span class=\"hljs-string\">\"ANOTHER UPADTE QUERY\"<\/span>);\n    $stmt-&gt;execute();\n\n    $db-&gt;commit();\n} <span class=\"hljs-keyword\">catch<\/span> (\\PDOException $e) {\n    $db-&gt;rollBack();\n    <span class=\"hljs-keyword\">throw<\/span> $e;\n}<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 id=\"postgresql-php-transaction-example\">PostgreSQL PHP transaction example<\/h2>\n\n\n\n<p>We&#8217;ll create the following tables for the demonstration:<\/p>\n\n\n\n<ol><li>&nbsp;<code>accounts<\/code>: stores the account information such as first name, last name<\/li><li>&nbsp;<code>plans<\/code>: stores the plan information for the account such as silver, gold, and platinum.<\/li><li>&nbsp;<code>account_plans<\/code> : stores the plan for each account with the effective date.<\/li><\/ol>\n\n\n\n<p>The following <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-create-table\/\">CREATE TABLE<\/a> statements create the three tables:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> accounts(\n   <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">SERIAL<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n   first_name <span class=\"hljs-built_in\">CHARACTER<\/span> <span class=\"hljs-built_in\">VARYING<\/span>(<span class=\"hljs-number\">100<\/span>),\n   last_name <span class=\"hljs-built_in\">CHARACTER<\/span> <span class=\"hljs-built_in\">VARYING<\/span>(<span class=\"hljs-number\">100<\/span>)\n);\n\n<span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> plans(\n   <span class=\"hljs-keyword\">id<\/span> <span class=\"hljs-built_in\">SERIAL<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span>,\n   plan <span class=\"hljs-built_in\">CHARACTER<\/span> <span class=\"hljs-built_in\">VARYING<\/span>(<span class=\"hljs-number\">10<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>\n);\n\n<span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> account_plans(\n   account_id <span class=\"hljs-built_in\">INTEGER<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n   plan_id <span class=\"hljs-built_in\">INTEGER<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n   effective_date <span class=\"hljs-built_in\">DATE<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>,\n   PRIMARY <span class=\"hljs-keyword\">KEY<\/span> (account_id,plan_id),\n   <span class=\"hljs-keyword\">FOREIGN<\/span> <span class=\"hljs-keyword\">KEY<\/span>(account_id) <span class=\"hljs-keyword\">REFERENCES<\/span> accounts(<span class=\"hljs-keyword\">id<\/span>),\n   <span class=\"hljs-keyword\">FOREIGN<\/span> <span class=\"hljs-keyword\">KEY<\/span>(plan_id) <span class=\"hljs-keyword\">REFERENCES<\/span> plans(<span class=\"hljs-keyword\">id<\/span>)\n \n);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/insert\/\">INSERT<\/a> statement inserts some sample data into the <code>plans<\/code> table.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT<\/span> <span class=\"hljs-keyword\">INTO<\/span> plans(plan) <span class=\"hljs-keyword\">VALUES<\/span>(<span class=\"hljs-string\">'SILVER'<\/span>),(<span class=\"hljs-string\">'GOLD'<\/span>),(<span class=\"hljs-string\">'PLATINUM'<\/span>);<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When creating an account, you need to assign a plan that can be silver, gold, or platinum. To ensure that an account always has at least one plan at a time, you use the transaction API in PDO.<\/p>\n\n\n\n<p>The following <code>addAccount()<\/code> method performs two main steps:<\/p>\n\n\n\n<ol><li>First, insert an account into the <code>accounts<\/code> table and returns the account id.<\/li><li>Then, assign&nbsp;the account a specific plan by inserting a new row into the <code>account_plans<\/code> table.<\/li><\/ol>\n\n\n\n<p>At the beginning of the method, you call the <code>beginTransaction()<\/code> method of the PDO object to start the transaction.<\/p>\n\n\n\n<p>If all the steps succeed, you call the <code>commit()<\/code> method to save the changes. If an exception occurs in any step, you roll back the changes by calling the <code>rollback()<\/code> method in the <code>catch<\/code> block.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">   <span class=\"hljs-comment\">\/**\n     * Add a new account\n     * <span class=\"hljs-doctag\">@param<\/span> string $firstName\n     * <span class=\"hljs-doctag\">@param<\/span> string $lastName\n     * <span class=\"hljs-doctag\">@param<\/span> int $planId\n     * <span class=\"hljs-doctag\">@param<\/span> date $effectiveDate\n     *\/<\/span>\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">addAccount<\/span><span class=\"hljs-params\">($firstName, $lastName, $planId, $effectiveDate)<\/span> <\/span>{\n        <span class=\"hljs-keyword\">try<\/span> {\n            <span class=\"hljs-comment\">\/\/ start the transaction<\/span>\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;beginTransaction();\n\n            <span class=\"hljs-comment\">\/\/ insert an account and get the ID back<\/span>\n            $accountId = <span class=\"hljs-keyword\">$this<\/span>-&gt;insertAccount($firstName, $lastName);\n\n            <span class=\"hljs-comment\">\/\/ add plan for the account<\/span>\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;insertPlan($accountId, $planId, $effectiveDate);\n\n            <span class=\"hljs-comment\">\/\/ commit the changes<\/span>\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;commit();\n        } <span class=\"hljs-keyword\">catch<\/span> (\\PDOException $e) {\n            <span class=\"hljs-comment\">\/\/ rollback the changes<\/span>\n            <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;rollBack();\n            <span class=\"hljs-keyword\">throw<\/span> $e;\n        }\n    }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>addAccount()<\/code> method uses two other private methods: <code>insertAccount()<\/code> and <code>insertPlan()<\/code> as the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">   <span class=\"hljs-comment\">\/**\n     * \n     * <span class=\"hljs-doctag\">@param<\/span> string $firstName\n     * <span class=\"hljs-doctag\">@param<\/span> string $lastName\n     * <span class=\"hljs-doctag\">@return<\/span> int\n     *\/<\/span>\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">insertAccount<\/span><span class=\"hljs-params\">($firstName, $lastName)<\/span> <\/span>{\n        $stmt = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;prepare(\n                <span class=\"hljs-string\">'INSERT INTO accounts(first_name,last_name) '<\/span>\n                . <span class=\"hljs-string\">'VALUES(:first_name,:last_name)'<\/span>);\n\n        $stmt-&gt;execute([\n            <span class=\"hljs-string\">':first_name'<\/span> =&gt; $firstName,\n            <span class=\"hljs-string\">':last_name'<\/span> =&gt; $lastName\n        ]);\n\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;lastInsertId(<span class=\"hljs-string\">'accounts_id_seq'<\/span>);\n    }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">   <span class=\"hljs-comment\">\/**\n     * insert a new plan for an account\n     * <span class=\"hljs-doctag\">@param<\/span> int $accountId\n     * <span class=\"hljs-doctag\">@param<\/span> int $planId\n     * <span class=\"hljs-doctag\">@param<\/span> int $effectiveDate\n     * <span class=\"hljs-doctag\">@return<\/span> bool\n     *\/<\/span>\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">insertPlan<\/span><span class=\"hljs-params\">($accountId, $planId, $effectiveDate)<\/span> <\/span>{\n        $stmt = <span class=\"hljs-keyword\">$this<\/span>-&gt;pdo-&gt;prepare(\n                <span class=\"hljs-string\">'INSERT INTO account_plans(account_id,plan_id,effective_date) '<\/span>\n                . <span class=\"hljs-string\">'VALUES(:account_id,:plan_id,:effective_date)'<\/span>);\n\n        <span class=\"hljs-keyword\">return<\/span> $stmt-&gt;execute([\n                    <span class=\"hljs-string\">':account_id'<\/span> =&gt; $accountId,\n                    <span class=\"hljs-string\">':plan_id'<\/span> =&gt; $planId,\n                    <span class=\"hljs-string\">':effective_date'<\/span> =&gt; $effectiveDate,\n        ]);\n    }<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To test the <code>AccountDB<\/code> class, you use the following code in the <code>index.php<\/code> file.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'vendor\/autoload.php'<\/span>;\n\n<span class=\"hljs-keyword\">use<\/span> <span class=\"hljs-title\">PostgreSQLTutorial<\/span>\\<span class=\"hljs-title\">Connection<\/span> <span class=\"hljs-title\">as<\/span> <span class=\"hljs-title\">Connection<\/span>;\n<span class=\"hljs-keyword\">use<\/span> <span class=\"hljs-title\">PostgreSQLTutorial<\/span>\\<span class=\"hljs-title\">AccountDB<\/span> <span class=\"hljs-title\">as<\/span> <span class=\"hljs-title\">AccountDB<\/span>;\n\n<span class=\"hljs-keyword\">try<\/span> {\n    <span class=\"hljs-comment\">\/\/ connect to the PostgreSQL database<\/span>\n    $pdo = Connection::get()-&gt;connect();\n\n    $accountDB = <span class=\"hljs-keyword\">new<\/span> AccountDB($pdo);\n\n    <span class=\"hljs-comment\">\/\/ add accounts<\/span>\n    $accountDB-&gt;addAccount(<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>, <span class=\"hljs-number\">1<\/span>, date(<span class=\"hljs-string\">'Y-m-d'<\/span>));\n    $accountDB-&gt;addAccount(<span class=\"hljs-string\">'Linda'<\/span>, <span class=\"hljs-string\">'Williams'<\/span>, <span class=\"hljs-number\">2<\/span>, date(<span class=\"hljs-string\">'Y-m-d'<\/span>));\n    $accountDB-&gt;addAccount(<span class=\"hljs-string\">'Maria'<\/span>, <span class=\"hljs-string\">'Miller'<\/span>, <span class=\"hljs-number\">3<\/span>, date(<span class=\"hljs-string\">'Y-m-d'<\/span>));\n\n\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'The new accounts have been added.'<\/span> . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>;\n    <span class=\"hljs-comment\">\/\/ <\/span>\n    $accountDB-&gt;addAccount(<span class=\"hljs-string\">'Susan'<\/span>, <span class=\"hljs-string\">'Wilson'<\/span>, <span class=\"hljs-number\">99<\/span>, date(<span class=\"hljs-string\">'Y-m-d'<\/span>));\n} <span class=\"hljs-keyword\">catch<\/span> (\\PDOException $e) {\n    <span class=\"hljs-keyword\">echo<\/span> $e-&gt;getMessage();\n}<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, connect to the PostgreSQL database.<\/li><li>Second, insert three accounts with silver, gold, and platinum levels.<\/li><li>Third, try to insert one more account but with a plan id that does not exist in the <code>plans<\/code> table. Based on the input, the step of assigning the plan to the account fails that cause the whole transaction to be rolled back.<\/li><\/ul>\n\n\n\n<p>The following shows the output of the index.php file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><div><code class=\"hljs language-javascript\">The <span class=\"hljs-keyword\">new<\/span> accounts have been added.\n\nSQLSTATE[<span class=\"hljs-number\">23503<\/span>]: Foreign key violation: <span class=\"hljs-number\">7<\/span> ERROR: insert or update on table <span class=\"hljs-string\">\"account_plans\"<\/span> violates foreign key constraint <span class=\"hljs-string\">\"account_plans_plan_id_fkey\"<\/span> DETAIL: Key (plan_id)=(<span class=\"hljs-number\">99<\/span>) is not present <span class=\"hljs-keyword\">in<\/span> table <span class=\"hljs-string\">\"plans\"<\/span>.<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you query the data in the <code>accounts<\/code>\u00a0and <code>account_plans<\/code> tables, you will see only three rows inserted in each table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><div><code class=\"hljs language-sql\">stocks=<span class=\"hljs-comment\"># SELECT * FROM accounts;<\/span>\n id | first_name | last_name\n<span class=\"hljs-comment\">----+------------+-----------<\/span>\n  1 | John       | Doe\n  2 | Linda      | Williams\n  3 | Maria      | Miller\n(3 rows)\n\nstocks=<span class=\"hljs-comment\"># SELECT * FROM account_plans;<\/span>\n account_id | plan_id | effective_date\n<span class=\"hljs-comment\">------------+---------+----------------<\/span>\n          1 |       1 | 2016-06-13\n          2 |       2 | 2016-06-13\n          3 |       3 | 2016-06-13\n(3 rows)\n<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>Use the <code>beginTransaction<\/code>() method of the PDO object to start a transaction.<\/li><li>Use the <code>commit()<\/code> method to apply the changes to the database and <code>rollback()<\/code> method to undo the changes.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2042\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL PHP: Transaction\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2042\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL PHP: Transaction\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn how to perform transactions in PostgreSQL using PHP PDO. A transaction is a series of operations performed as a single logical unit of work. A transaction has four characteristics: Atomicity Consistency Isolation Durability These characteristics are referred to as (ACID). By default, PostgreSQL uses the auto-commit mode. This [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1980,"menu_order":5,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL PHP: Transaction<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to perform transactions in the PostgreSQL using PHP PDO.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/\",\"name\":\"PostgreSQL PHP: Transaction\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"datePublished\":\"2016-06-13T11:38:10+00:00\",\"dateModified\":\"2022-02-09T14:54:47+00:00\",\"description\":\"In this tutorial, you will learn how to perform transactions in the PostgreSQL using PHP PDO.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL PHP\",\"item\":\"https:\/\/www.postgresqltutorial.com\/postgresql-php\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL PHP: Transaction\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL PHP: Transaction","description":"In this tutorial, you will learn how to perform transactions in the PostgreSQL using PHP PDO.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/","name":"PostgreSQL PHP: Transaction","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"datePublished":"2016-06-13T11:38:10+00:00","dateModified":"2022-02-09T14:54:47+00:00","description":"In this tutorial, you will learn how to perform transactions in the PostgreSQL using PHP PDO.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/transaction\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL PHP","item":"https:\/\/www.postgresqltutorial.com\/postgresql-php\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL PHP: Transaction"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2042"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=2042"}],"version-history":[{"count":2,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2042\/revisions"}],"predecessor-version":[{"id":6099,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/2042\/revisions\/6099"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/1980"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=2042"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}