{"id":3804,"date":"2019-01-02T05:19:37","date_gmt":"2019-01-02T12:19:37","guid":{"rendered":"http:\/\/www.postgresqltutorial.com\/?page_id=3804"},"modified":"2020-07-29T23:24:00","modified_gmt":"2020-07-30T06:24:00","slug":"postgresql-cte","status":"publish","type":"page","link":"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-cte\/","title":{"rendered":"PostgreSQL CTE"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the PostgreSQL CTE (common table expressions) to simplify complex queries.<\/p>\n\n\n\n<h2>Introduction to PostgreSQL common table expressions or CTEs<\/h2>\n\n\n\n<p>A common table expression is a temporary result set which you can reference within another SQL statement including <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-select\/\">SELECT<\/a><\/code>, <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-insert\/\">INSERT<\/a><\/code>, <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-update\/\"><code>UPDATE<\/code><\/a> or <code><a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-delete\/\">DELETE<\/a><\/code>.<\/p>\n\n\n\n<p>Common Table Expressions are temporary in the sense that they only exist during the execution of the query.<\/p>\n\n\n\n<p>The following shows the syntax of creating a CTE:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">WITH cte_name (column_list) <span class=\"hljs-keyword\">AS<\/span> (\n    CTE_query_definition \n)\nstatement;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<ul><li>First, specify the name of the CTE following by an optional column list.<\/li><li>Second, inside the body of the <code>WITH<\/code> clause, specify a query that returns a result set. If you do not explicitly specify the column list after the CTE name, the select list of the <code>CTE_query_definition<\/code> will become the column list of the CTE.<\/li><li>Third, use the CTE like a table or view in the <code>statement<\/code> which can be a <code>SELECT<\/code>, <code>INSERT<\/code>, <code>UPDATE<\/code>, or <code>DELETE<\/code>.<\/li><\/ul>\n\n\n\n<p>Common Table Expressions or CTEs are typically used to simplify complex <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-joins\/\">joins<\/a> and <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-subquery\/\">subqueries<\/a> in PostgreSQL.<\/p>\n\n\n\n<h2>PostgreSQL CTE examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using CTEs to get a better understanding.<\/p>\n\n\n\n<h3>A simple PostgreSQL CTE example<\/h3>\n\n\n\n<p>We will use the <code>film<\/code> and <code>rental<\/code> tables from the sample database for the demonstration.<\/p>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">WITH cte_film <span class=\"hljs-keyword\">AS<\/span> (\n    SELECT \n        film_id, \n        title,\n        (<span class=\"hljs-keyword\">CASE<\/span> \n            WHEN length &lt; <span class=\"hljs-number\">30<\/span> THEN <span class=\"hljs-string\">'Short'<\/span>\n            WHEN length &lt; <span class=\"hljs-number\">90<\/span> THEN <span class=\"hljs-string\">'Medium'<\/span>\n            <span class=\"hljs-keyword\">ELSE<\/span> <span class=\"hljs-string\">'Long'<\/span>\n        END) length    \n    FROM\n        film\n)\nSELECT\n    film_id,\n    title,\n    length\nFROM \n    cte_film\nWHERE\n    length = <span class=\"hljs-string\">'Long'<\/span>\nORDER BY \n    title; <\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here is the partial output:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"269\" height=\"256\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/01\/PostgreSQL-CTE-Simple-Example.png\" alt=\"PostgreSQL CTE Simple Example\" class=\"wp-image-3806\"\/><\/figure>\n\n\n\n<p>Note that this example is for the demonstration purpose.<\/p>\n\n\n\n<p>In this example, we first defined a common table expression named <code>cte_film<\/code> using the <code>WITH<\/code> clause as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">WITH cte_film <span class=\"hljs-keyword\">AS<\/span> (\n    SELECT \n        film_id, \n        title,\n        (<span class=\"hljs-keyword\">CASE<\/span> \n            WHEN length &lt; <span class=\"hljs-number\">30<\/span> \n                THEN <span class=\"hljs-string\">'Short'<\/span>\n            WHEN length &gt;= <span class=\"hljs-number\">30<\/span> <span class=\"hljs-keyword\">AND<\/span> length &lt; <span class=\"hljs-number\">90<\/span> \n                THEN <span class=\"hljs-string\">'Medium'<\/span>\n            WHEN length &gt;=  <span class=\"hljs-number\">90<\/span> \n                THEN <span class=\"hljs-string\">'Long'<\/span>\n        END) length    \n    FROM\n        film\n)<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The common table expression has two parts:<\/p>\n\n\n\n<ul><li>The first part defines the name of the CTE which is <code>cte_film<\/code>.<\/li><li>The second part defines a <code>SELECT<\/code> statement that populates the expression with rows.<\/li><\/ul>\n\n\n\n<p>We then used the <code>cte_film<\/code> CTE in the <code>SELECT<\/code> statement to return only films whose lengths are &#8216;Long&#8217;.<\/p>\n\n\n\n<h3>Joining a CTE with a table example<\/h3>\n\n\n\n<p>In the following example, we will use the <code>rental<\/code> and <code>staff<\/code> tables:<\/p>\n\n\n\n<p>The following statement illustrates how to join a CTE with a table:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><div><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">WITH<\/span> <span class=\"hljs-selector-tag\">cte_rental<\/span> <span class=\"hljs-selector-tag\">AS<\/span> (\n    <span class=\"hljs-selector-tag\">SELECT<\/span> <span class=\"hljs-selector-tag\">staff_id<\/span>,\n        <span class=\"hljs-selector-tag\">COUNT<\/span>(<span class=\"hljs-selector-tag\">rental_id<\/span>) <span class=\"hljs-selector-tag\">rental_count<\/span>\n    <span class=\"hljs-selector-tag\">FROM<\/span>   <span class=\"hljs-selector-tag\">rental<\/span>\n    <span class=\"hljs-selector-tag\">GROUP<\/span>  <span class=\"hljs-selector-tag\">BY<\/span> <span class=\"hljs-selector-tag\">staff_id<\/span>\n)\n<span class=\"hljs-selector-tag\">SELECT<\/span> <span class=\"hljs-selector-tag\">s<\/span><span class=\"hljs-selector-class\">.staff_id<\/span>,\n    <span class=\"hljs-selector-tag\">first_name<\/span>,\n    <span class=\"hljs-selector-tag\">last_name<\/span>,\n    <span class=\"hljs-selector-tag\">rental_count<\/span>\n<span class=\"hljs-selector-tag\">FROM<\/span> <span class=\"hljs-selector-tag\">staff<\/span> <span class=\"hljs-selector-tag\">s<\/span>\n    <span class=\"hljs-selector-tag\">INNER<\/span> <span class=\"hljs-selector-tag\">JOIN<\/span> <span class=\"hljs-selector-tag\">cte_rental<\/span> <span class=\"hljs-selector-tag\">USING<\/span> (<span class=\"hljs-selector-tag\">staff_id<\/span>); <\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, the CTE returns a result set that includes staff id and the number of rentals.<\/li><li>Then, join the <code>staff<\/code> table with the CTE using the <code>staff_id<\/code> column.<\/li><\/ul>\n\n\n\n<p>Here is the output:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"337\" height=\"52\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/01\/PostgreSQL-CTE-joined-with-a-table.png\" alt=\"\" class=\"wp-image-3807\"\/><\/figure>\n\n\n\n<h3>Using CTE with a window function example<\/h3>\n\n\n\n<p>The following statement illustrates how to use the CTE with the <code>RANK()<\/code> <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-window-function\/\">window function<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><div><code class=\"hljs language-php\">WITH cte_film <span class=\"hljs-keyword\">AS<\/span>  (\n    SELECT film_id,\n        title,\n        rating,\n        length,\n        RANK() OVER (\n            PARTITION BY rating\n            ORDER BY length DESC) \n        length_rank\n    FROM \n        film\n)\nSELECT *\nFROM cte_film\nWHERE length_rank = <span class=\"hljs-number\">1<\/span>;<\/code><\/div><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, we defined a CTE that returns the film ranking by length for each film rating.<\/li><li>Second, we selected only films whose length rankings are one.<\/li><\/ul>\n\n\n\n<p>The following picture shows the output:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"412\" height=\"271\" src=\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/01\/PostgreSQL-CTE-with-Window-Function-example.png\" alt=\"\" class=\"wp-image-3808\"\/><\/figure>\n\n\n\n<h2>PostgreSQL CTE advantages<\/h2>\n\n\n\n<p>The following are some advantages of using common table expressions or CTEs:<\/p>\n\n\n\n<ul><li>Improve the readability of complex queries. You use CTEs to organize complex queries in a more organized and readable manner.<\/li><li>Ability to create recursive queries. <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-recursive-query\/\">Recursive queries<\/a> are queries that reference themselves. The recursive queries come in handy when you want to query hierarchical data such as organization chart or bill of materials.<\/li><li>Use in conjunction with <a href=\"https:\/\/www.postgresqltutorial.com\/postgresql-window-function\/\">window functions<\/a>. You can use CTEs in conjunction with window functions to create an initial result set and use another select statement to further process this result set.<\/li><\/ul>\n\n\n\n<p>In this tutorial, you have learned about the PostgreSQL CTE or common table expression to simplify complex queries.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"3804\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-cte\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL CTE\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"3804\"\n\t\t\t\tdata-post-url=\"https:\/\/www.postgresqltutorial.com\/postgresql-tutorial\/postgresql-cte\/\"\n\t\t\t\tdata-post-title=\"PostgreSQL CTE\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This tutorial shows you how to use the PostgreSQL CTE (common table expressions) to simplify complex queries.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":7,"menu_order":33,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL CTE<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use the PostgreSQL CTE (common table expressions) to simplify complex queries.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\",\"url\":\"https:\/\/www.postgresqltutorial.com\/\",\"name\":\"PostgreSQL Tutorial\",\"description\":\"Comprehensive Postgresql Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#primaryimage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/01\/PostgreSQL-CTE-Simple-Example.png\",\"contentUrl\":\"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/01\/PostgreSQL-CTE-Simple-Example.png\",\"width\":269,\"height\":256,\"caption\":\"PostgreSQL CTE Simple Example\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#webpage\",\"url\":\"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/\",\"name\":\"PostgreSQL CTE\",\"isPartOf\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#primaryimage\"},\"datePublished\":\"2019-01-02T12:19:37+00:00\",\"dateModified\":\"2020-07-30T06:24:00+00:00\",\"description\":\"This tutorial shows you how to use the PostgreSQL CTE (common table expressions) to simplify complex queries.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL Tutorial\",\"item\":\"https:\/\/www.postgresqltutorial.com\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"PostgreSQL CTE\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL CTE","description":"This tutorial shows you how to use the PostgreSQL CTE (common table expressions) to simplify complex queries.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/www.postgresqltutorial.com\/#website","url":"https:\/\/www.postgresqltutorial.com\/","name":"PostgreSQL Tutorial","description":"Comprehensive Postgresql Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.postgresqltutorial.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#primaryimage","url":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/01\/PostgreSQL-CTE-Simple-Example.png","contentUrl":"https:\/\/www.postgresqltutorial.com\/wp-content\/uploads\/2019\/01\/PostgreSQL-CTE-Simple-Example.png","width":269,"height":256,"caption":"PostgreSQL CTE Simple Example"},{"@type":"WebPage","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#webpage","url":"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/","name":"PostgreSQL CTE","isPartOf":{"@id":"https:\/\/www.postgresqltutorial.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#primaryimage"},"datePublished":"2019-01-02T12:19:37+00:00","dateModified":"2020-07-30T06:24:00+00:00","description":"This tutorial shows you how to use the PostgreSQL CTE (common table expressions) to simplify complex queries.","breadcrumb":{"@id":"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.postgresqltutorial.com\/postgresql-cte\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.postgresqltutorial.com\/postgresql-cte\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL Tutorial","item":"https:\/\/www.postgresqltutorial.com\/"},{"@type":"ListItem","position":3,"name":"PostgreSQL CTE"}]}]}},"_links":{"self":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/3804"}],"collection":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/comments?post=3804"}],"version-history":[{"count":2,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/3804\/revisions"}],"predecessor-version":[{"id":5698,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/3804\/revisions\/5698"}],"up":[{"embeddable":true,"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/pages\/7"}],"wp:attachment":[{"href":"https:\/\/www.postgresqltutorial.com\/wp-json\/wp\/v2\/media?parent=3804"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}